
speed control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a44  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08006b04  08006b04  00007b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca8  08006ca8  00008078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006ca8  08006ca8  00008078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006ca8  08006ca8  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca8  08006ca8  00007ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cac  08006cac  00007cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006cb0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed4  20000078  08006d28  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f4c  08006d28  00008f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a396  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad5  00000000  00000000  00022436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00025f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c0  00000000  00000000  000275e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db3  00000000  00000000  000287a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a63f  00000000  00000000  0003f55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc1a  00000000  00000000  00059b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e57b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005758  00000000  00000000  000e57f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000eaf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006aec 	.word	0x08006aec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006aec 	.word	0x08006aec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800041c:	4a05      	ldr	r2, [pc, #20]	@ (8000434 <MX_FREERTOS_Init+0x1c>)
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <MX_FREERTOS_Init+0x20>)
 8000420:	2100      	movs	r1, #0
 8000422:	0018      	movs	r0, r3
 8000424:	f003 fee2 	bl	80041ec <osThreadNew>
 8000428:	0002      	movs	r2, r0
 800042a:	4b04      	ldr	r3, [pc, #16]	@ (800043c <MX_FREERTOS_Init+0x24>)
 800042c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	08006b40 	.word	0x08006b40
 8000438:	08000441 	.word	0x08000441
 800043c:	20000094 	.word	0x20000094

08000440 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f003 ff63 	bl	8004314 <osDelay>
 800044e:	e7fb      	b.n	8000448 <StartDefaultTask+0x8>

08000450 <TIM1_CC_IRQHandler>:
/* USER CODE BEGIN PFP */
volatile uint32_t pulse_count = 0;  // Count of valid pulses
volatile uint32_t rpm = 0;  // Calculated RPM
uint32_t last_time = 0;  // Store the last time to calculate RPM every second
void TIM1_CC_IRQHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    // Check if the interrupt flag for Capture/Compare 1 is set
    if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) != RESET)
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <TIM1_CC_IRQHandler+0x2c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	2202      	movs	r2, #2
 800045c:	4013      	ands	r3, r2
 800045e:	2b02      	cmp	r3, #2
 8000460:	d109      	bne.n	8000476 <TIM1_CC_IRQHandler+0x26>
    {
        // Clear the interrupt flag to prevent it from triggering again
        __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <TIM1_CC_IRQHandler+0x2c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2203      	movs	r2, #3
 8000468:	4252      	negs	r2, r2
 800046a:	611a      	str	r2, [r3, #16]
        pulse_count++;
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <TIM1_CC_IRQHandler+0x30>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <TIM1_CC_IRQHandler+0x30>)
 8000474:	601a      	str	r2, [r3, #0]

        //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

    }
}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000a8 	.word	0x200000a8
 8000480:	200001d4 	.word	0x200001d4

08000484 <Send_RPM_Via_UART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Send_RPM_Via_UART(uint32_t rpm_value)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b089      	sub	sp, #36	@ 0x24
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    char rpm_str[20];

    // Convert the RPM value to a string using sprintf
    sprintf(rpm_str, "RPM: %lu\r\n", rpm_value);  // Convert RPM to string format
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	490b      	ldr	r1, [pc, #44]	@ (80004bc <Send_RPM_Via_UART+0x38>)
 8000490:	240c      	movs	r4, #12
 8000492:	193b      	adds	r3, r7, r4
 8000494:	0018      	movs	r0, r3
 8000496:	f005 fe8b 	bl	80061b0 <siprintf>
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    // Send the string via UART
    HAL_UART_Transmit(&huart1, (uint8_t*)rpm_str, strlen(rpm_str), 1000);  // Timeout is 1000 ms
 800049a:	193b      	adds	r3, r7, r4
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff fe33 	bl	8000108 <strlen>
 80004a2:	0003      	movs	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	23fa      	movs	r3, #250	@ 0xfa
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	1939      	adds	r1, r7, r4
 80004ac:	4804      	ldr	r0, [pc, #16]	@ (80004c0 <Send_RPM_Via_UART+0x3c>)
 80004ae:	f003 f831 	bl	8003514 <HAL_UART_Transmit>
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b009      	add	sp, #36	@ 0x24
 80004b8:	bd90      	pop	{r4, r7, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	08006b10 	.word	0x08006b10
 80004c0:	20000140 	.word	0x20000140

080004c4 <measure_fan_rpm>:
void measure_fan_rpm()
{    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    // Calculate RPM if 1 second has passed
    if (HAL_GetTick() - last_time >= 1000)  // 1000 ms (1 second)
 80004c8:	f000 fe6a 	bl	80011a0 <HAL_GetTick>
 80004cc:	0002      	movs	r2, r0
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <measure_fan_rpm+0x4c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	1ad2      	subs	r2, r2, r3
 80004d4:	23fa      	movs	r3, #250	@ 0xfa
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	429a      	cmp	r2, r3
 80004da:	d315      	bcc.n	8000508 <measure_fan_rpm+0x44>
    {
        // Calculate RPM based on pulse count (assuming 2 pulses per revolution)
        rpm = (pulse_count * 60) / 2;  // RPM = (Pulse Frequency * 60) / PPR
 80004dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <measure_fan_rpm+0x50>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	0013      	movs	r3, r2
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	085a      	lsrs	r2, r3, #1
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <measure_fan_rpm+0x54>)
 80004ec:	601a      	str	r2, [r3, #0]
        last_time = HAL_GetTick();  // Update last time to current time
 80004ee:	f000 fe57 	bl	80011a0 <HAL_GetTick>
 80004f2:	0002      	movs	r2, r0
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <measure_fan_rpm+0x4c>)
 80004f6:	601a      	str	r2, [r3, #0]
        pulse_count = 0;  // Reset the pulse count for the next second
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <measure_fan_rpm+0x50>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
        Send_RPM_Via_UART(rpm);
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <measure_fan_rpm+0x54>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff ffbe 	bl	8000484 <Send_RPM_Via_UART>
    }
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	200001dc 	.word	0x200001dc
 8000514:	200001d4 	.word	0x200001d4
 8000518:	200001d8 	.word	0x200001d8

0800051c <RPM_Task>:
        // Small delay to avoid busy-waiting
        vTaskDelay(pdMS_TO_TICKS(100));  // Delay 100ms
    }
}
void RPM_Task(void *pvParameters)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    while (1)
    {   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000524:	23a0      	movs	r3, #160	@ 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2201      	movs	r2, #1
 800052a:	2120      	movs	r1, #32
 800052c:	0018      	movs	r0, r3
 800052e:	f001 f8ef 	bl	8001710 <HAL_GPIO_WritePin>
        // Measure RPM (e.g., from tachometer or counter)
        measure_fan_rpm();  // Custom function to get RPM and send it via UART
 8000532:	f7ff ffc7 	bl	80004c4 <measure_fan_rpm>



        // Delay before next reading (e.g., 1 second)
        vTaskDelay(pdMS_TO_TICKS(10000));  // Delay 1000ms (1 second)
 8000536:	4b03      	ldr	r3, [pc, #12]	@ (8000544 <RPM_Task+0x28>)
 8000538:	0018      	movs	r0, r3
 800053a:	f004 fc2f 	bl	8004d9c <vTaskDelay>
    {   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	e7f0      	b.n	8000524 <RPM_Task+0x8>
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	00002710 	.word	0x00002710

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fdfd 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f843 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f9a5 	bl	80008a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800055a:	f000 f887 	bl	800066c <MX_TIM1_Init>
  MX_TIM3_Init();
 800055e:	f000 f8f1 	bl	8000744 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000562:	f000 f951 	bl	8000808 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000566:	f003 fdf1 	bl	800414c <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 800056a:	f7ff ff55 	bl	8000418 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fc14 	bl	8000d9c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000574:	2101      	movs	r1, #1
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fc7a 	bl	8000e70 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <main+0x88>)
 800057e:	22e1      	movs	r2, #225	@ 0xe1
 8000580:	0252      	lsls	r2, r2, #9
 8000582:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <main+0x88>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <main+0x88>)
 800058c:	2200      	movs	r2, #0
 800058e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <main+0x88>)
 8000592:	2200      	movs	r2, #0
 8000594:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <main+0x88>)
 8000598:	2200      	movs	r2, #0
 800059a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <main+0x88>)
 800059e:	0019      	movs	r1, r3
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 fd0b 	bl	8000fbc <BSP_COM_Init>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <main+0x66>
  {
    Error_Handler();
 80005aa:	f000 f9bb 	bl	8000924 <Error_Handler>
  }

  xTaskCreate(RPM_Task, "RPM_Task", 128, NULL, 1, NULL);
 80005ae:	4909      	ldr	r1, [pc, #36]	@ (80005d4 <main+0x8c>)
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <main+0x90>)
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	@ 0x80
 80005be:	f004 fa8b 	bl	8004ad8 <xTaskCreate>

  // Create the Command task (higher priority)
  //xTaskCreate(Command_Task, "Command_Task", 128, NULL, 2, NULL);

  // Start the FreeRTOS scheduler
  vTaskStartScheduler();
 80005c2:	f004 fc11 	bl	8004de8 <vTaskStartScheduler>
  /* Start scheduler */
  osKernelStart();
 80005c6:	f003 fde7 	bl	8004198 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  // Create the RPM task (low priority)

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	e7fd      	b.n	80005ca <main+0x82>
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	20000098 	.word	0x20000098
 80005d4:	08006b1c 	.word	0x08006b1c
 80005d8:	0800051d 	.word	0x0800051d

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b08d      	sub	sp, #52	@ 0x34
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	2414      	movs	r4, #20
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	231c      	movs	r3, #28
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f005 fe01 	bl	80061f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f2:	003b      	movs	r3, r7
 80005f4:	0018      	movs	r0, r3
 80005f6:	2314      	movs	r3, #20
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f005 fdfa 	bl	80061f4 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000600:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <SystemClock_Config+0x8c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2207      	movs	r2, #7
 8000606:	4393      	bics	r3, r2
 8000608:	001a      	movs	r2, r3
 800060a:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <SystemClock_Config+0x8c>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	0252      	lsls	r2, r2, #9
 800061e:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f892 	bl	800174c <HAL_RCC_OscConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800062c:	f000 f97a 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	003b      	movs	r3, r7
 8000632:	2207      	movs	r2, #7
 8000634:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000636:	003b      	movs	r3, r7
 8000638:	2201      	movs	r2, #1
 800063a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000648:	003b      	movs	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800064e:	003b      	movs	r3, r7
 8000650:	2101      	movs	r1, #1
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fa5e 	bl	8001b14 <HAL_RCC_ClockConfig>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800065c:	f000 f962 	bl	8000924 <Error_Handler>
  }
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b00d      	add	sp, #52	@ 0x34
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40022000 	.word	0x40022000

0800066c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000672:	2314      	movs	r3, #20
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	0018      	movs	r0, r3
 8000678:	230c      	movs	r3, #12
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f005 fdb9 	bl	80061f4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	0018      	movs	r0, r3
 8000686:	2310      	movs	r3, #16
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f005 fdb2 	bl	80061f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000690:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <MX_TIM1_Init+0xcc>)
 8000692:	4a2a      	ldr	r2, [pc, #168]	@ (800073c <MX_TIM1_Init+0xd0>)
 8000694:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000696:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <MX_TIM1_Init+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <MX_TIM1_Init+0xcc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006a2:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <MX_TIM1_Init+0xcc>)
 80006a4:	4a26      	ldr	r2, [pc, #152]	@ (8000740 <MX_TIM1_Init+0xd4>)
 80006a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <MX_TIM1_Init+0xcc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <MX_TIM1_Init+0xcc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <MX_TIM1_Init+0xcc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80006ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <MX_TIM1_Init+0xcc>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fdbf 	bl	8002240 <HAL_TIM_IC_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80006c6:	f000 f92d 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2114      	movs	r1, #20
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006de:	187a      	adds	r2, r7, r1
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_TIM1_Init+0xcc>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fe45 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80006ee:	f000 f919 	bl	8000924 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2201      	movs	r2, #1
 80006fc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800070a:	1d39      	adds	r1, r7, #4
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_TIM1_Init+0xcc>)
 800070e:	2200      	movs	r2, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f002 f81f 	bl	8002754 <HAL_TIM_IC_ConfigChannel>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800071a:	f000 f903 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  // Start the input capture with interrupt
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_TIM1_Init+0xcc>)
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fde4 	bl	80022f0 <HAL_TIM_IC_Start_IT>
  //HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);  // Set priority (you can adjust this)
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000728:	200e      	movs	r0, #14
 800072a:	f000 fde0 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM1_Init 2 */

}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b008      	add	sp, #32
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	200000a8 	.word	0x200000a8
 800073c:	40012c00 	.word	0x40012c00
 8000740:	0000ffff 	.word	0x0000ffff

08000744 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	231c      	movs	r3, #28
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	0018      	movs	r0, r3
 8000750:	230c      	movs	r3, #12
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f005 fd4d 	bl	80061f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	003b      	movs	r3, r7
 800075c:	0018      	movs	r0, r3
 800075e:	231c      	movs	r3, #28
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f005 fd46 	bl	80061f4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000768:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <MX_TIM3_Init+0xb8>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <MX_TIM3_Init+0xbc>)
 800076c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <MX_TIM3_Init+0xb8>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_TIM3_Init+0xb8>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800077a:	4b20      	ldr	r3, [pc, #128]	@ (80007fc <MX_TIM3_Init+0xb8>)
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <MX_TIM3_Init+0xc0>)
 800077e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <MX_TIM3_Init+0xb8>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_TIM3_Init+0xb8>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <MX_TIM3_Init+0xb8>)
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fcfe 	bl	8002190 <HAL_TIM_PWM_Init>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000798:	f000 f8c4 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	211c      	movs	r1, #28
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_TIM3_Init+0xb8>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fddf 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80007ba:	f000 f8b3 	bl	8000924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007be:	003b      	movs	r3, r7
 80007c0:	2260      	movs	r2, #96	@ 0x60
 80007c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	0039      	movs	r1, r7
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_TIM3_Init+0xb8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 f85d 	bl	800289c <HAL_TIM_PWM_ConfigChannel>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80007e6:	f000 f89d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ea:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <MX_TIM3_Init+0xb8>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 f931 	bl	8000a54 <HAL_TIM_MspPostInit>

}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b00a      	add	sp, #40	@ 0x28
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	200000f4 	.word	0x200000f4
 8000800:	40000400 	.word	0x40000400
 8000804:	0000ffff 	.word	0x0000ffff

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART2;
 800080c:	4b23      	ldr	r3, [pc, #140]	@ (800089c <MX_USART1_UART_Init+0x94>)
 800080e:	4a24      	ldr	r2, [pc, #144]	@ (80008a0 <MX_USART1_UART_Init+0x98>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000812:	4b22      	ldr	r3, [pc, #136]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000814:	22e1      	movs	r2, #225	@ 0xe1
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_USART1_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_USART1_UART_Init+0x94>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_USART1_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART1_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000852:	0018      	movs	r0, r3
 8000854:	f002 fe08 	bl	8003468 <HAL_UART_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f862 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f003 fae5 	bl	8003e34 <HAL_UARTEx_SetTxFifoThreshold>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f859 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f003 fb1c 	bl	8003eb4 <HAL_UARTEx_SetRxFifoThreshold>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 f850 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <MX_USART1_UART_Init+0x94>)
 8000886:	0018      	movs	r0, r3
 8000888:	f003 fa9a 	bl	8003dc0 <HAL_UARTEx_DisableFifoMode>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f848 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	20000140 	.word	0x20000140
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008b0:	2104      	movs	r1, #4
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ba:	2204      	movs	r2, #4
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008c8:	2120      	movs	r1, #32
 80008ca:	430a      	orrs	r2, r1
 80008cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d2:	2220      	movs	r2, #32
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <MX_GPIO_Init+0x58>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b004      	add	sp, #16
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000912:	f000 fc33 	bl	800117c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	40002000 	.word	0x40002000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_MspInit+0x50>)
 8000938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <HAL_MspInit+0x50>)
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	641a      	str	r2, [r3, #64]	@ 0x40
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_MspInit+0x50>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_MspInit+0x50>)
 8000950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <HAL_MspInit+0x50>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	0549      	lsls	r1, r1, #21
 8000958:	430a      	orrs	r2, r1
 800095a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_MspInit+0x50>)
 800095e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	055b      	lsls	r3, r3, #21
 8000964:	4013      	ands	r3, r2
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800096a:	2302      	movs	r3, #2
 800096c:	425b      	negs	r3, r3
 800096e:	2200      	movs	r2, #0
 8000970:	2103      	movs	r1, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fca6 	bl	80012c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b08b      	sub	sp, #44	@ 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	2414      	movs	r4, #20
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f005 fc2c 	bl	80061f4 <memset>
  if(htim_ic->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <HAL_TIM_IC_MspInit+0x8c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d130      	bne.n	8000a08 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <HAL_TIM_IC_MspInit+0x90>)
 80009a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <HAL_TIM_IC_MspInit+0x90>)
 80009ac:	2180      	movs	r1, #128	@ 0x80
 80009ae:	0109      	lsls	r1, r1, #4
 80009b0:	430a      	orrs	r2, r1
 80009b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_TIM_IC_MspInit+0x90>)
 80009b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_TIM_IC_MspInit+0x90>)
 80009c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <HAL_TIM_IC_MspInit+0x90>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	430a      	orrs	r2, r1
 80009cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_TIM_IC_MspInit+0x90>)
 80009d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d2:	2201      	movs	r2, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2202      	movs	r2, #2
 80009e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2205      	movs	r2, #5
 80009f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	23a0      	movs	r3, #160	@ 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fd12 	bl	800142c <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b00b      	add	sp, #44	@ 0x2c
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	40012c00 	.word	0x40012c00
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a09      	ldr	r2, [pc, #36]	@ (8000a4c <HAL_TIM_PWM_MspInit+0x34>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10b      	bne.n	8000a42 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x38>)
 8000a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x38>)
 8000a30:	2102      	movs	r1, #2
 8000a32:	430a      	orrs	r2, r1
 8000a34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x38>)
 8000a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	40000400 	.word	0x40000400
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b089      	sub	sp, #36	@ 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	240c      	movs	r4, #12
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	0018      	movs	r0, r3
 8000a62:	2314      	movs	r3, #20
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f005 fbc4 	bl	80061f4 <memset>
  if(htim->Instance==TIM3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <HAL_TIM_MspPostInit+0x70>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d122      	bne.n	8000abc <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_TIM_MspPostInit+0x74>)
 8000a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_TIM_MspPostInit+0x74>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_TIM_MspPostInit+0x74>)
 8000a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a8e:	0021      	movs	r1, r4
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2240      	movs	r2, #64	@ 0x40
 8000a94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2202      	movs	r2, #2
 8000a9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2201      	movs	r2, #1
 8000aac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	187a      	adds	r2, r7, r1
 8000ab0:	23a0      	movs	r3, #160	@ 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fcb8 	bl	800142c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b009      	add	sp, #36	@ 0x24
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	40000400 	.word	0x40000400
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b091      	sub	sp, #68	@ 0x44
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	232c      	movs	r3, #44	@ 0x2c
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2314      	movs	r3, #20
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f005 fb88 	bl	80061f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	2410      	movs	r4, #16
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	231c      	movs	r3, #28
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f005 fb80 	bl	80061f4 <memset>
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a2e      	ldr	r2, [pc, #184]	@ (8000bb4 <HAL_UART_MspInit+0xe8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d156      	bne.n	8000bac <HAL_UART_MspInit+0xe0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2201      	movs	r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 f9a5 	bl	8001e5c <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b16:	f7ff ff05 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	01c9      	lsls	r1, r1, #7
 8000b24:	430a      	orrs	r2, r1
 8000b26:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	4013      	ands	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b4e:	242c      	movs	r4, #44	@ 0x2c
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2202      	movs	r2, #2
 8000b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2202      	movs	r2, #2
 8000b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	193a      	adds	r2, r7, r4
 8000b70:	23a0      	movs	r3, #160	@ 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fc58 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b7c:	0021      	movs	r1, r4
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2280      	movs	r2, #128	@ 0x80
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2202      	movs	r2, #2
 8000b8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	187a      	adds	r2, r7, r1
 8000ba0:	23a0      	movs	r3, #160	@ 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fc40 	bl	800142c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b011      	add	sp, #68	@ 0x44
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM14 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d843      	bhi.n	8000c5a <HAL_InitTick+0x9e>
   {
     HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	2013      	movs	r0, #19
 8000bda:	f000 fb73 	bl	80012c4 <HAL_NVIC_SetPriority>

     /* Enable the TIM14 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000bde:	2013      	movs	r0, #19
 8000be0:	f000 fb85 	bl	80012ee <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <HAL_InitTick+0xb8>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000bea:	4b23      	ldr	r3, [pc, #140]	@ (8000c78 <HAL_InitTick+0xbc>)
 8000bec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <HAL_InitTick+0xbc>)
 8000bf0:	2180      	movs	r1, #128	@ 0x80
 8000bf2:	0209      	lsls	r1, r1, #8
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <HAL_InitTick+0xbc>)
 8000bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c06:	2310      	movs	r3, #16
 8000c08:	18fa      	adds	r2, r7, r3
 8000c0a:	2314      	movs	r3, #20
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 f8f5 	bl	8001e00 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c16:	f001 f8db 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c20:	4916      	ldr	r1, [pc, #88]	@ (8000c7c <HAL_InitTick+0xc0>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fa82 	bl	800012c <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_InitTick+0xc4>)
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <HAL_InitTick+0xc8>)
 8000c32:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0xc4>)
 8000c36:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <HAL_InitTick+0xcc>)
 8000c38:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_InitTick+0xc4>)
 8000c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c3e:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <HAL_InitTick+0xc4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_InitTick+0xc4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_InitTick+0xc4>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 f9f0 	bl	8002034 <HAL_TIM_Base_Init>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d108      	bne.n	8000c6a <HAL_InitTick+0xae>
 8000c58:	e001      	b.n	8000c5e <HAL_InitTick+0xa2>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e006      	b.n	8000c6c <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_InitTick+0xc4>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fa47 	bl	80020f4 <HAL_TIM_Base_Start_IT>
 8000c66:	0003      	movs	r3, r0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0xb0>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b00c      	add	sp, #48	@ 0x30
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000001c 	.word	0x2000001c
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	000f4240 	.word	0x000f4240
 8000c80:	200001e0 	.word	0x200001e0
 8000c84:	40002000 	.word	0x40002000
 8000c88:	000003e7 	.word	0x000003e7

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f969 	bl	8000f78 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <TIM14_IRQHandler+0x14>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 fc46 	bl	8002544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	200001e0 	.word	0x200001e0

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f005 fa86 	bl	8006204 <__errno>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	425b      	negs	r3, r3
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	18d2      	adds	r2, r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <_sbrk+0x64>)
 8000d14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b006      	add	sp, #24
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20003000 	.word	0x20003000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	2000022c 	.word	0x2000022c
 8000d2c:	20001f50 	.word	0x20001f50

08000d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <SystemInit+0x14>)
 8000d36:	2280      	movs	r2, #128	@ 0x80
 8000d38:	0512      	lsls	r2, r2, #20
 8000d3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff fff0 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d52:	e003      	b.n	8000d5c <LoopCopyDataInit>

08000d54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d5a:	3104      	adds	r1, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d5c:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <LoopForever+0xe>)
  adds r2, r0, r1
 8000d60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d64:	d3f6      	bcc.n	8000d54 <CopyDataInit>
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopForever+0x12>)
  b LoopFillZerobss
 8000d68:	e002      	b.n	8000d70 <LoopFillZerobss>

08000d6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d6c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6e:	3204      	adds	r2, #4

08000d70 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <LoopForever+0x16>)
  cmp r2, r3
 8000d72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d74:	d3f9      	bcc.n	8000d6a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d76:	f005 fa4b 	bl	8006210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fbe5 	bl	8000548 <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000d84:	08006cb0 	.word	0x08006cb0
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d8c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000d90:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000d94:	20001f4c 	.word	0x20001f4c

08000d98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_IRQHandler>
	...

08000d9c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d003      	beq.n	8000dc4 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dc2:	e04a      	b.n	8000e5a <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10c      	bne.n	8000de6 <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <BSP_LED_Init+0xc8>)
 8000dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <BSP_LED_Init+0xc8>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <BSP_LED_Init+0xc8>)
 8000dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	e00b      	b.n	8000dfe <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 8000de6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <BSP_LED_Init+0xc8>)
 8000de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dea:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <BSP_LED_Init+0xc8>)
 8000dec:	2104      	movs	r1, #4
 8000dee:	430a      	orrs	r2, r1
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <BSP_LED_Init+0xc8>)
 8000df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000df6:	2204      	movs	r2, #4
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <BSP_LED_Init+0xcc>)
 8000e04:	0052      	lsls	r2, r2, #1
 8000e06:	5ad3      	ldrh	r3, [r2, r3]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2201      	movs	r2, #1
 8000e14:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781a      	ldrb	r2, [r3, #0]
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <BSP_LED_Init+0xd0>)
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	58d3      	ldr	r3, [r2, r3]
 8000e2c:	187a      	adds	r2, r7, r1
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 fafb 	bl	800142c <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d10d      	bne.n	8000e5a <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781a      	ldrb	r2, [r3, #0]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <BSP_LED_Init+0xd0>)
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	58d0      	ldr	r0, [r2, r3]
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <BSP_LED_Init+0xcc>)
 8000e4e:	0052      	lsls	r2, r2, #1
 8000e50:	5ad3      	ldrh	r3, [r2, r3]
 8000e52:	2201      	movs	r2, #1
 8000e54:	0019      	movs	r1, r3
 8000e56:	f000 fc5b 	bl	8001710 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b00a      	add	sp, #40	@ 0x28
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	08006bc4 	.word	0x08006bc4
 8000e6c:	20000008 	.word	0x20000008

08000e70 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	0002      	movs	r2, r0
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	1c0a      	adds	r2, r1, #0
 8000e80:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e82:	4b36      	ldr	r3, [pc, #216]	@ (8000f5c <BSP_PB_Init+0xec>)
 8000e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e86:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <BSP_PB_Init+0xec>)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e8e:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <BSP_PB_Init+0xec>)
 8000e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e92:	2204      	movs	r2, #4
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000e9a:	2380      	movs	r3, #128	@ 0x80
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	210c      	movs	r1, #12
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2202      	movs	r2, #2
 8000eb0:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000eb2:	1dbb      	adds	r3, r7, #6
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10d      	bne.n	8000ed6 <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <BSP_PB_Init+0xf0>)
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	58d3      	ldr	r3, [r2, r3]
 8000eca:	187a      	adds	r2, r7, r1
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 faac 	bl	800142c <HAL_GPIO_Init>
 8000ed4:	e03c      	b.n	8000f50 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000ed6:	210c      	movs	r1, #12
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <BSP_PB_Init+0xf4>)
 8000edc:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <BSP_PB_Init+0xf0>)
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	58d3      	ldr	r3, [r2, r3]
 8000ee8:	187a      	adds	r2, r7, r1
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 fa9d 	bl	800142c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4a1a      	ldr	r2, [pc, #104]	@ (8000f68 <BSP_PB_Init+0xf8>)
 8000f00:	1898      	adds	r0, r3, r2
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <BSP_PB_Init+0xfc>)
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	58d3      	ldr	r3, [r2, r3]
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	f000 fa30 	bl	8001372 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	0013      	movs	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <BSP_PB_Init+0xf8>)
 8000f20:	1898      	adds	r0, r3, r2
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <BSP_PB_Init+0x100>)
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	58d3      	ldr	r3, [r2, r3]
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f000 f9ed 	bl	800130e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f34:	2007      	movs	r0, #7
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <BSP_PB_Init+0x104>)
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	58d3      	ldr	r3, [r2, r3]
 8000f40:	2200      	movs	r2, #0
 8000f42:	0019      	movs	r1, r3
 8000f44:	f000 f9be 	bl	80012c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f48:	2307      	movs	r3, #7
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f9cf 	bl	80012ee <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b008      	add	sp, #32
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	20000010 	.word	0x20000010
 8000f64:	10210000 	.word	0x10210000
 8000f68:	20000230 	.word	0x20000230
 8000f6c:	08006bc8 	.word	0x08006bc8
 8000f70:	20000014 	.word	0x20000014
 8000f74:	20000018 	.word	0x20000018

08000f78 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	0002      	movs	r2, r0
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	0013      	movs	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	189b      	adds	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <BSP_PB_IRQHandler+0x2c>)
 8000f92:	189b      	adds	r3, r3, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 f9ff 	bl	8001398 <HAL_EXTI_IRQHandler>
}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	20000230 	.word	0x20000230

08000fa8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	425b      	negs	r3, r3
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e018      	b.n	8001010 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2294      	movs	r2, #148	@ 0x94
 8000fe4:	435a      	muls	r2, r3
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <BSP_COM_Init+0x60>)
 8000fe8:	18d3      	adds	r3, r2, r3
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f856 	bl	800109c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2294      	movs	r2, #148	@ 0x94
 8000ff6:	435a      	muls	r2, r3
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <BSP_COM_Init+0x60>)
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f000 f80d 	bl	8001020 <MX_USART2_Init>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d002      	beq.n	8001010 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800100a:	2304      	movs	r3, #4
 800100c:	425b      	negs	r3, r3
 800100e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001010:	68fb      	ldr	r3, [r7, #12]
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	2000023c 	.word	0x2000023c

08001020 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_USART2_Init+0x68>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	220c      	movs	r2, #12
 800103e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	895b      	ldrh	r3, [r3, #10]
 8001044:	001a      	movs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	891b      	ldrh	r3, [r3, #8]
 8001056:	001a      	movs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	899b      	ldrh	r3, [r3, #12]
 8001060:	001a      	movs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	0212      	lsls	r2, r2, #8
 800106c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0018      	movs	r0, r3
 8001078:	f002 f9f6 	bl	8003468 <HAL_UART_Init>
 800107c:	0003      	movs	r3, r0
}
 800107e:	0018      	movs	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	b002      	add	sp, #8
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	20000004 	.word	0x20000004

0800108c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff89 	bl	8000fa8 <BSP_PB_Callback>
}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b08b      	sub	sp, #44	@ 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80010a4:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <COM1_MspInit+0xac>)
 80010a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010a8:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <COM1_MspInit+0xac>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80010b0:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <COM1_MspInit+0xac>)
 80010b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b4:	2201      	movs	r2, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <COM1_MspInit+0xac>)
 80010be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010c0:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <COM1_MspInit+0xac>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	430a      	orrs	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80010c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <COM1_MspInit+0xac>)
 80010ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010cc:	2201      	movs	r2, #1
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <COM1_MspInit+0xac>)
 80010d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <COM1_MspInit+0xac>)
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	0289      	lsls	r1, r1, #10
 80010de:	430a      	orrs	r2, r1
 80010e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <COM1_MspInit+0xac>)
 80010e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80010f0:	2414      	movs	r4, #20
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	2204      	movs	r2, #4
 80010f6:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2202      	movs	r2, #2
 80010fc:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2202      	movs	r2, #2
 8001102:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2201      	movs	r2, #1
 8001108:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2201      	movs	r2, #1
 800110e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001110:	193a      	adds	r2, r7, r4
 8001112:	23a0      	movs	r3, #160	@ 0xa0
 8001114:	05db      	lsls	r3, r3, #23
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f000 f987 	bl	800142c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2208      	movs	r2, #8
 8001122:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2202      	movs	r2, #2
 8001128:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2201      	movs	r2, #1
 800112e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001130:	193a      	adds	r2, r7, r4
 8001132:	23a0      	movs	r3, #160	@ 0xa0
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f000 f977 	bl	800142c <HAL_GPIO_Init>
}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b00b      	add	sp, #44	@ 0x2c
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001158:	2003      	movs	r0, #3
 800115a:	f7ff fd2f 	bl	8000bbc <HAL_InitTick>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d003      	beq.n	800116a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e001      	b.n	800116e <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116a:	f7ff fbe1 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	001a      	movs	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	18d2      	adds	r2, r2, r3
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_IncTick+0x20>)
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000020 	.word	0x20000020
 800119c:	200002d0 	.word	0x200002d0

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	200002d0 	.word	0x200002d0

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	0002      	movs	r2, r0
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80011c6:	d809      	bhi.n	80011dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	001a      	movs	r2, r3
 80011ce:	231f      	movs	r3, #31
 80011d0:	401a      	ands	r2, r3
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_EnableIRQ+0x30>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	4091      	lsls	r1, r2
 80011d8:	000a      	movs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0002      	movs	r2, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80011fc:	d828      	bhi.n	8001250 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fe:	4a2f      	ldr	r2, [pc, #188]	@ (80012bc <__NVIC_SetPriority+0xd4>)
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	33c0      	adds	r3, #192	@ 0xc0
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	589b      	ldr	r3, [r3, r2]
 800120e:	1dfa      	adds	r2, r7, #7
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	0011      	movs	r1, r2
 8001214:	2203      	movs	r2, #3
 8001216:	400a      	ands	r2, r1
 8001218:	00d2      	lsls	r2, r2, #3
 800121a:	21ff      	movs	r1, #255	@ 0xff
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	43d2      	mvns	r2, r2
 8001222:	401a      	ands	r2, r3
 8001224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	22ff      	movs	r2, #255	@ 0xff
 800122c:	401a      	ands	r2, r3
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	0018      	movs	r0, r3
 8001234:	2303      	movs	r3, #3
 8001236:	4003      	ands	r3, r0
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123c:	481f      	ldr	r0, [pc, #124]	@ (80012bc <__NVIC_SetPriority+0xd4>)
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	430a      	orrs	r2, r1
 8001248:	33c0      	adds	r3, #192	@ 0xc0
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800124e:	e031      	b.n	80012b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <__NVIC_SetPriority+0xd8>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	0019      	movs	r1, r3
 8001258:	230f      	movs	r3, #15
 800125a:	400b      	ands	r3, r1
 800125c:	3b08      	subs	r3, #8
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3306      	adds	r3, #6
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1dfa      	adds	r2, r7, #7
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	0011      	movs	r1, r2
 8001270:	2203      	movs	r2, #3
 8001272:	400a      	ands	r2, r1
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	21ff      	movs	r1, #255	@ 0xff
 8001278:	4091      	lsls	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	43d2      	mvns	r2, r2
 800127e:	401a      	ands	r2, r3
 8001280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	22ff      	movs	r2, #255	@ 0xff
 8001288:	401a      	ands	r2, r3
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	2303      	movs	r3, #3
 8001292:	4003      	ands	r3, r0
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <__NVIC_SetPriority+0xd8>)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	001c      	movs	r4, r3
 80012a0:	230f      	movs	r3, #15
 80012a2:	4023      	ands	r3, r4
 80012a4:	3b08      	subs	r3, #8
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	430a      	orrs	r2, r1
 80012aa:	3306      	adds	r3, #6
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	18c3      	adds	r3, r0, r3
 80012b0:	3304      	adds	r3, #4
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	46c0      	nop			@ (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b003      	add	sp, #12
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	210f      	movs	r1, #15
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	1c02      	adds	r2, r0, #0
 80012d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ff81 	bl	80011e8 <__NVIC_SetPriority>
}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b004      	add	sp, #16
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	0002      	movs	r2, r0
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff57 	bl	80011b4 <__NVIC_EnableIRQ>
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	200b      	movs	r0, #11
 800131a:	183b      	adds	r3, r7, r0
 800131c:	1c0a      	adds	r2, r1, #0
 800131e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001320:	2317      	movs	r3, #23
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8001328:	183b      	adds	r3, r7, r0
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d010      	beq.n	8001352 <HAL_EXTI_RegisterCallback+0x44>
 8001330:	dc13      	bgt.n	800135a <HAL_EXTI_RegisterCallback+0x4c>
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <HAL_EXTI_RegisterCallback+0x2e>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d007      	beq.n	800134a <HAL_EXTI_RegisterCallback+0x3c>
 800133a:	e00e      	b.n	800135a <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
      break;
 8001348:	e00c      	b.n	8001364 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]
      break;
 8001350:	e008      	b.n	8001364 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
      break;
 8001358:	e004      	b.n	8001364 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 800135a:	2317      	movs	r3, #23
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
      break;
 8001362:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001364:	2317      	movs	r3, #23
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	781b      	ldrb	r3, [r3, #0]
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b006      	add	sp, #24
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e003      	b.n	800138e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800138c:	2300      	movs	r3, #0
  }
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	2201      	movs	r2, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	221f      	movs	r2, #31
 80013b2:	4013      	ands	r3, r2
 80013b4:	2201      	movs	r2, #1
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	4a18      	ldr	r2, [pc, #96]	@ (8001424 <HAL_EXTI_IRQHandler+0x8c>)
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	015b      	lsls	r3, r3, #5
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <HAL_EXTI_IRQHandler+0x90>)
 80013f2:	4694      	mov	ip, r2
 80013f4:	4463      	add	r3, ip
 80013f6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4798      	blx	r3
    }
  }
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b006      	add	sp, #24
 8001422:	bd80      	pop	{r7, pc}
 8001424:	4002180c 	.word	0x4002180c
 8001428:	40021810 	.word	0x40021810

0800142c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800143a:	e153      	b.n	80016e4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d100      	bne.n	8001454 <HAL_GPIO_Init+0x28>
 8001452:	e144      	b.n	80016de <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x38>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d125      	bne.n	80014b0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	58d3      	ldr	r3, [r2, r3]
 8001470:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2207      	movs	r2, #7
 8001476:	4013      	ands	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	43da      	mvns	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	220f      	movs	r2, #15
 800148e:	401a      	ands	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2107      	movs	r1, #7
 8001494:	400b      	ands	r3, r1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4313      	orrs	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	6979      	ldr	r1, [r7, #20]
 80014ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	409a      	lsls	r2, r3
 80014be:	0013      	movs	r3, r2
 80014c0:	43da      	mvns	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	401a      	ands	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	409a      	lsls	r2, r3
 80014d6:	0013      	movs	r3, r2
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4313      	orrs	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d00b      	beq.n	8001504 <HAL_GPIO_Init+0xd8>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d007      	beq.n	8001504 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b12      	cmp	r3, #18
 8001502:	d130      	bne.n	8001566 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	43da      	mvns	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	4013      	ands	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	4313      	orrs	r3, r2
 800152c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800153a:	2201      	movs	r2, #1
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	43da      	mvns	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	4013      	ands	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	2201      	movs	r2, #1
 8001552:	401a      	ands	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d017      	beq.n	800159e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	43da      	mvns	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	4013      	ands	r3, r2
 8001584:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	055b      	lsls	r3, r3, #21
 80015a6:	4013      	ands	r3, r2
 80015a8:	d100      	bne.n	80015ac <HAL_GPIO_Init+0x180>
 80015aa:	e098      	b.n	80016de <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80015ac:	4a53      	ldr	r2, [pc, #332]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3318      	adds	r3, #24
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	589b      	ldr	r3, [r3, r2]
 80015b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2203      	movs	r2, #3
 80015be:	4013      	ands	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	220f      	movs	r2, #15
 80015c4:	409a      	lsls	r2, r3
 80015c6:	0013      	movs	r3, r2
 80015c8:	43da      	mvns	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	4013      	ands	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	23a0      	movs	r3, #160	@ 0xa0
 80015d4:	05db      	lsls	r3, r3, #23
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x1e2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a48      	ldr	r2, [pc, #288]	@ (8001700 <HAL_GPIO_Init+0x2d4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x1de>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a47      	ldr	r2, [pc, #284]	@ (8001704 <HAL_GPIO_Init+0x2d8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x1da>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a46      	ldr	r2, [pc, #280]	@ (8001708 <HAL_GPIO_Init+0x2dc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x1d6>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a45      	ldr	r2, [pc, #276]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x1d2>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e008      	b.n	8001610 <HAL_GPIO_Init+0x1e4>
 80015fe:	2306      	movs	r3, #6
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x1e4>
 8001602:	2303      	movs	r3, #3
 8001604:	e004      	b.n	8001610 <HAL_GPIO_Init+0x1e4>
 8001606:	2302      	movs	r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x1e4>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x1e4>
 800160e:	2300      	movs	r3, #0
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	2103      	movs	r1, #3
 8001614:	400a      	ands	r2, r1
 8001616:	00d2      	lsls	r2, r2, #3
 8001618:	4093      	lsls	r3, r2
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001620:	4936      	ldr	r1, [pc, #216]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3318      	adds	r3, #24
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800162e:	4a33      	ldr	r2, [pc, #204]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	58d3      	ldr	r3, [r2, r3]
 8001634:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43da      	mvns	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	4013      	ands	r3, r2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001654:	4929      	ldr	r1, [pc, #164]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001656:	2280      	movs	r2, #128	@ 0x80
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800165c:	4a27      	ldr	r2, [pc, #156]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 800165e:	2384      	movs	r3, #132	@ 0x84
 8001660:	58d3      	ldr	r3, [r2, r3]
 8001662:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43da      	mvns	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	4013      	ands	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	2380      	movs	r3, #128	@ 0x80
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	4013      	ands	r3, r2
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001682:	491e      	ldr	r1, [pc, #120]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001684:	2284      	movs	r2, #132	@ 0x84
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43da      	mvns	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4013      	ands	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	035b      	lsls	r3, r3, #13
 80016a2:	4013      	ands	r3, r2
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43da      	mvns	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	4013      	ands	r3, r2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	3301      	adds	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	40da      	lsrs	r2, r3
 80016ec:	1e13      	subs	r3, r2, #0
 80016ee:	d000      	beq.n	80016f2 <HAL_GPIO_Init+0x2c6>
 80016f0:	e6a4      	b.n	800143c <HAL_GPIO_Init+0x10>
  }
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46c0      	nop			@ (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b006      	add	sp, #24
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021800 	.word	0x40021800
 8001700:	50000400 	.word	0x50000400
 8001704:	50000800 	.word	0x50000800
 8001708:	50000c00 	.word	0x50000c00
 800170c:	50001400 	.word	0x50001400

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	0008      	movs	r0, r1
 800171a:	0011      	movs	r1, r2
 800171c:	1cbb      	adds	r3, r7, #2
 800171e:	1c02      	adds	r2, r0, #0
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	1c7b      	adds	r3, r7, #1
 8001724:	1c0a      	adds	r2, r1, #0
 8001726:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001728:	1c7b      	adds	r3, r7, #1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001730:	1cbb      	adds	r3, r7, #2
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173a:	1cbb      	adds	r3, r7, #2
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e1d0      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x1e>
 8001768:	e069      	b.n	800183e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176a:	4bc8      	ldr	r3, [pc, #800]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2238      	movs	r2, #56	@ 0x38
 8001770:	4013      	ands	r3, r2
 8001772:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d105      	bne.n	8001786 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d15d      	bne.n	800183e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1bc      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	025b      	lsls	r3, r3, #9
 800178e:	429a      	cmp	r2, r3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_OscConfig+0x56>
 8001792:	4bbe      	ldr	r3, [pc, #760]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4bbd      	ldr	r3, [pc, #756]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001798:	2180      	movs	r1, #128	@ 0x80
 800179a:	0249      	lsls	r1, r1, #9
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e020      	b.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	23a0      	movs	r3, #160	@ 0xa0
 80017a8:	02db      	lsls	r3, r3, #11
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d10e      	bne.n	80017cc <HAL_RCC_OscConfig+0x80>
 80017ae:	4bb7      	ldr	r3, [pc, #732]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4bb6      	ldr	r3, [pc, #728]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	02c9      	lsls	r1, r1, #11
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4bb3      	ldr	r3, [pc, #716]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4bb2      	ldr	r3, [pc, #712]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017c2:	2180      	movs	r1, #128	@ 0x80
 80017c4:	0249      	lsls	r1, r1, #9
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017cc:	4baf      	ldr	r3, [pc, #700]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4bae      	ldr	r3, [pc, #696]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017d2:	49af      	ldr	r1, [pc, #700]	@ (8001a90 <HAL_RCC_OscConfig+0x344>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4bac      	ldr	r3, [pc, #688]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4bab      	ldr	r3, [pc, #684]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80017de:	49ad      	ldr	r1, [pc, #692]	@ (8001a94 <HAL_RCC_OscConfig+0x348>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d014      	beq.n	8001816 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fcd8 	bl	80011a0 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80017f6:	f7ff fcd3 	bl	80011a0 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	@ 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e17b      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001808:	4ba0      	ldr	r3, [pc, #640]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0xaa>
 8001814:	e013      	b.n	800183e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff fcc3 	bl	80011a0 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001820:	f7ff fcbe 	bl	80011a0 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	@ 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e166      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001832:	4b96      	ldr	r3, [pc, #600]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d100      	bne.n	800184a <HAL_RCC_OscConfig+0xfe>
 8001848:	e086      	b.n	8001958 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4b90      	ldr	r3, [pc, #576]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2238      	movs	r2, #56	@ 0x38
 8001850:	4013      	ands	r3, r2
 8001852:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d12f      	bne.n	80018ba <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e14c      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001866:	4b89      	ldr	r3, [pc, #548]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a8b      	ldr	r2, [pc, #556]	@ (8001a98 <HAL_RCC_OscConfig+0x34c>)
 800186c:	4013      	ands	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	021a      	lsls	r2, r3, #8
 8001876:	4b85      	ldr	r3, [pc, #532]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d112      	bne.n	80018a8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001882:	4b82      	ldr	r3, [pc, #520]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a85      	ldr	r2, [pc, #532]	@ (8001a9c <HAL_RCC_OscConfig+0x350>)
 8001888:	4013      	ands	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	4b7e      	ldr	r3, [pc, #504]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001896:	4b7d      	ldr	r3, [pc, #500]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0adb      	lsrs	r3, r3, #11
 800189c:	2207      	movs	r2, #7
 800189e:	4013      	ands	r3, r2
 80018a0:	4a7f      	ldr	r2, [pc, #508]	@ (8001aa0 <HAL_RCC_OscConfig+0x354>)
 80018a2:	40da      	lsrs	r2, r3
 80018a4:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa4 <HAL_RCC_OscConfig+0x358>)
 80018a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018a8:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa8 <HAL_RCC_OscConfig+0x35c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff f985 	bl	8000bbc <HAL_InitTick>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d050      	beq.n	8001958 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e122      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d030      	beq.n	8001924 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018c2:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a75      	ldr	r2, [pc, #468]	@ (8001a9c <HAL_RCC_OscConfig+0x350>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80018d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b6c      	ldr	r3, [pc, #432]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0049      	lsls	r1, r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc5c 	bl	80011a0 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fc57 	bl	80011a0 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0ff      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001900:	4b62      	ldr	r3, [pc, #392]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4013      	ands	r3, r2
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b5f      	ldr	r3, [pc, #380]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a61      	ldr	r2, [pc, #388]	@ (8001a98 <HAL_RCC_OscConfig+0x34c>)
 8001912:	4013      	ands	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	021a      	lsls	r2, r3, #8
 800191c:	4b5b      	ldr	r3, [pc, #364]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	e019      	b.n	8001958 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001924:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b58      	ldr	r3, [pc, #352]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 800192a:	4960      	ldr	r1, [pc, #384]	@ (8001aac <HAL_RCC_OscConfig+0x360>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fc36 	bl	80011a0 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800193a:	f7ff fc31 	bl	80011a0 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0d9      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800194c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4013      	ands	r3, r2
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2208      	movs	r2, #8
 800195e:	4013      	ands	r3, r2
 8001960:	d042      	beq.n	80019e8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001962:	4b4a      	ldr	r3, [pc, #296]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2238      	movs	r2, #56	@ 0x38
 8001968:	4013      	ands	r3, r2
 800196a:	2b18      	cmp	r3, #24
 800196c:	d105      	bne.n	800197a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d138      	bne.n	80019e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0c2      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001982:	4b42      	ldr	r3, [pc, #264]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001984:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001986:	4b41      	ldr	r3, [pc, #260]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001988:	2101      	movs	r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff fc07 	bl	80011a0 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001998:	f7ff fc02 	bl	80011a0 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0aa      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d0f1      	beq.n	8001998 <HAL_RCC_OscConfig+0x24c>
 80019b4:	e018      	b.n	80019e8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019b6:	4b35      	ldr	r3, [pc, #212]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80019b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80019bc:	2101      	movs	r1, #1
 80019be:	438a      	bics	r2, r1
 80019c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fbed 	bl	80011a0 <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fbe8 	bl	80011a0 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e090      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80019de:	4b2b      	ldr	r3, [pc, #172]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	d1f1      	bne.n	80019cc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2204      	movs	r2, #4
 80019ee:	4013      	ands	r3, r2
 80019f0:	d100      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2a8>
 80019f2:	e084      	b.n	8001afe <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f4:	230f      	movs	r3, #15
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80019fc:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2238      	movs	r2, #56	@ 0x38
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d000      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2c6>
 8001a10:	e075      	b.n	8001afe <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e074      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2e0>
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	430a      	orrs	r2, r1
 8001a28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a2a:	e01c      	b.n	8001a66 <HAL_RCC_OscConfig+0x31a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x302>
 8001a34:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0x31a>
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	438a      	bics	r2, r1
 8001a58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_RCC_OscConfig+0x340>)
 8001a60:	2104      	movs	r1, #4
 8001a62:	438a      	bics	r2, r1
 8001a64:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d028      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fb97 	bl	80011a0 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff fb92 	bl	80011a0 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <HAL_RCC_OscConfig+0x364>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d915      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e039      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	fffeffff 	.word	0xfffeffff
 8001a94:	fffbffff 	.word	0xfffbffff
 8001a98:	ffff80ff 	.word	0xffff80ff
 8001a9c:	ffffc7ff 	.word	0xffffc7ff
 8001aa0:	02dc6c00 	.word	0x02dc6c00
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	2000001c 	.word	0x2000001c
 8001aac:	fffffeff 	.word	0xfffffeff
 8001ab0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <HAL_RCC_OscConfig+0x3bc>)
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0dc      	beq.n	8001a78 <HAL_RCC_OscConfig+0x32c>
 8001abe:	e013      	b.n	8001ae8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb6e 	bl	80011a0 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fb69 	bl	80011a0 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <HAL_RCC_OscConfig+0x3c0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e010      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_RCC_OscConfig+0x3bc>)
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ae8:	230f      	movs	r3, #15
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d105      	bne.n	8001afe <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_RCC_OscConfig+0x3bc>)
 8001af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <HAL_RCC_OscConfig+0x3bc>)
 8001af8:	4905      	ldr	r1, [pc, #20]	@ (8001b10 <HAL_RCC_OscConfig+0x3c4>)
 8001afa:	400a      	ands	r2, r1
 8001afc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b006      	add	sp, #24
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	00001388 	.word	0x00001388
 8001b10:	efffffff 	.word	0xefffffff

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0df      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b71      	ldr	r3, [pc, #452]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d91e      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b48:	f7ff fb2a 	bl	80011a0 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff fb25 	bl	80011a0 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a65      	ldr	r2, [pc, #404]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1e0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0c0      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b66:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d017      	beq.n	8001bae <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b88:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a5b      	ldr	r2, [pc, #364]	@ (8001cfc <HAL_RCC_ClockConfig+0x1e8>)
 8001b8e:	401a      	ands	r2, r3
 8001b90:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001b92:	21b0      	movs	r1, #176	@ 0xb0
 8001b94:	0109      	lsls	r1, r1, #4
 8001b96:	430a      	orrs	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9a:	4b57      	ldr	r3, [pc, #348]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4a58      	ldr	r2, [pc, #352]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4b53      	ldr	r3, [pc, #332]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d04b      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	029b      	lsls	r3, r3, #10
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d11f      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e08b      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4013      	ands	r3, r2
 8001be2:	d113      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e07f      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001bf0:	4b41      	ldr	r3, [pc, #260]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d108      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e074      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e06d      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2207      	movs	r2, #7
 8001c12:	4393      	bics	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c20:	f7ff fabe 	bl	80011a0 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7ff fab9 	bl	80011a0 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1e0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e054      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2238      	movs	r2, #56	@ 0x38
 8001c44:	401a      	ands	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1ec      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2207      	movs	r2, #7
 8001c56:	4013      	ands	r3, r2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d21e      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2207      	movs	r2, #7
 8001c64:	4393      	bics	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c70:	f7ff fa96 	bl	80011a0 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7a:	f7ff fa91 	bl	80011a0 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1e0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e02c      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1dc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2207      	movs	r2, #7
 8001c94:	4013      	ands	r3, r2
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001cba:	f000 f82b 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cbe:	0001      	movs	r1, r0
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1e4>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f4>)
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cd0:	221f      	movs	r2, #31
 8001cd2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	40da      	lsrs	r2, r3
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f8>)
 8001cda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <HAL_RCC_ClockConfig+0x1fc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe ff6b 	bl	8000bbc <HAL_InitTick>
 8001ce6:	0003      	movs	r3, r0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b004      	add	sp, #16
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	00001388 	.word	0x00001388
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	ffff84ff 	.word	0xffff84ff
 8001d00:	fffff0ff 	.word	0xfffff0ff
 8001d04:	ffff8fff 	.word	0xffff8fff
 8001d08:	08006b64 	.word	0x08006b64
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	2000001c 	.word	0x2000001c

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2238      	movs	r2, #56	@ 0x38
 8001d20:	4013      	ands	r3, r2
 8001d22:	d10f      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0adb      	lsrs	r3, r3, #11
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2201      	movs	r2, #1
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
 8001d34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	4815      	ldr	r0, [pc, #84]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001d3a:	f7fe f9f7 	bl	800012c <__udivsi3>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	e01e      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2238      	movs	r2, #56	@ 0x38
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e015      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2238      	movs	r2, #56	@ 0x38
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d103      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	e00b      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2238      	movs	r2, #56	@ 0x38
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	d103      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d76:	23fa      	movs	r3, #250	@ 0xfa
 8001d78:	01db      	lsls	r3, r3, #7
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	e001      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001d82:	687b      	ldr	r3, [r7, #4]
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	02dc6c00 	.word	0x02dc6c00

08001d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d98:	f7ff ffbc 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8001da0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	220f      	movs	r2, #15
 8001da6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001da8:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <HAL_RCC_GetHCLKFreq+0x34>)
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dae:	221f      	movs	r2, #31
 8001db0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001db2:	000a      	movs	r2, r1
 8001db4:	40da      	lsrs	r2, r3
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_RCC_GetHCLKFreq+0x38>)
 8001db8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <HAL_RCC_GetHCLKFreq+0x38>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08006b64 	.word	0x08006b64
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001dd8:	0001      	movs	r1, r0
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0b1b      	lsrs	r3, r3, #12
 8001de0:	2207      	movs	r2, #7
 8001de2:	401a      	ands	r2, r3
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	58d3      	ldr	r3, [r2, r3]
 8001dea:	221f      	movs	r2, #31
 8001dec:	4013      	ands	r3, r2
 8001dee:	40d9      	lsrs	r1, r3
 8001df0:	000b      	movs	r3, r1
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	08006ba4 	.word	0x08006ba4

08001e00 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_RCC_GetClockConfig+0x54>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2207      	movs	r2, #7
 8001e16:	401a      	ands	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_CR_SYSDIV)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CR & RCC_CR_SYSDIV);
#else
  RCC_ClkInitStruct->SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
#endif /* RCC_CR_SYSDIV */

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e22:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_RCC_GetClockConfig+0x54>)
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	23f0      	movs	r3, #240	@ 0xf0
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001e30:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <HAL_RCC_GetClockConfig+0x54>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	23e0      	movs	r3, #224	@ 0xe0
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	401a      	ands	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_RCC_GetClockConfig+0x58>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2207      	movs	r2, #7
 8001e44:	401a      	ands	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	601a      	str	r2, [r3, #0]
}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e64:	2313      	movs	r3, #19
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2240      	movs	r2, #64	@ 0x40
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d100      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001e7e:	e079      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e80:	2011      	movs	r0, #17
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e88:	4b63      	ldr	r3, [pc, #396]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	4013      	ands	r3, r2
 8001e92:	d110      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b60      	ldr	r3, [pc, #384]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e98:	4b5f      	ldr	r3, [pc, #380]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	0549      	lsls	r1, r1, #21
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	055b      	lsls	r3, r3, #21
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	183b      	adds	r3, r7, r0
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001eb6:	4b58      	ldr	r3, [pc, #352]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eba:	23c0      	movs	r3, #192	@ 0xc0
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d019      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d014      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001ed2:	4b51      	ldr	r3, [pc, #324]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed6:	4a51      	ldr	r2, [pc, #324]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001edc:	4b4e      	ldr	r3, [pc, #312]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ede:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	0249      	lsls	r1, r1, #9
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eea:	4b4b      	ldr	r3, [pc, #300]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eee:	4b4a      	ldr	r3, [pc, #296]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ef0:	494b      	ldr	r1, [pc, #300]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001ef6:	4b48      	ldr	r3, [pc, #288]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d016      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff f94c 	bl	80011a0 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f0c:	e00c      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff f947 	bl	80011a0 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	4a42      	ldr	r2, [pc, #264]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d904      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001f1e:	2313      	movs	r3, #19
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	2203      	movs	r2, #3
 8001f24:	701a      	strb	r2, [r3, #0]
          break;
 8001f26:	e004      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f28:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d0ed      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001f32:	2313      	movs	r3, #19
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10a      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3c:	4b36      	ldr	r3, [pc, #216]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f40:	4a36      	ldr	r2, [pc, #216]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	4b33      	ldr	r3, [pc, #204]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f50:	e005      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f52:	2312      	movs	r3, #18
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2213      	movs	r2, #19
 8001f58:	18ba      	adds	r2, r7, r2
 8001f5a:	7812      	ldrb	r2, [r2, #0]
 8001f5c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f5e:	2311      	movs	r3, #17
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b2b      	ldr	r3, [pc, #172]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f6e:	492e      	ldr	r1, [pc, #184]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f7e:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f82:	2203      	movs	r2, #3
 8001f84:	4393      	bics	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	4a22      	ldr	r2, [pc, #136]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fba:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	0899      	lsrs	r1, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	4a15      	ldr	r2, [pc, #84]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	22e0      	movs	r2, #224	@ 0xe0
 8001ffa:	4393      	bics	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002008:	2312      	movs	r3, #18
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b006      	add	sp, #24
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	40021000 	.word	0x40021000
 800201c:	fffffcff 	.word	0xfffffcff
 8002020:	fffeffff 	.word	0xfffeffff
 8002024:	00001388 	.word	0x00001388
 8002028:	efffffff 	.word	0xefffffff
 800202c:	ffffcfff 	.word	0xffffcfff
 8002030:	ffff3fff 	.word	0xffff3fff

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e04a      	b.n	80020dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223d      	movs	r2, #61	@ 0x3d
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	223c      	movs	r2, #60	@ 0x3c
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f841 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	223d      	movs	r2, #61	@ 0x3d
 8002066:	2102      	movs	r1, #2
 8002068:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f000 fd31 	bl	8002adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2248      	movs	r2, #72	@ 0x48
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223e      	movs	r2, #62	@ 0x3e
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223f      	movs	r2, #63	@ 0x3f
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2240      	movs	r2, #64	@ 0x40
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2241      	movs	r2, #65	@ 0x41
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2242      	movs	r2, #66	@ 0x42
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2243      	movs	r2, #67	@ 0x43
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2244      	movs	r2, #68	@ 0x44
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2245      	movs	r2, #69	@ 0x45
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2246      	movs	r2, #70	@ 0x46
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2247      	movs	r2, #71	@ 0x47
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223d      	movs	r2, #61	@ 0x3d
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020ec:	46c0      	nop			@ (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	223d      	movs	r2, #61	@ 0x3d
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d001      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e037      	b.n	800217c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	223d      	movs	r2, #61	@ 0x3d
 8002110:	2102      	movs	r1, #2
 8002112:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a16      	ldr	r2, [pc, #88]	@ (8002184 <HAL_TIM_Base_Start_IT+0x90>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x44>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a15      	ldr	r2, [pc, #84]	@ (8002188 <HAL_TIM_Base_Start_IT+0x94>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d116      	bne.n	8002166 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a13      	ldr	r2, [pc, #76]	@ (800218c <HAL_TIM_Base_Start_IT+0x98>)
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b06      	cmp	r3, #6
 8002148:	d016      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x84>
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	429a      	cmp	r2, r3
 8002152:	d011      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002164:	e008      	b.n	8002178 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e000      	b.n	800217a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002178:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40000400 	.word	0x40000400
 800218c:	00010007 	.word	0x00010007

08002190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e04a      	b.n	8002238 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	223d      	movs	r2, #61	@ 0x3d
 80021a6:	5c9b      	ldrb	r3, [r3, r2]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d107      	bne.n	80021be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	223c      	movs	r2, #60	@ 0x3c
 80021b2:	2100      	movs	r1, #0
 80021b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7fe fc2d 	bl	8000a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	223d      	movs	r2, #61	@ 0x3d
 80021c2:	2102      	movs	r1, #2
 80021c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	0019      	movs	r1, r3
 80021d0:	0010      	movs	r0, r2
 80021d2:	f000 fc83 	bl	8002adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2248      	movs	r2, #72	@ 0x48
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	223e      	movs	r2, #62	@ 0x3e
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	223f      	movs	r2, #63	@ 0x3f
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2240      	movs	r2, #64	@ 0x40
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2241      	movs	r2, #65	@ 0x41
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2242      	movs	r2, #66	@ 0x42
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2243      	movs	r2, #67	@ 0x43
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2244      	movs	r2, #68	@ 0x44
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2245      	movs	r2, #69	@ 0x45
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2246      	movs	r2, #70	@ 0x46
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2247      	movs	r2, #71	@ 0x47
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	223d      	movs	r2, #61	@ 0x3d
 8002232:	2101      	movs	r1, #1
 8002234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e04a      	b.n	80022e8 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	223d      	movs	r2, #61	@ 0x3d
 8002256:	5c9b      	ldrb	r3, [r3, r2]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d107      	bne.n	800226e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	223c      	movs	r2, #60	@ 0x3c
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f7fe fb8b 	bl	8000984 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	223d      	movs	r2, #61	@ 0x3d
 8002272:	2102      	movs	r1, #2
 8002274:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	0019      	movs	r1, r3
 8002280:	0010      	movs	r0, r2
 8002282:	f000 fc2b 	bl	8002adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2248      	movs	r2, #72	@ 0x48
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223e      	movs	r2, #62	@ 0x3e
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223f      	movs	r2, #63	@ 0x3f
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2240      	movs	r2, #64	@ 0x40
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2241      	movs	r2, #65	@ 0x41
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2242      	movs	r2, #66	@ 0x42
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2243      	movs	r2, #67	@ 0x43
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2244      	movs	r2, #68	@ 0x44
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2245      	movs	r2, #69	@ 0x45
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2246      	movs	r2, #70	@ 0x46
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2247      	movs	r2, #71	@ 0x47
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	223d      	movs	r2, #61	@ 0x3d
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	230f      	movs	r3, #15
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <HAL_TIM_IC_Start_IT+0x22>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223e      	movs	r2, #62	@ 0x3e
 800230c:	5c9b      	ldrb	r3, [r3, r2]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	e023      	b.n	800235a <HAL_TIM_IC_Start_IT+0x6a>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b04      	cmp	r3, #4
 8002316:	d104      	bne.n	8002322 <HAL_TIM_IC_Start_IT+0x32>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	223f      	movs	r2, #63	@ 0x3f
 800231c:	5c9b      	ldrb	r3, [r3, r2]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e01b      	b.n	800235a <HAL_TIM_IC_Start_IT+0x6a>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d104      	bne.n	8002332 <HAL_TIM_IC_Start_IT+0x42>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2240      	movs	r2, #64	@ 0x40
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	e013      	b.n	800235a <HAL_TIM_IC_Start_IT+0x6a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d104      	bne.n	8002342 <HAL_TIM_IC_Start_IT+0x52>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2241      	movs	r2, #65	@ 0x41
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	e00b      	b.n	800235a <HAL_TIM_IC_Start_IT+0x6a>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b10      	cmp	r3, #16
 8002346:	d104      	bne.n	8002352 <HAL_TIM_IC_Start_IT+0x62>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2242      	movs	r2, #66	@ 0x42
 800234c:	5c9b      	ldrb	r3, [r3, r2]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e003      	b.n	800235a <HAL_TIM_IC_Start_IT+0x6a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2243      	movs	r2, #67	@ 0x43
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	220e      	movs	r2, #14
 800235c:	18ba      	adds	r2, r7, r2
 800235e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_TIM_IC_Start_IT+0x80>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2244      	movs	r2, #68	@ 0x44
 800236a:	5c9b      	ldrb	r3, [r3, r2]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e013      	b.n	8002398 <HAL_TIM_IC_Start_IT+0xa8>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b04      	cmp	r3, #4
 8002374:	d104      	bne.n	8002380 <HAL_TIM_IC_Start_IT+0x90>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2245      	movs	r2, #69	@ 0x45
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e00b      	b.n	8002398 <HAL_TIM_IC_Start_IT+0xa8>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b08      	cmp	r3, #8
 8002384:	d104      	bne.n	8002390 <HAL_TIM_IC_Start_IT+0xa0>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2246      	movs	r2, #70	@ 0x46
 800238a:	5c9b      	ldrb	r3, [r3, r2]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e003      	b.n	8002398 <HAL_TIM_IC_Start_IT+0xa8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2247      	movs	r2, #71	@ 0x47
 8002394:	5c9b      	ldrb	r3, [r3, r2]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	210d      	movs	r1, #13
 800239a:	187a      	adds	r2, r7, r1
 800239c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800239e:	230e      	movs	r3, #14
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d103      	bne.n	80023b0 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0bd      	b.n	8002530 <HAL_TIM_IC_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <HAL_TIM_IC_Start_IT+0xd4>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223e      	movs	r2, #62	@ 0x3e
 80023be:	2102      	movs	r1, #2
 80023c0:	5499      	strb	r1, [r3, r2]
 80023c2:	e023      	b.n	800240c <HAL_TIM_IC_Start_IT+0x11c>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d104      	bne.n	80023d4 <HAL_TIM_IC_Start_IT+0xe4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223f      	movs	r2, #63	@ 0x3f
 80023ce:	2102      	movs	r1, #2
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	e01b      	b.n	800240c <HAL_TIM_IC_Start_IT+0x11c>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d104      	bne.n	80023e4 <HAL_TIM_IC_Start_IT+0xf4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2240      	movs	r2, #64	@ 0x40
 80023de:	2102      	movs	r1, #2
 80023e0:	5499      	strb	r1, [r3, r2]
 80023e2:	e013      	b.n	800240c <HAL_TIM_IC_Start_IT+0x11c>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d104      	bne.n	80023f4 <HAL_TIM_IC_Start_IT+0x104>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2241      	movs	r2, #65	@ 0x41
 80023ee:	2102      	movs	r1, #2
 80023f0:	5499      	strb	r1, [r3, r2]
 80023f2:	e00b      	b.n	800240c <HAL_TIM_IC_Start_IT+0x11c>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d104      	bne.n	8002404 <HAL_TIM_IC_Start_IT+0x114>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2242      	movs	r2, #66	@ 0x42
 80023fe:	2102      	movs	r1, #2
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	e003      	b.n	800240c <HAL_TIM_IC_Start_IT+0x11c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2243      	movs	r2, #67	@ 0x43
 8002408:	2102      	movs	r1, #2
 800240a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <HAL_TIM_IC_Start_IT+0x12c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2244      	movs	r2, #68	@ 0x44
 8002416:	2102      	movs	r1, #2
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	e013      	b.n	8002444 <HAL_TIM_IC_Start_IT+0x154>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d104      	bne.n	800242c <HAL_TIM_IC_Start_IT+0x13c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2245      	movs	r2, #69	@ 0x45
 8002426:	2102      	movs	r1, #2
 8002428:	5499      	strb	r1, [r3, r2]
 800242a:	e00b      	b.n	8002444 <HAL_TIM_IC_Start_IT+0x154>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b08      	cmp	r3, #8
 8002430:	d104      	bne.n	800243c <HAL_TIM_IC_Start_IT+0x14c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2246      	movs	r2, #70	@ 0x46
 8002436:	2102      	movs	r1, #2
 8002438:	5499      	strb	r1, [r3, r2]
 800243a:	e003      	b.n	8002444 <HAL_TIM_IC_Start_IT+0x154>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2247      	movs	r2, #71	@ 0x47
 8002440:	2102      	movs	r1, #2
 8002442:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d02a      	beq.n	80024a0 <HAL_TIM_IC_Start_IT+0x1b0>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d830      	bhi.n	80024b2 <HAL_TIM_IC_Start_IT+0x1c2>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d01b      	beq.n	800248e <HAL_TIM_IC_Start_IT+0x19e>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d82a      	bhi.n	80024b2 <HAL_TIM_IC_Start_IT+0x1c2>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IC_Start_IT+0x17a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d009      	beq.n	800247c <HAL_TIM_IC_Start_IT+0x18c>
 8002468:	e023      	b.n	80024b2 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2102      	movs	r1, #2
 8002476:	430a      	orrs	r2, r1
 8002478:	60da      	str	r2, [r3, #12]
      break;
 800247a:	e01f      	b.n	80024bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2104      	movs	r1, #4
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]
      break;
 800248c:	e016      	b.n	80024bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2108      	movs	r1, #8
 800249a:	430a      	orrs	r2, r1
 800249c:	60da      	str	r2, [r3, #12]
      break;
 800249e:	e00d      	b.n	80024bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2110      	movs	r1, #16
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]
      break;
 80024b0:	e004      	b.n	80024bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 80024b2:	230f      	movs	r3, #15
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
      break;
 80024ba:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80024bc:	230f      	movs	r3, #15
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d131      	bne.n	800252a <HAL_TIM_IC_Start_IT+0x23a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6839      	ldr	r1, [r7, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 ff2c 	bl	800332c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <HAL_TIM_IC_Start_IT+0x248>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_TIM_IC_Start_IT+0x1f8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a16      	ldr	r2, [pc, #88]	@ (800253c <HAL_TIM_IC_Start_IT+0x24c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d116      	bne.n	8002516 <HAL_TIM_IC_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <HAL_TIM_IC_Start_IT+0x250>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d016      	beq.n	8002528 <HAL_TIM_IC_Start_IT+0x238>
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	429a      	cmp	r2, r3
 8002502:	d011      	beq.n	8002528 <HAL_TIM_IC_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002514:	e008      	b.n	8002528 <HAL_TIM_IC_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e000      	b.n	800252a <HAL_TIM_IC_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002528:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800252a:	230f      	movs	r3, #15
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b004      	add	sp, #16
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	00010007 	.word	0x00010007

08002544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d021      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2202      	movs	r2, #2
 8002568:	4013      	ands	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2203      	movs	r2, #3
 8002572:	4252      	negs	r2, r2
 8002574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2203      	movs	r2, #3
 8002584:	4013      	ands	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fa8e 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 8002590:	e007      	b.n	80025a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 fa81 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fa8d 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2204      	movs	r2, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	d022      	beq.n	80025f6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2204      	movs	r2, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d01e      	beq.n	80025f6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2205      	movs	r2, #5
 80025be:	4252      	negs	r2, r2
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	23c0      	movs	r3, #192	@ 0xc0
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4013      	ands	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fa67 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 80025de:	e007      	b.n	80025f0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fa5a 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fa66 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2208      	movs	r2, #8
 80025fa:	4013      	ands	r3, r2
 80025fc:	d021      	beq.n	8002642 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2208      	movs	r2, #8
 8002602:	4013      	ands	r3, r2
 8002604:	d01d      	beq.n	8002642 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2209      	movs	r2, #9
 800260c:	4252      	negs	r2, r2
 800260e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2204      	movs	r2, #4
 8002614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2203      	movs	r2, #3
 800261e:	4013      	ands	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fa41 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 800262a:	e007      	b.n	800263c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 fa34 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 fa40 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2210      	movs	r2, #16
 800264e:	4013      	ands	r3, r2
 8002650:	d01e      	beq.n	8002690 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2211      	movs	r2, #17
 8002658:	4252      	negs	r2, r2
 800265a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2208      	movs	r2, #8
 8002660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	23c0      	movs	r3, #192	@ 0xc0
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4013      	ands	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fa1a 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 8002678:	e007      	b.n	800268a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 fa0d 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fa19 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d00c      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	4013      	ands	r3, r2
 800269e:	d008      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2202      	movs	r2, #2
 80026a6:	4252      	negs	r2, r2
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe f927 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2280      	movs	r2, #128	@ 0x80
 80026b6:	4013      	ands	r3, r2
 80026b8:	d104      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	019b      	lsls	r3, r3, #6
 80026c0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026c2:	d00b      	beq.n	80026dc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	4013      	ands	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_TIM_IRQHandler+0x208>)
 80026d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 feb6 	bl	8003448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	d00b      	beq.n	80026fe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2280      	movs	r2, #128	@ 0x80
 80026ea:	4013      	ands	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <HAL_TIM_IRQHandler+0x20c>)
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 fead 	bl	8003458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2240      	movs	r2, #64	@ 0x40
 8002702:	4013      	ands	r3, r2
 8002704:	d00c      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2240      	movs	r2, #64	@ 0x40
 800270a:	4013      	ands	r3, r2
 800270c:	d008      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2241      	movs	r2, #65	@ 0x41
 8002714:	4252      	negs	r2, r2
 8002716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f9d6 	bl	8002acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2220      	movs	r2, #32
 8002724:	4013      	ands	r3, r2
 8002726:	d00c      	beq.n	8002742 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	4013      	ands	r3, r2
 800272e:	d008      	beq.n	8002742 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2221      	movs	r2, #33	@ 0x21
 8002736:	4252      	negs	r2, r2
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fe7b 	bl	8003438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	ffffdf7f 	.word	0xffffdf7f
 8002750:	fffffeff 	.word	0xfffffeff

08002754 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2317      	movs	r3, #23
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	223c      	movs	r2, #60	@ 0x3c
 800276c:	5c9b      	ldrb	r3, [r3, r2]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_TIM_IC_ConfigChannel+0x22>
 8002772:	2302      	movs	r3, #2
 8002774:	e08c      	b.n	8002890 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	223c      	movs	r2, #60	@ 0x3c
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002794:	f000 fcb0 	bl	80030f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	210c      	movs	r1, #12
 80027a4:	438a      	bics	r2, r1
 80027a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6999      	ldr	r1, [r3, #24]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	e062      	b.n	8002882 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d11c      	bne.n	80027fc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80027d2:	f000 fce3 	bl	800319c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	492d      	ldr	r1, [pc, #180]	@ (8002898 <HAL_TIM_IC_ConfigChannel+0x144>)
 80027e2:	400a      	ands	r2, r1
 80027e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6999      	ldr	r1, [r3, #24]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	021a      	lsls	r2, r3, #8
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	619a      	str	r2, [r3, #24]
 80027fa:	e042      	b.n	8002882 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11b      	bne.n	800283a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002812:	f000 fd05 	bl	8003220 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	210c      	movs	r1, #12
 8002822:	438a      	bics	r2, r1
 8002824:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69d9      	ldr	r1, [r3, #28]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
 8002838:	e023      	b.n	8002882 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d11c      	bne.n	800287a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002850:	f000 fd26 	bl	80032a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	490e      	ldr	r1, [pc, #56]	@ (8002898 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002860:	400a      	ands	r2, r1
 8002862:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69d9      	ldr	r1, [r3, #28]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	61da      	str	r2, [r3, #28]
 8002878:	e003      	b.n	8002882 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800287a:	2317      	movs	r3, #23
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	223c      	movs	r2, #60	@ 0x3c
 8002886:	2100      	movs	r1, #0
 8002888:	5499      	strb	r1, [r3, r2]

  return status;
 800288a:	2317      	movs	r3, #23
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b006      	add	sp, #24
 8002896:	bd80      	pop	{r7, pc}
 8002898:	fffff3ff 	.word	0xfffff3ff

0800289c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a8:	2317      	movs	r3, #23
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	223c      	movs	r2, #60	@ 0x3c
 80028b4:	5c9b      	ldrb	r3, [r3, r2]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_TIM_PWM_ConfigChannel+0x22>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0e5      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	223c      	movs	r2, #60	@ 0x3c
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b14      	cmp	r3, #20
 80028ca:	d900      	bls.n	80028ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80028cc:	e0d1      	b.n	8002a72 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	4b70      	ldr	r3, [pc, #448]	@ (8002a94 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80028d4:	18d3      	adds	r3, r2, r3
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f96c 	bl	8002bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2108      	movs	r1, #8
 80028f4:	430a      	orrs	r2, r1
 80028f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2104      	movs	r1, #4
 8002904:	438a      	bics	r2, r1
 8002906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6999      	ldr	r1, [r3, #24]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	619a      	str	r2, [r3, #24]
      break;
 800291a:	e0af      	b.n	8002a7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	0011      	movs	r1, r2
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f9cb 	bl	8002cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2180      	movs	r1, #128	@ 0x80
 8002936:	0109      	lsls	r1, r1, #4
 8002938:	430a      	orrs	r2, r1
 800293a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4954      	ldr	r1, [pc, #336]	@ (8002a98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002948:	400a      	ands	r2, r1
 800294a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6999      	ldr	r1, [r3, #24]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	021a      	lsls	r2, r3, #8
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	619a      	str	r2, [r3, #24]
      break;
 8002960:	e08c      	b.n	8002a7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fa26 	bl	8002dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2108      	movs	r1, #8
 800297c:	430a      	orrs	r2, r1
 800297e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2104      	movs	r1, #4
 800298c:	438a      	bics	r2, r1
 800298e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69d9      	ldr	r1, [r3, #28]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	61da      	str	r2, [r3, #28]
      break;
 80029a2:	e06b      	b.n	8002a7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	0011      	movs	r1, r2
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 fa87 	bl	8002ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0109      	lsls	r1, r1, #4
 80029c0:	430a      	orrs	r2, r1
 80029c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4932      	ldr	r1, [pc, #200]	@ (8002a98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69d9      	ldr	r1, [r3, #28]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	021a      	lsls	r2, r3, #8
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	61da      	str	r2, [r3, #28]
      break;
 80029e8:	e048      	b.n	8002a7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fac8 	bl	8002f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2108      	movs	r1, #8
 8002a04:	430a      	orrs	r2, r1
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2104      	movs	r1, #4
 8002a14:	438a      	bics	r2, r1
 8002a16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002a2a:	e027      	b.n	8002a7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	0011      	movs	r1, r2
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 fb01 	bl	800303c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2180      	movs	r1, #128	@ 0x80
 8002a46:	0109      	lsls	r1, r1, #4
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4910      	ldr	r1, [pc, #64]	@ (8002a98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002a70:	e004      	b.n	8002a7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002a72:	2317      	movs	r3, #23
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
      break;
 8002a7a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	223c      	movs	r2, #60	@ 0x3c
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

  return status;
 8002a84:	2317      	movs	r3, #23
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	781b      	ldrb	r3, [r3, #0]
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b006      	add	sp, #24
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	08006bcc 	.word	0x08006bcc
 8002a98:	fffffbff 	.word	0xfffffbff

08002a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a2e      	ldr	r2, [pc, #184]	@ (8002ba8 <TIM_Base_SetConfig+0xcc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_Base_SetConfig+0x20>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a2d      	ldr	r2, [pc, #180]	@ (8002bac <TIM_Base_SetConfig+0xd0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d108      	bne.n	8002b0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2270      	movs	r2, #112	@ 0x70
 8002b00:	4393      	bics	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a25      	ldr	r2, [pc, #148]	@ (8002ba8 <TIM_Base_SetConfig+0xcc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00f      	beq.n	8002b36 <TIM_Base_SetConfig+0x5a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a24      	ldr	r2, [pc, #144]	@ (8002bac <TIM_Base_SetConfig+0xd0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_Base_SetConfig+0x5a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a23      	ldr	r2, [pc, #140]	@ (8002bb0 <TIM_Base_SetConfig+0xd4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x5a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a22      	ldr	r2, [pc, #136]	@ (8002bb4 <TIM_Base_SetConfig+0xd8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x5a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a21      	ldr	r2, [pc, #132]	@ (8002bb8 <TIM_Base_SetConfig+0xdc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a20      	ldr	r2, [pc, #128]	@ (8002bbc <TIM_Base_SetConfig+0xe0>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	001a      	movs	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <TIM_Base_SetConfig+0xcc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d007      	beq.n	8002b80 <TIM_Base_SetConfig+0xa4>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <TIM_Base_SetConfig+0xd8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <TIM_Base_SetConfig+0xa4>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <TIM_Base_SetConfig+0xdc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d103      	bne.n	8002b88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]
}
 8002ba0:	46c0      	nop			@ (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40002000 	.word	0x40002000
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800
 8002bbc:	fffffcff 	.word	0xfffffcff

08002bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	001a      	movs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca8 <TIM_OC1_SetConfig+0xe8>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4393      	bics	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2202      	movs	r2, #2
 8002c08:	4393      	bics	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a24      	ldr	r2, [pc, #144]	@ (8002cac <TIM_OC1_SetConfig+0xec>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <TIM_OC1_SetConfig+0x6e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a23      	ldr	r2, [pc, #140]	@ (8002cb0 <TIM_OC1_SetConfig+0xf0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_OC1_SetConfig+0x6e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a22      	ldr	r2, [pc, #136]	@ (8002cb4 <TIM_OC1_SetConfig+0xf4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10c      	bne.n	8002c48 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2208      	movs	r2, #8
 8002c32:	4393      	bics	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2204      	movs	r2, #4
 8002c44:	4393      	bics	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <TIM_OC1_SetConfig+0xec>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_OC1_SetConfig+0xa0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <TIM_OC1_SetConfig+0xf0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_OC1_SetConfig+0xa0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	@ (8002cb4 <TIM_OC1_SetConfig+0xf4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4a15      	ldr	r2, [pc, #84]	@ (8002cb8 <TIM_OC1_SetConfig+0xf8>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <TIM_OC1_SetConfig+0xfc>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b006      	add	sp, #24
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	fffeff8f 	.word	0xfffeff8f
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800
 8002cb8:	fffffeff 	.word	0xfffffeff
 8002cbc:	fffffdff 	.word	0xfffffdff

08002cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	001a      	movs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	@ (8002da0 <TIM_OC2_SetConfig+0xe0>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002da4 <TIM_OC2_SetConfig+0xe4>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	4393      	bics	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <TIM_OC2_SetConfig+0xe8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10d      	bne.n	8002d3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2280      	movs	r2, #128	@ 0x80
 8002d26:	4393      	bics	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2240      	movs	r2, #64	@ 0x40
 8002d3a:	4393      	bics	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <TIM_OC2_SetConfig+0xe8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <TIM_OC2_SetConfig+0x96>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <TIM_OC2_SetConfig+0xec>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_OC2_SetConfig+0x96>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <TIM_OC2_SetConfig+0xf0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d113      	bne.n	8002d7e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4a16      	ldr	r2, [pc, #88]	@ (8002db4 <TIM_OC2_SetConfig+0xf4>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4a15      	ldr	r2, [pc, #84]	@ (8002db8 <TIM_OC2_SetConfig+0xf8>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	621a      	str	r2, [r3, #32]
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b006      	add	sp, #24
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	feff8fff 	.word	0xfeff8fff
 8002da4:	fffffcff 	.word	0xfffffcff
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40014400 	.word	0x40014400
 8002db0:	40014800 	.word	0x40014800
 8002db4:	fffffbff 	.word	0xfffffbff
 8002db8:	fffff7ff 	.word	0xfffff7ff

08002dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a31      	ldr	r2, [pc, #196]	@ (8002e98 <TIM_OC3_SetConfig+0xdc>)
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e9c <TIM_OC3_SetConfig+0xe0>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2203      	movs	r2, #3
 8002df0:	4393      	bics	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	4a27      	ldr	r2, [pc, #156]	@ (8002ea0 <TIM_OC3_SetConfig+0xe4>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <TIM_OC3_SetConfig+0xe8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10d      	bne.n	8002e36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	@ (8002ea8 <TIM_OC3_SetConfig+0xec>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	@ (8002eac <TIM_OC3_SetConfig+0xf0>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea4 <TIM_OC3_SetConfig+0xe8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <TIM_OC3_SetConfig+0x92>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <TIM_OC3_SetConfig+0xf4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d003      	beq.n	8002e4e <TIM_OC3_SetConfig+0x92>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb4 <TIM_OC3_SetConfig+0xf8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d113      	bne.n	8002e76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4a19      	ldr	r2, [pc, #100]	@ (8002eb8 <TIM_OC3_SetConfig+0xfc>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4a18      	ldr	r2, [pc, #96]	@ (8002ebc <TIM_OC3_SetConfig+0x100>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	621a      	str	r2, [r3, #32]
}
 8002e90:	46c0      	nop			@ (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b006      	add	sp, #24
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	fffffeff 	.word	0xfffffeff
 8002e9c:	fffeff8f 	.word	0xfffeff8f
 8002ea0:	fffffdff 	.word	0xfffffdff
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	fffff7ff 	.word	0xfffff7ff
 8002eac:	fffffbff 	.word	0xfffffbff
 8002eb0:	40014400 	.word	0x40014400
 8002eb4:	40014800 	.word	0x40014800
 8002eb8:	ffffefff 	.word	0xffffefff
 8002ebc:	ffffdfff 	.word	0xffffdfff

08002ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a24      	ldr	r2, [pc, #144]	@ (8002f68 <TIM_OC4_SetConfig+0xa8>)
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a20      	ldr	r2, [pc, #128]	@ (8002f6c <TIM_OC4_SetConfig+0xac>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f70 <TIM_OC4_SetConfig+0xb0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4a1b      	ldr	r2, [pc, #108]	@ (8002f74 <TIM_OC4_SetConfig+0xb4>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	031b      	lsls	r3, r3, #12
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	@ (8002f78 <TIM_OC4_SetConfig+0xb8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <TIM_OC4_SetConfig+0x70>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <TIM_OC4_SetConfig+0xbc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_OC4_SetConfig+0x70>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a15      	ldr	r2, [pc, #84]	@ (8002f80 <TIM_OC4_SetConfig+0xc0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d109      	bne.n	8002f44 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4a14      	ldr	r2, [pc, #80]	@ (8002f84 <TIM_OC4_SetConfig+0xc4>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b006      	add	sp, #24
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	ffffefff 	.word	0xffffefff
 8002f6c:	feff8fff 	.word	0xfeff8fff
 8002f70:	fffffcff 	.word	0xfffffcff
 8002f74:	ffffdfff 	.word	0xffffdfff
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40014400 	.word	0x40014400
 8002f80:	40014800 	.word	0x40014800
 8002f84:	ffffbfff 	.word	0xffffbfff

08002f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	@ (8003024 <TIM_OC5_SetConfig+0x9c>)
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <TIM_OC5_SetConfig+0xa0>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <TIM_OC5_SetConfig+0xa4>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	@ (8003030 <TIM_OC5_SetConfig+0xa8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_OC5_SetConfig+0x66>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <TIM_OC5_SetConfig+0xac>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_OC5_SetConfig+0x66>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a13      	ldr	r2, [pc, #76]	@ (8003038 <TIM_OC5_SetConfig+0xb0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d109      	bne.n	8003002 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8003024 <TIM_OC5_SetConfig+0x9c>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b006      	add	sp, #24
 8003022:	bd80      	pop	{r7, pc}
 8003024:	fffeffff 	.word	0xfffeffff
 8003028:	fffeff8f 	.word	0xfffeff8f
 800302c:	fffdffff 	.word	0xfffdffff
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800

0800303c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4a22      	ldr	r2, [pc, #136]	@ (80030dc <TIM_OC6_SetConfig+0xa0>)
 8003052:	401a      	ands	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <TIM_OC6_SetConfig+0xa4>)
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4a1a      	ldr	r2, [pc, #104]	@ (80030e4 <TIM_OC6_SetConfig+0xa8>)
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	051b      	lsls	r3, r3, #20
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <TIM_OC6_SetConfig+0xac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_OC6_SetConfig+0x68>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <TIM_OC6_SetConfig+0xb0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC6_SetConfig+0x68>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <TIM_OC6_SetConfig+0xb4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d109      	bne.n	80030b8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <TIM_OC6_SetConfig+0xb8>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	029b      	lsls	r3, r3, #10
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b006      	add	sp, #24
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	ffefffff 	.word	0xffefffff
 80030e0:	feff8fff 	.word	0xfeff8fff
 80030e4:	ffdfffff 	.word	0xffdfffff
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40014400 	.word	0x40014400
 80030f0:	40014800 	.word	0x40014800
 80030f4:	fffbffff 	.word	0xfffbffff

080030f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	2201      	movs	r2, #1
 8003112:	4393      	bics	r3, r2
 8003114:	001a      	movs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <TIM_TI1_SetConfig+0x9c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_TI1_SetConfig+0x38>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a1b      	ldr	r2, [pc, #108]	@ (8003198 <TIM_TI1_SetConfig+0xa0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <TIM_TI1_SetConfig+0x3c>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <TIM_TI1_SetConfig+0x3e>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2203      	movs	r2, #3
 800313e:	4393      	bics	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e003      	b.n	8003154 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2201      	movs	r2, #1
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	22f0      	movs	r2, #240	@ 0xf0
 8003158:	4393      	bics	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	22ff      	movs	r2, #255	@ 0xff
 8003162:	4013      	ands	r3, r2
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	220a      	movs	r2, #10
 800316e:	4393      	bics	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	220a      	movs	r2, #10
 8003176:	4013      	ands	r3, r2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b006      	add	sp, #24
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400

0800319c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2210      	movs	r2, #16
 80031b6:	4393      	bics	r3, r2
 80031b8:	001a      	movs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <TIM_TI2_SetConfig+0x7c>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4a10      	ldr	r2, [pc, #64]	@ (800321c <TIM_TI2_SetConfig+0x80>)
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	031b      	lsls	r3, r3, #12
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	22a0      	movs	r2, #160	@ 0xa0
 80031f0:	4393      	bics	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	22a0      	movs	r2, #160	@ 0xa0
 80031fa:	4013      	ands	r3, r2
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b006      	add	sp, #24
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	fffffcff 	.word	0xfffffcff
 800321c:	ffff0fff 	.word	0xffff0fff

08003220 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <TIM_TI3_SetConfig+0x78>)
 800323a:	401a      	ands	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2203      	movs	r2, #3
 800324a:	4393      	bics	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	22f0      	movs	r2, #240	@ 0xf0
 800325a:	4393      	bics	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	22ff      	movs	r2, #255	@ 0xff
 8003264:	4013      	ands	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <TIM_TI3_SetConfig+0x7c>)
 8003270:	4013      	ands	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	23a0      	movs	r3, #160	@ 0xa0
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4013      	ands	r3, r2
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	621a      	str	r2, [r3, #32]
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b006      	add	sp, #24
 8003296:	bd80      	pop	{r7, pc}
 8003298:	fffffeff 	.word	0xfffffeff
 800329c:	fffff5ff 	.word	0xfffff5ff

080032a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a18      	ldr	r2, [pc, #96]	@ (800331c <TIM_TI4_SetConfig+0x7c>)
 80032ba:	401a      	ands	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4a15      	ldr	r2, [pc, #84]	@ (8003320 <TIM_TI4_SetConfig+0x80>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <TIM_TI4_SetConfig+0x84>)
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	031b      	lsls	r3, r3, #12
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <TIM_TI4_SetConfig+0x88>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	031a      	lsls	r2, r3, #12
 80032fa:	23a0      	movs	r3, #160	@ 0xa0
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	4013      	ands	r3, r2
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	ffffefff 	.word	0xffffefff
 8003320:	fffffcff 	.word	0xfffffcff
 8003324:	ffff0fff 	.word	0xffff0fff
 8003328:	ffff5fff 	.word	0xffff5fff

0800332c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	221f      	movs	r2, #31
 800333c:	4013      	ands	r3, r2
 800333e:	2201      	movs	r2, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	0013      	movs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	43d2      	mvns	r2, r2
 800334e:	401a      	ands	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1a      	ldr	r2, [r3, #32]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	211f      	movs	r1, #31
 800335c:	400b      	ands	r3, r1
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4099      	lsls	r1, r3
 8003362:	000b      	movs	r3, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	b006      	add	sp, #24
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	223c      	movs	r2, #60	@ 0x3c
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003388:	2302      	movs	r3, #2
 800338a:	e04a      	b.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	223c      	movs	r2, #60	@ 0x3c
 8003390:	2101      	movs	r1, #1
 8003392:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	223d      	movs	r2, #61	@ 0x3d
 8003398:	2102      	movs	r1, #2
 800339a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1e      	ldr	r2, [pc, #120]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2270      	movs	r2, #112	@ 0x70
 80033cc:	4393      	bics	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a11      	ldr	r2, [pc, #68]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a10      	ldr	r2, [pc, #64]	@ (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10c      	bne.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	4393      	bics	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4313      	orrs	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	223d      	movs	r2, #61	@ 0x3d
 8003414:	2101      	movs	r1, #1
 8003416:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	223c      	movs	r2, #60	@ 0x3c
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	40012c00 	.word	0x40012c00
 8003430:	ff0fffff 	.word	0xff0fffff
 8003434:	40000400 	.word	0x40000400

08003438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e046      	b.n	8003508 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2288      	movs	r2, #136	@ 0x88
 800347e:	589b      	ldr	r3, [r3, r2]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2284      	movs	r2, #132	@ 0x84
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd fb1c 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2288      	movs	r2, #136	@ 0x88
 8003498:	2124      	movs	r1, #36	@ 0x24
 800349a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	438a      	bics	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 fa4e 	bl	8003958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 f8cc 	bl	800365c <UART_SetConfig>
 80034c4:	0003      	movs	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e01c      	b.n	8003508 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	490d      	ldr	r1, [pc, #52]	@ (8003510 <HAL_UART_Init+0xa8>)
 80034da:	400a      	ands	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	212a      	movs	r1, #42	@ 0x2a
 80034ea:	438a      	bics	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f000 fadd 	bl	8003ac0 <UART_CheckIdleState>
 8003506:	0003      	movs	r3, r0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}
 8003510:	ffffb7ff 	.word	0xffffb7ff

08003514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	1dbb      	adds	r3, r7, #6
 8003522:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2288      	movs	r2, #136	@ 0x88
 8003528:	589b      	ldr	r3, [r3, r2]
 800352a:	2b20      	cmp	r3, #32
 800352c:	d000      	beq.n	8003530 <HAL_UART_Transmit+0x1c>
 800352e:	e090      	b.n	8003652 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_UART_Transmit+0x2a>
 8003536:	1dbb      	adds	r3, r7, #6
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e088      	b.n	8003654 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	015b      	lsls	r3, r3, #5
 800354a:	429a      	cmp	r2, r3
 800354c:	d109      	bne.n	8003562 <HAL_UART_Transmit+0x4e>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d001      	beq.n	8003562 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e078      	b.n	8003654 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2290      	movs	r2, #144	@ 0x90
 8003566:	2100      	movs	r1, #0
 8003568:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2288      	movs	r2, #136	@ 0x88
 800356e:	2121      	movs	r1, #33	@ 0x21
 8003570:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003572:	f7fd fe15 	bl	80011a0 <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1dba      	adds	r2, r7, #6
 800357e:	2154      	movs	r1, #84	@ 0x54
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1dba      	adds	r2, r7, #6
 8003588:	2156      	movs	r1, #86	@ 0x56
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	015b      	lsls	r3, r3, #5
 8003596:	429a      	cmp	r2, r3
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0x98>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035b4:	e030      	b.n	8003618 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	0013      	movs	r3, r2
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	@ 0x80
 80035c4:	f000 fb26 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2288      	movs	r2, #136	@ 0x88
 80035d0:	2120      	movs	r1, #32
 80035d2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e03d      	b.n	8003654 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	001a      	movs	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	05d2      	lsls	r2, r2, #23
 80035ea:	0dd2      	lsrs	r2, r2, #23
 80035ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3302      	adds	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e007      	b.n	8003606 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2256      	movs	r2, #86	@ 0x56
 800360a:	5a9b      	ldrh	r3, [r3, r2]
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b299      	uxth	r1, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2256      	movs	r2, #86	@ 0x56
 8003616:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2256      	movs	r2, #86	@ 0x56
 800361c:	5a9b      	ldrh	r3, [r3, r2]
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1c8      	bne.n	80035b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	0013      	movs	r3, r2
 800362e:	2200      	movs	r2, #0
 8003630:	2140      	movs	r1, #64	@ 0x40
 8003632:	f000 faef 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d005      	beq.n	8003646 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2288      	movs	r2, #136	@ 0x88
 800363e:	2120      	movs	r1, #32
 8003640:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e006      	b.n	8003654 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2288      	movs	r2, #136	@ 0x88
 800364a:	2120      	movs	r1, #32
 800364c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e000      	b.n	8003654 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003652:	2302      	movs	r3, #2
  }
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b008      	add	sp, #32
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003664:	231e      	movs	r3, #30
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4aab      	ldr	r2, [pc, #684]	@ (8003938 <UART_SetConfig+0x2dc>)
 800368c:	4013      	ands	r3, r2
 800368e:	0019      	movs	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4aa6      	ldr	r2, [pc, #664]	@ (800393c <UART_SetConfig+0x2e0>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a9d      	ldr	r2, [pc, #628]	@ (8003940 <UART_SetConfig+0x2e4>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	220f      	movs	r2, #15
 80036e0:	4393      	bics	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a93      	ldr	r2, [pc, #588]	@ (8003944 <UART_SetConfig+0x2e8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d127      	bne.n	800374a <UART_SetConfig+0xee>
 80036fa:	4b93      	ldr	r3, [pc, #588]	@ (8003948 <UART_SetConfig+0x2ec>)
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	2203      	movs	r2, #3
 8003700:	4013      	ands	r3, r2
 8003702:	2b03      	cmp	r3, #3
 8003704:	d017      	beq.n	8003736 <UART_SetConfig+0xda>
 8003706:	d81b      	bhi.n	8003740 <UART_SetConfig+0xe4>
 8003708:	2b02      	cmp	r3, #2
 800370a:	d00a      	beq.n	8003722 <UART_SetConfig+0xc6>
 800370c:	d818      	bhi.n	8003740 <UART_SetConfig+0xe4>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <UART_SetConfig+0xbc>
 8003712:	2b01      	cmp	r3, #1
 8003714:	d00a      	beq.n	800372c <UART_SetConfig+0xd0>
 8003716:	e013      	b.n	8003740 <UART_SetConfig+0xe4>
 8003718:	231f      	movs	r3, #31
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e021      	b.n	8003766 <UART_SetConfig+0x10a>
 8003722:	231f      	movs	r3, #31
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2202      	movs	r2, #2
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e01c      	b.n	8003766 <UART_SetConfig+0x10a>
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2204      	movs	r2, #4
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e017      	b.n	8003766 <UART_SetConfig+0x10a>
 8003736:	231f      	movs	r3, #31
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2208      	movs	r2, #8
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e012      	b.n	8003766 <UART_SetConfig+0x10a>
 8003740:	231f      	movs	r3, #31
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2210      	movs	r2, #16
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e00d      	b.n	8003766 <UART_SetConfig+0x10a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7f      	ldr	r2, [pc, #508]	@ (800394c <UART_SetConfig+0x2f0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d104      	bne.n	800375e <UART_SetConfig+0x102>
 8003754:	231f      	movs	r3, #31
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e003      	b.n	8003766 <UART_SetConfig+0x10a>
 800375e:	231f      	movs	r3, #31
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2210      	movs	r2, #16
 8003764:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	429a      	cmp	r2, r3
 8003770:	d000      	beq.n	8003774 <UART_SetConfig+0x118>
 8003772:	e06f      	b.n	8003854 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003774:	231f      	movs	r3, #31
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b08      	cmp	r3, #8
 800377c:	d01f      	beq.n	80037be <UART_SetConfig+0x162>
 800377e:	dc22      	bgt.n	80037c6 <UART_SetConfig+0x16a>
 8003780:	2b04      	cmp	r3, #4
 8003782:	d017      	beq.n	80037b4 <UART_SetConfig+0x158>
 8003784:	dc1f      	bgt.n	80037c6 <UART_SetConfig+0x16a>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <UART_SetConfig+0x134>
 800378a:	2b02      	cmp	r3, #2
 800378c:	d005      	beq.n	800379a <UART_SetConfig+0x13e>
 800378e:	e01a      	b.n	80037c6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7fe fb1e 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003794:	0003      	movs	r3, r0
 8003796:	61bb      	str	r3, [r7, #24]
        break;
 8003798:	e01c      	b.n	80037d4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800379a:	4b6b      	ldr	r3, [pc, #428]	@ (8003948 <UART_SetConfig+0x2ec>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2207      	movs	r2, #7
 80037a2:	4013      	ands	r3, r2
 80037a4:	3301      	adds	r3, #1
 80037a6:	0019      	movs	r1, r3
 80037a8:	4869      	ldr	r0, [pc, #420]	@ (8003950 <UART_SetConfig+0x2f4>)
 80037aa:	f7fc fcbf 	bl	800012c <__udivsi3>
 80037ae:	0003      	movs	r3, r0
 80037b0:	61bb      	str	r3, [r7, #24]
        break;
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b4:	f7fe faae 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 80037b8:	0003      	movs	r3, r0
 80037ba:	61bb      	str	r3, [r7, #24]
        break;
 80037bc:	e00a      	b.n	80037d4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	61bb      	str	r3, [r7, #24]
        break;
 80037c4:	e006      	b.n	80037d4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ca:	231e      	movs	r3, #30
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
        break;
 80037d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d100      	bne.n	80037dc <UART_SetConfig+0x180>
 80037da:	e097      	b.n	800390c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003954 <UART_SetConfig+0x2f8>)
 80037e2:	0052      	lsls	r2, r2, #1
 80037e4:	5ad3      	ldrh	r3, [r2, r3]
 80037e6:	0019      	movs	r1, r3
 80037e8:	69b8      	ldr	r0, [r7, #24]
 80037ea:	f7fc fc9f 	bl	800012c <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	005a      	lsls	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	18d2      	adds	r2, r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0019      	movs	r1, r3
 8003800:	0010      	movs	r0, r2
 8003802:	f7fc fc93 	bl	800012c <__udivsi3>
 8003806:	0003      	movs	r3, r0
 8003808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d91c      	bls.n	800384a <UART_SetConfig+0x1ee>
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	025b      	lsls	r3, r3, #9
 8003816:	429a      	cmp	r2, r3
 8003818:	d217      	bcs.n	800384a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	b29a      	uxth	r2, r3
 800381e:	200e      	movs	r0, #14
 8003820:	183b      	adds	r3, r7, r0
 8003822:	210f      	movs	r1, #15
 8003824:	438a      	bics	r2, r1
 8003826:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	b29b      	uxth	r3, r3
 800382e:	2207      	movs	r2, #7
 8003830:	4013      	ands	r3, r2
 8003832:	b299      	uxth	r1, r3
 8003834:	183b      	adds	r3, r7, r0
 8003836:	183a      	adds	r2, r7, r0
 8003838:	8812      	ldrh	r2, [r2, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	183a      	adds	r2, r7, r0
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	e060      	b.n	800390c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800384a:	231e      	movs	r3, #30
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e05b      	b.n	800390c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003854:	231f      	movs	r3, #31
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d01f      	beq.n	800389e <UART_SetConfig+0x242>
 800385e:	dc22      	bgt.n	80038a6 <UART_SetConfig+0x24a>
 8003860:	2b04      	cmp	r3, #4
 8003862:	d017      	beq.n	8003894 <UART_SetConfig+0x238>
 8003864:	dc1f      	bgt.n	80038a6 <UART_SetConfig+0x24a>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <UART_SetConfig+0x214>
 800386a:	2b02      	cmp	r3, #2
 800386c:	d005      	beq.n	800387a <UART_SetConfig+0x21e>
 800386e:	e01a      	b.n	80038a6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003870:	f7fe faae 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003874:	0003      	movs	r3, r0
 8003876:	61bb      	str	r3, [r7, #24]
        break;
 8003878:	e01c      	b.n	80038b4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800387a:	4b33      	ldr	r3, [pc, #204]	@ (8003948 <UART_SetConfig+0x2ec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2207      	movs	r2, #7
 8003882:	4013      	ands	r3, r2
 8003884:	3301      	adds	r3, #1
 8003886:	0019      	movs	r1, r3
 8003888:	4831      	ldr	r0, [pc, #196]	@ (8003950 <UART_SetConfig+0x2f4>)
 800388a:	f7fc fc4f 	bl	800012c <__udivsi3>
 800388e:	0003      	movs	r3, r0
 8003890:	61bb      	str	r3, [r7, #24]
        break;
 8003892:	e00f      	b.n	80038b4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003894:	f7fe fa3e 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8003898:	0003      	movs	r3, r0
 800389a:	61bb      	str	r3, [r7, #24]
        break;
 800389c:	e00a      	b.n	80038b4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	61bb      	str	r3, [r7, #24]
        break;
 80038a4:	e006      	b.n	80038b4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038aa:	231e      	movs	r3, #30
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
        break;
 80038b2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d028      	beq.n	800390c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038be:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <UART_SetConfig+0x2f8>)
 80038c0:	0052      	lsls	r2, r2, #1
 80038c2:	5ad3      	ldrh	r3, [r2, r3]
 80038c4:	0019      	movs	r1, r3
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f7fc fc30 	bl	800012c <__udivsi3>
 80038cc:	0003      	movs	r3, r0
 80038ce:	001a      	movs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	18d2      	adds	r2, r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	0019      	movs	r1, r3
 80038de:	0010      	movs	r0, r2
 80038e0:	f7fc fc24 	bl	800012c <__udivsi3>
 80038e4:	0003      	movs	r3, r0
 80038e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	d90a      	bls.n	8003904 <UART_SetConfig+0x2a8>
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d205      	bcs.n	8003904 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	e003      	b.n	800390c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003904:	231e      	movs	r3, #30
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	226a      	movs	r2, #106	@ 0x6a
 8003910:	2101      	movs	r1, #1
 8003912:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2268      	movs	r2, #104	@ 0x68
 8003918:	2101      	movs	r1, #1
 800391a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003928:	231e      	movs	r3, #30
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b008      	add	sp, #32
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	cfff69f3 	.word	0xcfff69f3
 800393c:	ffffcfff 	.word	0xffffcfff
 8003940:	11fff4ff 	.word	0x11fff4ff
 8003944:	40013800 	.word	0x40013800
 8003948:	40021000 	.word	0x40021000
 800394c:	40004400 	.word	0x40004400
 8003950:	02dc6c00 	.word	0x02dc6c00
 8003954:	08006c20 	.word	0x08006c20

08003958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	2208      	movs	r2, #8
 8003966:	4013      	ands	r3, r2
 8003968:	d00b      	beq.n	8003982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a4a      	ldr	r2, [pc, #296]	@ (8003a9c <UART_AdvFeatureConfig+0x144>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003986:	2201      	movs	r2, #1
 8003988:	4013      	ands	r3, r2
 800398a:	d00b      	beq.n	80039a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4a43      	ldr	r2, [pc, #268]	@ (8003aa0 <UART_AdvFeatureConfig+0x148>)
 8003994:	4013      	ands	r3, r2
 8003996:	0019      	movs	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	2202      	movs	r2, #2
 80039aa:	4013      	ands	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa4 <UART_AdvFeatureConfig+0x14c>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	2204      	movs	r2, #4
 80039cc:	4013      	ands	r3, r2
 80039ce:	d00b      	beq.n	80039e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a34      	ldr	r2, [pc, #208]	@ (8003aa8 <UART_AdvFeatureConfig+0x150>)
 80039d8:	4013      	ands	r3, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	2210      	movs	r2, #16
 80039ee:	4013      	ands	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a2c      	ldr	r2, [pc, #176]	@ (8003aac <UART_AdvFeatureConfig+0x154>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0e:	2220      	movs	r2, #32
 8003a10:	4013      	ands	r3, r2
 8003a12:	d00b      	beq.n	8003a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4a25      	ldr	r2, [pc, #148]	@ (8003ab0 <UART_AdvFeatureConfig+0x158>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	2240      	movs	r2, #64	@ 0x40
 8003a32:	4013      	ands	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab4 <UART_AdvFeatureConfig+0x15c>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	0019      	movs	r1, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	035b      	lsls	r3, r3, #13
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10b      	bne.n	8003a72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a15      	ldr	r2, [pc, #84]	@ (8003ab8 <UART_AdvFeatureConfig+0x160>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	0019      	movs	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	2280      	movs	r2, #128	@ 0x80
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <UART_AdvFeatureConfig+0x164>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }
}
 8003a94:	46c0      	nop			@ (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	ffff7fff 	.word	0xffff7fff
 8003aa0:	fffdffff 	.word	0xfffdffff
 8003aa4:	fffeffff 	.word	0xfffeffff
 8003aa8:	fffbffff 	.word	0xfffbffff
 8003aac:	ffffefff 	.word	0xffffefff
 8003ab0:	ffffdfff 	.word	0xffffdfff
 8003ab4:	ffefffff 	.word	0xffefffff
 8003ab8:	ff9fffff 	.word	0xff9fffff
 8003abc:	fff7ffff 	.word	0xfff7ffff

08003ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b092      	sub	sp, #72	@ 0x48
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2290      	movs	r2, #144	@ 0x90
 8003acc:	2100      	movs	r1, #0
 8003ace:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad0:	f7fd fb66 	bl	80011a0 <HAL_GetTick>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d12d      	bne.n	8003b42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae8:	2280      	movs	r2, #128	@ 0x80
 8003aea:	0391      	lsls	r1, r2, #14
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4a47      	ldr	r2, [pc, #284]	@ (8003c0c <UART_CheckIdleState+0x14c>)
 8003af0:	9200      	str	r2, [sp, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f000 f88e 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d022      	beq.n	8003b42 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003afc:	f3ef 8310 	mrs	r3, PRIMASK
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b06:	2301      	movs	r3, #1
 8003b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2180      	movs	r1, #128	@ 0x80
 8003b1e:	438a      	bics	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2288      	movs	r2, #136	@ 0x88
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2284      	movs	r2, #132	@ 0x84
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e060      	b.n	8003c04 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d146      	bne.n	8003bde <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	03d1      	lsls	r1, r2, #15
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4a2c      	ldr	r2, [pc, #176]	@ (8003c0c <UART_CheckIdleState+0x14c>)
 8003b5a:	9200      	str	r2, [sp, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f000 f859 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d03b      	beq.n	8003bde <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b66:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b70:	2301      	movs	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f383 8810 	msr	PRIMASK, r3
}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4922      	ldr	r1, [pc, #136]	@ (8003c10 <UART_CheckIdleState+0x150>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b98:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f383 8810 	msr	PRIMASK, r3
}
 8003bac:	46c0      	nop			@ (mov r8, r8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2101      	movs	r1, #1
 8003bba:	438a      	bics	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	228c      	movs	r2, #140	@ 0x8c
 8003bce:	2120      	movs	r1, #32
 8003bd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2284      	movs	r2, #132	@ 0x84
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e012      	b.n	8003c04 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2288      	movs	r2, #136	@ 0x88
 8003be2:	2120      	movs	r1, #32
 8003be4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	228c      	movs	r2, #140	@ 0x8c
 8003bea:	2120      	movs	r1, #32
 8003bec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2284      	movs	r2, #132	@ 0x84
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b010      	add	sp, #64	@ 0x40
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	01ffffff 	.word	0x01ffffff
 8003c10:	fffffedf 	.word	0xfffffedf

08003c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c24:	e051      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	d04e      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2c:	f7fd fab8 	bl	80011a0 <HAL_GetTick>
 8003c30:	0002      	movs	r2, r0
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d302      	bcc.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e051      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d03b      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b80      	cmp	r3, #128	@ 0x80
 8003c56:	d038      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b40      	cmp	r3, #64	@ 0x40
 8003c5c:	d035      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	2208      	movs	r2, #8
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d111      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2208      	movs	r2, #8
 8003c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 f83c 	bl	8003cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2290      	movs	r2, #144	@ 0x90
 8003c80:	2108      	movs	r1, #8
 8003c82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2284      	movs	r2, #132	@ 0x84
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e02c      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d112      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2280      	movs	r2, #128	@ 0x80
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 f81f 	bl	8003cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2290      	movs	r2, #144	@ 0x90
 8003cba:	2120      	movs	r1, #32
 8003cbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2284      	movs	r2, #132	@ 0x84
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00f      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	425a      	negs	r2, r3
 8003cda:	4153      	adcs	r3, r2
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	001a      	movs	r2, r3
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d09e      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b004      	add	sp, #16
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08e      	sub	sp, #56	@ 0x38
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	617b      	str	r3, [r7, #20]
  return(result);
 8003d02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4926      	ldr	r1, [pc, #152]	@ (8003db8 <UART_EndRxTransfer+0xc4>)
 8003d1e:	400a      	ands	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d32:	623b      	str	r3, [r7, #32]
  return(result);
 8003d34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d38:	2301      	movs	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	491b      	ldr	r1, [pc, #108]	@ (8003dbc <UART_EndRxTransfer+0xc8>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	f383 8810 	msr	PRIMASK, r3
}
 8003d5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d118      	bne.n	8003d9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d68:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d72:	2301      	movs	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2110      	movs	r1, #16
 8003d8a:	438a      	bics	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	228c      	movs	r2, #140	@ 0x8c
 8003d9e:	2120      	movs	r1, #32
 8003da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b00e      	add	sp, #56	@ 0x38
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	fffffedf 	.word	0xfffffedf
 8003dbc:	effffffe 	.word	0xeffffffe

08003dc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2284      	movs	r2, #132	@ 0x84
 8003dcc:	5c9b      	ldrb	r3, [r3, r2]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e027      	b.n	8003e26 <HAL_UARTEx_DisableFifoMode+0x66>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2284      	movs	r2, #132	@ 0x84
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2288      	movs	r2, #136	@ 0x88
 8003de2:	2124      	movs	r1, #36	@ 0x24
 8003de4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	438a      	bics	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a0b      	ldr	r2, [pc, #44]	@ (8003e30 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2288      	movs	r2, #136	@ 0x88
 8003e18:	2120      	movs	r1, #32
 8003e1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2284      	movs	r2, #132	@ 0x84
 8003e20:	2100      	movs	r1, #0
 8003e22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b004      	add	sp, #16
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			@ (mov r8, r8)
 8003e30:	dfffffff 	.word	0xdfffffff

08003e34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2284      	movs	r2, #132	@ 0x84
 8003e42:	5c9b      	ldrb	r3, [r3, r2]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e02e      	b.n	8003eaa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2284      	movs	r2, #132	@ 0x84
 8003e50:	2101      	movs	r1, #1
 8003e52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2288      	movs	r2, #136	@ 0x88
 8003e58:	2124      	movs	r1, #36	@ 0x24
 8003e5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2101      	movs	r1, #1
 8003e70:	438a      	bics	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	08d9      	lsrs	r1, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 f854 	bl	8003f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2288      	movs	r2, #136	@ 0x88
 8003e9c:	2120      	movs	r1, #32
 8003e9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2284      	movs	r2, #132	@ 0x84
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2284      	movs	r2, #132	@ 0x84
 8003ec2:	5c9b      	ldrb	r3, [r3, r2]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e02f      	b.n	8003f2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2284      	movs	r2, #132	@ 0x84
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2288      	movs	r2, #136	@ 0x88
 8003ed8:	2124      	movs	r1, #36	@ 0x24
 8003eda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2101      	movs	r1, #1
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	4a0e      	ldr	r2, [pc, #56]	@ (8003f34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f000 f813 	bl	8003f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2288      	movs	r2, #136	@ 0x88
 8003f1e:	2120      	movs	r1, #32
 8003f20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2284      	movs	r2, #132	@ 0x84
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b004      	add	sp, #16
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	f1ffffff 	.word	0xf1ffffff

08003f38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	226a      	movs	r2, #106	@ 0x6a
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2268      	movs	r2, #104	@ 0x68
 8003f54:	2101      	movs	r1, #1
 8003f56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f58:	e043      	b.n	8003fe2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f5a:	260f      	movs	r6, #15
 8003f5c:	19bb      	adds	r3, r7, r6
 8003f5e:	2208      	movs	r2, #8
 8003f60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f62:	200e      	movs	r0, #14
 8003f64:	183b      	adds	r3, r7, r0
 8003f66:	2208      	movs	r2, #8
 8003f68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	0e5b      	lsrs	r3, r3, #25
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	240d      	movs	r4, #13
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	2107      	movs	r1, #7
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	0f5b      	lsrs	r3, r3, #29
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	250c      	movs	r5, #12
 8003f8a:	197b      	adds	r3, r7, r5
 8003f8c:	2107      	movs	r1, #7
 8003f8e:	400a      	ands	r2, r1
 8003f90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f92:	183b      	adds	r3, r7, r0
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	197a      	adds	r2, r7, r5
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	4914      	ldr	r1, [pc, #80]	@ (8003fec <UARTEx_SetNbDataToProcess+0xb4>)
 8003f9c:	5c8a      	ldrb	r2, [r1, r2]
 8003f9e:	435a      	muls	r2, r3
 8003fa0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fa2:	197b      	adds	r3, r7, r5
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003faa:	0019      	movs	r1, r3
 8003fac:	f7fc f948 	bl	8000240 <__divsi3>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	226a      	movs	r2, #106	@ 0x6a
 8003fb8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fba:	19bb      	adds	r3, r7, r6
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	193a      	adds	r2, r7, r4
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	490a      	ldr	r1, [pc, #40]	@ (8003fec <UARTEx_SetNbDataToProcess+0xb4>)
 8003fc4:	5c8a      	ldrb	r2, [r1, r2]
 8003fc6:	435a      	muls	r2, r3
 8003fc8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fca:	193b      	adds	r3, r7, r4
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	4a08      	ldr	r2, [pc, #32]	@ (8003ff0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	f7fc f934 	bl	8000240 <__divsi3>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	b299      	uxth	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2268      	movs	r2, #104	@ 0x68
 8003fe0:	5299      	strh	r1, [r3, r2]
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b005      	add	sp, #20
 8003fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	08006c38 	.word	0x08006c38
 8003ff0:	08006c40 	.word	0x08006c40

08003ff4 <__NVIC_SetPriority>:
{
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	0002      	movs	r2, r0
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004002:	1dfb      	adds	r3, r7, #7
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b7f      	cmp	r3, #127	@ 0x7f
 8004008:	d828      	bhi.n	800405c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800400a:	4a2f      	ldr	r2, [pc, #188]	@ (80040c8 <__NVIC_SetPriority+0xd4>)
 800400c:	1dfb      	adds	r3, r7, #7
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b25b      	sxtb	r3, r3
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	33c0      	adds	r3, #192	@ 0xc0
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	589b      	ldr	r3, [r3, r2]
 800401a:	1dfa      	adds	r2, r7, #7
 800401c:	7812      	ldrb	r2, [r2, #0]
 800401e:	0011      	movs	r1, r2
 8004020:	2203      	movs	r2, #3
 8004022:	400a      	ands	r2, r1
 8004024:	00d2      	lsls	r2, r2, #3
 8004026:	21ff      	movs	r1, #255	@ 0xff
 8004028:	4091      	lsls	r1, r2
 800402a:	000a      	movs	r2, r1
 800402c:	43d2      	mvns	r2, r2
 800402e:	401a      	ands	r2, r3
 8004030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	019b      	lsls	r3, r3, #6
 8004036:	22ff      	movs	r2, #255	@ 0xff
 8004038:	401a      	ands	r2, r3
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	0018      	movs	r0, r3
 8004040:	2303      	movs	r3, #3
 8004042:	4003      	ands	r3, r0
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004048:	481f      	ldr	r0, [pc, #124]	@ (80040c8 <__NVIC_SetPriority+0xd4>)
 800404a:	1dfb      	adds	r3, r7, #7
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b25b      	sxtb	r3, r3
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	430a      	orrs	r2, r1
 8004054:	33c0      	adds	r3, #192	@ 0xc0
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	501a      	str	r2, [r3, r0]
}
 800405a:	e031      	b.n	80040c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800405c:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <__NVIC_SetPriority+0xd8>)
 800405e:	1dfb      	adds	r3, r7, #7
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	0019      	movs	r1, r3
 8004064:	230f      	movs	r3, #15
 8004066:	400b      	ands	r3, r1
 8004068:	3b08      	subs	r3, #8
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	3306      	adds	r3, #6
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	3304      	adds	r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1dfa      	adds	r2, r7, #7
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	0011      	movs	r1, r2
 800407c:	2203      	movs	r2, #3
 800407e:	400a      	ands	r2, r1
 8004080:	00d2      	lsls	r2, r2, #3
 8004082:	21ff      	movs	r1, #255	@ 0xff
 8004084:	4091      	lsls	r1, r2
 8004086:	000a      	movs	r2, r1
 8004088:	43d2      	mvns	r2, r2
 800408a:	401a      	ands	r2, r3
 800408c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	22ff      	movs	r2, #255	@ 0xff
 8004094:	401a      	ands	r2, r3
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	0018      	movs	r0, r3
 800409c:	2303      	movs	r3, #3
 800409e:	4003      	ands	r3, r0
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040a4:	4809      	ldr	r0, [pc, #36]	@ (80040cc <__NVIC_SetPriority+0xd8>)
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	001c      	movs	r4, r3
 80040ac:	230f      	movs	r3, #15
 80040ae:	4023      	ands	r3, r4
 80040b0:	3b08      	subs	r3, #8
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	430a      	orrs	r2, r1
 80040b6:	3306      	adds	r3, #6
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	18c3      	adds	r3, r0, r3
 80040bc:	3304      	adds	r3, #4
 80040be:	601a      	str	r2, [r3, #0]
}
 80040c0:	46c0      	nop			@ (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b003      	add	sp, #12
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	e000e100 	.word	0xe000e100
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <SysTick_Handler+0x1c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040d8:	f001 fba8 	bl	800582c <xTaskGetSchedulerState>
 80040dc:	0003      	movs	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040e2:	f001 ffc9 	bl	8006078 <xPortSysTickHandler>
  }
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	e000e010 	.word	0xe000e010

080040f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 80040f4:	2305      	movs	r3, #5
 80040f6:	425b      	negs	r3, r3
 80040f8:	2100      	movs	r1, #0
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff ff7a 	bl	8003ff4 <__NVIC_SetPriority>
#endif
}
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004110:	f3ef 8305 	mrs	r3, IPSR
 8004114:	607b      	str	r3, [r7, #4]
  return(result);
 8004116:	687b      	ldr	r3, [r7, #4]

  if (IS_IRQ_MODE()) {
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800411c:	2301      	movs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e00e      	b.n	8004140 <IRQ_Context+0x3a>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8004122:	f001 fb83 	bl	800582c <xTaskGetSchedulerState>
 8004126:	0003      	movs	r3, r0
 8004128:	60bb      	str	r3, [r7, #8]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d007      	beq.n	8004140 <IRQ_Context+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004130:	f3ef 8310 	mrs	r3, PRIMASK
 8004134:	603b      	str	r3, [r7, #0]
  return(result);
 8004136:	683b      	ldr	r3, [r7, #0]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <IRQ_Context+0x3a>
        /* Interrupts are masked */
        irq = 1U;
 800413c:	2301      	movs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b004      	add	sp, #16
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8004152:	f7ff ffd8 	bl	8004106 <IRQ_Context>
 8004156:	1e03      	subs	r3, r0, #0
 8004158:	d003      	beq.n	8004162 <osKernelInitialize+0x16>
    stat = osErrorISR;
 800415a:	2306      	movs	r3, #6
 800415c:	425b      	negs	r3, r3
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	e013      	b.n	800418a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8004162:	f001 fb63 	bl	800582c <xTaskGetSchedulerState>
 8004166:	0003      	movs	r3, r0
 8004168:	603b      	str	r3, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d109      	bne.n	8004184 <osKernelInitialize+0x38>
 8004170:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <osKernelInitialize+0x48>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <osKernelInitialize+0x48>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	e002      	b.n	800418a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8004184:	2301      	movs	r3, #1
 8004186:	425b      	negs	r3, r3
 8004188:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800418a:	687b      	ldr	r3, [r7, #4]
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200002d4 	.word	0x200002d4

08004198 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800419e:	f7ff ffb2 	bl	8004106 <IRQ_Context>
 80041a2:	1e03      	subs	r3, r0, #0
 80041a4:	d003      	beq.n	80041ae <osKernelStart+0x16>
    stat = osErrorISR;
 80041a6:	2306      	movs	r3, #6
 80041a8:	425b      	negs	r3, r3
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e017      	b.n	80041de <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 80041ae:	f001 fb3d 	bl	800582c <xTaskGetSchedulerState>
 80041b2:	0003      	movs	r3, r0
 80041b4:	603b      	str	r3, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d10d      	bne.n	80041d8 <osKernelStart+0x40>
 80041bc:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <osKernelStart+0x50>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d109      	bne.n	80041d8 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041c4:	f7ff ff94 	bl	80040f0 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 80041c8:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <osKernelStart+0x50>)
 80041ca:	2202      	movs	r2, #2
 80041cc:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041ce:	f000 fe0b 	bl	8004de8 <vTaskStartScheduler>
      stat = osOK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	e002      	b.n	80041de <osKernelStart+0x46>
    } else {
      stat = osError;
 80041d8:	2301      	movs	r3, #1
 80041da:	425b      	negs	r3, r3
 80041dc:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 80041de:	687b      	ldr	r3, [r7, #4]
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	200002d4 	.word	0x200002d4

080041ec <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	b08e      	sub	sp, #56	@ 0x38
 80041f0:	af04      	add	r7, sp, #16
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 80041fc:	f7ff ff83 	bl	8004106 <IRQ_Context>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d000      	beq.n	8004206 <osThreadNew+0x1a>
 8004204:	e081      	b.n	800430a <osThreadNew+0x11e>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d100      	bne.n	800420e <osThreadNew+0x22>
 800420c:	e07d      	b.n	800430a <osThreadNew+0x11e>
    stack = configMINIMAL_STACK_SIZE;
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004212:	2318      	movs	r3, #24
 8004214:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004216:	2300      	movs	r3, #0
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800421a:	2301      	movs	r3, #1
 800421c:	425b      	negs	r3, r3
 800421e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d044      	beq.n	80042b0 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <osThreadNew+0x48>
        name = attr->name;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <osThreadNew+0x6c>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b38      	cmp	r3, #56	@ 0x38
 800424c:	d804      	bhi.n	8004258 <osThreadNew+0x6c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	4013      	ands	r3, r2
 8004256:	d001      	beq.n	800425c <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8004258:	2300      	movs	r3, #0
 800425a:	e057      	b.n	800430c <osThreadNew+0x120>
      }

      if (attr->stack_size > 0U) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <osThreadNew+0xa6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b5b      	cmp	r3, #91	@ 0x5b
 800427a:	d90a      	bls.n	8004292 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d006      	beq.n	8004292 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800428c:	2301      	movs	r3, #1
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e010      	b.n	80042b4 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <osThreadNew+0xc8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <osThreadNew+0xc8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e001      	b.n	80042b4 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d112      	bne.n	80042e0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042c2:	68bd      	ldr	r5, [r7, #8]
 80042c4:	6a3c      	ldr	r4, [r7, #32]
 80042c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	9302      	str	r3, [sp, #8]
 80042cc:	9201      	str	r2, [sp, #4]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	002b      	movs	r3, r5
 80042d4:	0022      	movs	r2, r4
 80042d6:	f000 fbb2 	bl	8004a3e <xTaskCreateStatic>
 80042da:	0003      	movs	r3, r0
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e014      	b.n	800430a <osThreadNew+0x11e>
      #endif
    }
    else {
      if (mem == 0) {
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d111      	bne.n	800430a <osThreadNew+0x11e>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68bc      	ldr	r4, [r7, #8]
 80042ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	2314      	movs	r3, #20
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	0023      	movs	r3, r4
 80042fc:	f000 fbec 	bl	8004ad8 <xTaskCreate>
 8004300:	0003      	movs	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d001      	beq.n	800430a <osThreadNew+0x11e>
            hTask = NULL;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800430a:	697b      	ldr	r3, [r7, #20]
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b00a      	add	sp, #40	@ 0x28
 8004312:	bdb0      	pop	{r4, r5, r7, pc}

08004314 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800431c:	f7ff fef3 	bl	8004106 <IRQ_Context>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d003      	beq.n	800432c <osDelay+0x18>
    stat = osErrorISR;
 8004324:	2306      	movs	r3, #6
 8004326:	425b      	negs	r3, r3
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e008      	b.n	800433e <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <osDelay+0x2a>
      vTaskDelay(ticks);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0018      	movs	r0, r3
 800433a:	f000 fd2f 	bl	8004d9c <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800433e:	68fb      	ldr	r3, [r7, #12]
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b004      	add	sp, #16
 8004346:	bd80      	pop	{r7, pc}

08004348 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a06      	ldr	r2, [pc, #24]	@ (8004370 <vApplicationGetIdleTaskMemory+0x28>)
 8004358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a05      	ldr	r2, [pc, #20]	@ (8004374 <vApplicationGetIdleTaskMemory+0x2c>)
 800435e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b004      	add	sp, #16
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	200002d8 	.word	0x200002d8
 8004374:	20000334 	.word	0x20000334

08004378 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a06      	ldr	r2, [pc, #24]	@ (80043a0 <vApplicationGetTimerTaskMemory+0x28>)
 8004388:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4a05      	ldr	r2, [pc, #20]	@ (80043a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800438e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2280      	movs	r2, #128	@ 0x80
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	20000534 	.word	0x20000534
 80043a4:	20000590 	.word	0x20000590

080043a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3308      	adds	r3, #8
 80043b4:	001a      	movs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	4252      	negs	r2, r2
 80043c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3308      	adds	r3, #8
 80043c6:	001a      	movs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3308      	adds	r3, #8
 80043d0:	001a      	movs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043dc:	46c0      	nop			@ (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	b002      	add	sp, #8
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}

080043fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	3301      	adds	r3, #1
 800440e:	d103      	bne.n	8004418 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e00c      	b.n	8004432 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3308      	adds	r3, #8
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e002      	b.n	8004426 <vListInsert+0x2c>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d2f6      	bcs.n	8004420 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b004      	add	sp, #16
 8004464:	bd80      	pop	{r7, pc}

08004466 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6852      	ldr	r2, [r2, #4]
 8004486:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	429a      	cmp	r2, r3
 8004490:	d103      	bne.n	800449a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	1e5a      	subs	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80044b6:	b5b0      	push	{r4, r5, r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80044c0:	2301      	movs	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <xQueueGenericReset+0x1e>
 80044ce:	b672      	cpsid	i
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	e7fd      	b.n	80044d0 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d100      	bne.n	80044dc <xQueueGenericReset+0x26>
 80044da:	e06a      	b.n	80045b2 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d066      	beq.n	80045b2 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	2400      	movs	r4, #0
 80044ee:	0c15      	lsrs	r5, r2, #16
 80044f0:	0c19      	lsrs	r1, r3, #16
 80044f2:	b2a8      	uxth	r0, r5
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d104      	bne.n	8004502 <xQueueGenericReset+0x4c>
 80044f8:	b288      	uxth	r0, r1
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d013      	beq.n	8004526 <xQueueGenericReset+0x70>
 80044fe:	1c10      	adds	r0, r2, #0
 8004500:	e004      	b.n	800450c <xQueueGenericReset+0x56>
 8004502:	b289      	uxth	r1, r1
 8004504:	2900      	cmp	r1, #0
 8004506:	d10d      	bne.n	8004524 <xQueueGenericReset+0x6e>
 8004508:	1c29      	adds	r1, r5, #0
 800450a:	1c18      	adds	r0, r3, #0
 800450c:	b292      	uxth	r2, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	435a      	muls	r2, r3
 8004512:	b283      	uxth	r3, r0
 8004514:	b289      	uxth	r1, r1
 8004516:	434b      	muls	r3, r1
 8004518:	0c12      	lsrs	r2, r2, #16
 800451a:	189b      	adds	r3, r3, r2
 800451c:	141b      	asrs	r3, r3, #16
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d000      	beq.n	8004526 <xQueueGenericReset+0x70>
 8004524:	2401      	movs	r4, #1
 8004526:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8004528:	d143      	bne.n	80045b2 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 800452a:	f001 fd49 	bl	8005fc0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	434b      	muls	r3, r1
 800453c:	18d2      	adds	r2, r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2200      	movs	r2, #0
 8004546:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004558:	1e59      	subs	r1, r3, #1
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	434b      	muls	r3, r1
 8004560:	18d2      	adds	r2, r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2244      	movs	r2, #68	@ 0x44
 800456a:	21ff      	movs	r1, #255	@ 0xff
 800456c:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2245      	movs	r2, #69	@ 0x45
 8004572:	21ff      	movs	r1, #255	@ 0xff
 8004574:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10d      	bne.n	8004598 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3310      	adds	r3, #16
 8004588:	0018      	movs	r0, r3
 800458a:	f000 ff49 	bl	8005420 <xTaskRemoveFromEventList>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d00c      	beq.n	80045ac <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004592:	f001 fd05 	bl	8005fa0 <vPortYield>
 8004596:	e009      	b.n	80045ac <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3310      	adds	r3, #16
 800459c:	0018      	movs	r0, r3
 800459e:	f7ff ff03 	bl	80043a8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3324      	adds	r3, #36	@ 0x24
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7ff fefe 	bl	80043a8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80045ac:	f001 fd1a 	bl	8005fe4 <vPortExitCritical>
 80045b0:	e001      	b.n	80045b6 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xQueueGenericReset+0x10c>
 80045bc:	b672      	cpsid	i
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	e7fd      	b.n	80045be <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}

080045cc <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b089      	sub	sp, #36	@ 0x24
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <xQueueGenericCreateStatic+0x1e>
 80045e4:	b672      	cpsid	i
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	e7fd      	b.n	80045e6 <xQueueGenericCreateStatic+0x1a>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d029      	beq.n	8004644 <xQueueGenericCreateStatic+0x78>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d026      	beq.n	8004644 <xQueueGenericCreateStatic+0x78>
            ( pxStaticQueue != NULL ) &&
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <xQueueGenericCreateStatic+0x78>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11a      	bne.n	8004644 <xQueueGenericCreateStatic+0x78>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800460e:	2350      	movs	r3, #80	@ 0x50
 8004610:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b50      	cmp	r3, #80	@ 0x50
 8004616:	d002      	beq.n	800461e <xQueueGenericCreateStatic+0x52>
 8004618:	b672      	cpsid	i
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	e7fd      	b.n	800461a <xQueueGenericCreateStatic+0x4e>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800461e:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2246      	movs	r2, #70	@ 0x46
 8004628:	2101      	movs	r1, #1
 800462a:	5499      	strb	r1, [r3, r2]
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800462c:	2328      	movs	r3, #40	@ 0x28
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	781c      	ldrb	r4, [r3, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	0023      	movs	r3, r4
 800463e:	f000 f80c 	bl	800465a <prvInitialiseNewQueue>
 8004642:	e005      	b.n	8004650 <xQueueGenericCreateStatic+0x84>
        }
        else
        {
            configASSERT( pxNewQueue );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <xQueueGenericCreateStatic+0x84>
 800464a:	b672      	cpsid	i
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	e7fd      	b.n	800464c <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004650:	697b      	ldr	r3, [r7, #20]
    }
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b007      	add	sp, #28
 8004658:	bd90      	pop	{r4, r7, pc}

0800465a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	001a      	movs	r2, r3
 8004668:	1cfb      	adds	r3, r7, #3
 800466a:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e002      	b.n	8004680 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2101      	movs	r1, #1
 8004690:	0018      	movs	r0, r3
 8004692:	f7ff ff10 	bl	80044b6 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1cfa      	adds	r2, r7, #3
 800469a:	214c      	movs	r1, #76	@ 0x4c
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	@ 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <xQueueReceive+0x20>
 80046c2:	b672      	cpsid	i
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	e7fd      	b.n	80046c4 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <xQueueReceive+0x2e>
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <xQueueReceive+0x32>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueReceive+0x34>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <xQueueReceive+0x3e>
 80046e0:	b672      	cpsid	i
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	e7fd      	b.n	80046e2 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046e6:	f001 f8a1 	bl	800582c <xTaskGetSchedulerState>
 80046ea:	1e03      	subs	r3, r0, #0
 80046ec:	d102      	bne.n	80046f4 <xQueueReceive+0x4c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <xQueueReceive+0x50>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <xQueueReceive+0x52>
 80046f8:	2300      	movs	r3, #0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <xQueueReceive+0x5c>
 80046fe:	b672      	cpsid	i
 8004700:	46c0      	nop			@ (mov r8, r8)
 8004702:	e7fd      	b.n	8004700 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004704:	f001 fc5c 	bl	8005fc0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01a      	beq.n	800474a <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	0011      	movs	r1, r2
 800471a:	0018      	movs	r0, r3
 800471c:	f000 f87c 	bl	8004818 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	1e5a      	subs	r2, r3, #1
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	3310      	adds	r3, #16
 8004734:	0018      	movs	r0, r3
 8004736:	f000 fe73 	bl	8005420 <xTaskRemoveFromEventList>
 800473a:	1e03      	subs	r3, r0, #0
 800473c:	d001      	beq.n	8004742 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800473e:	f001 fc2f 	bl	8005fa0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004742:	f001 fc4f 	bl	8005fe4 <vPortExitCritical>
                return pdPASS;
 8004746:	2301      	movs	r3, #1
 8004748:	e062      	b.n	8004810 <xQueueReceive+0x168>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004750:	f001 fc48 	bl	8005fe4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004754:	2300      	movs	r3, #0
 8004756:	e05b      	b.n	8004810 <xQueueReceive+0x168>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800475e:	2314      	movs	r3, #20
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	0018      	movs	r0, r3
 8004764:	f000 ff28 	bl	80055b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004768:	2301      	movs	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800476c:	f001 fc3a 	bl	8005fe4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004770:	f000 fb94 	bl	8004e9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004774:	f001 fc24 	bl	8005fc0 <vPortEnterCritical>
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2244      	movs	r2, #68	@ 0x44
 800477c:	5c9b      	ldrb	r3, [r3, r2]
 800477e:	b25b      	sxtb	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	d103      	bne.n	800478c <xQueueReceive+0xe4>
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	2244      	movs	r2, #68	@ 0x44
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2245      	movs	r2, #69	@ 0x45
 8004790:	5c9b      	ldrb	r3, [r3, r2]
 8004792:	b25b      	sxtb	r3, r3
 8004794:	3301      	adds	r3, #1
 8004796:	d103      	bne.n	80047a0 <xQueueReceive+0xf8>
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2245      	movs	r2, #69	@ 0x45
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]
 80047a0:	f001 fc20 	bl	8005fe4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047a4:	1d3a      	adds	r2, r7, #4
 80047a6:	2314      	movs	r3, #20
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	0011      	movs	r1, r2
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 ff17 	bl	80055e0 <xTaskCheckForTimeOut>
 80047b2:	1e03      	subs	r3, r0, #0
 80047b4:	d11e      	bne.n	80047f4 <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 f8b1 	bl	8004920 <prvIsQueueEmpty>
 80047be:	1e03      	subs	r3, r0, #0
 80047c0:	d011      	beq.n	80047e6 <xQueueReceive+0x13e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	3324      	adds	r3, #36	@ 0x24
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fdc8 	bl	8005360 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f846 	bl	8004864 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80047d8:	f000 fb6c 	bl	8004eb4 <xTaskResumeAll>
 80047dc:	1e03      	subs	r3, r0, #0
 80047de:	d191      	bne.n	8004704 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 80047e0:	f001 fbde 	bl	8005fa0 <vPortYield>
 80047e4:	e78e      	b.n	8004704 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 f83b 	bl	8004864 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80047ee:	f000 fb61 	bl	8004eb4 <xTaskResumeAll>
 80047f2:	e787      	b.n	8004704 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 f834 	bl	8004864 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80047fc:	f000 fb5a 	bl	8004eb4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	0018      	movs	r0, r3
 8004804:	f000 f88c 	bl	8004920 <prvIsQueueEmpty>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	d100      	bne.n	800480e <xQueueReceive+0x166>
 800480c:	e77a      	b.n	8004704 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800480e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b00a      	add	sp, #40	@ 0x28
 8004816:	bd80      	pop	{r7, pc}

08004818 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d018      	beq.n	800485c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	18d2      	adds	r2, r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	d303      	bcc.n	800484c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68d9      	ldr	r1, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	0018      	movs	r0, r3
 8004858:	f001 fd00 	bl	800625c <memcpy>
    }
}
 800485c:	46c0      	nop			@ (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800486c:	f001 fba8 	bl	8005fc0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004870:	230f      	movs	r3, #15
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	2145      	movs	r1, #69	@ 0x45
 8004878:	5c52      	ldrb	r2, [r2, r1]
 800487a:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800487c:	e013      	b.n	80048a6 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d016      	beq.n	80048b4 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3324      	adds	r3, #36	@ 0x24
 800488a:	0018      	movs	r0, r3
 800488c:	f000 fdc8 	bl	8005420 <xTaskRemoveFromEventList>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d001      	beq.n	8004898 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004894:	f000 fefa 	bl	800568c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004898:	210f      	movs	r1, #15
 800489a:	187b      	adds	r3, r7, r1
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80048a6:	230f      	movs	r3, #15
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	b25b      	sxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dce5      	bgt.n	800487e <prvUnlockQueue+0x1a>
 80048b2:	e000      	b.n	80048b6 <prvUnlockQueue+0x52>
                    break;
 80048b4:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2245      	movs	r2, #69	@ 0x45
 80048ba:	21ff      	movs	r1, #255	@ 0xff
 80048bc:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80048be:	f001 fb91 	bl	8005fe4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80048c2:	f001 fb7d 	bl	8005fc0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80048c6:	230e      	movs	r3, #14
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	2144      	movs	r1, #68	@ 0x44
 80048ce:	5c52      	ldrb	r2, [r2, r1]
 80048d0:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d2:	e013      	b.n	80048fc <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d016      	beq.n	800490a <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3310      	adds	r3, #16
 80048e0:	0018      	movs	r0, r3
 80048e2:	f000 fd9d 	bl	8005420 <xTaskRemoveFromEventList>
 80048e6:	1e03      	subs	r3, r0, #0
 80048e8:	d001      	beq.n	80048ee <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80048ea:	f000 fecf 	bl	800568c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80048ee:	210e      	movs	r1, #14
 80048f0:	187b      	adds	r3, r7, r1
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80048fc:	230e      	movs	r3, #14
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b25b      	sxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	dce5      	bgt.n	80048d4 <prvUnlockQueue+0x70>
 8004908:	e000      	b.n	800490c <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800490a:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2244      	movs	r2, #68	@ 0x44
 8004910:	21ff      	movs	r1, #255	@ 0xff
 8004912:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8004914:	f001 fb66 	bl	8005fe4 <vPortExitCritical>
}
 8004918:	46c0      	nop			@ (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b004      	add	sp, #16
 800491e:	bd80      	pop	{r7, pc}

08004920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004928:	f001 fb4a 	bl	8005fc0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004934:	2301      	movs	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e001      	b.n	800493e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800493e:	f001 fb51 	bl	8005fe4 <vPortExitCritical>

    return xReturn;
 8004942:	68fb      	ldr	r3, [r7, #12]
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b004      	add	sp, #16
 800494a:	bd80      	pop	{r7, pc}

0800494c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <vQueueAddToRegistry+0x1a>
 8004960:	b672      	cpsid	i
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	e7fd      	b.n	8004962 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d025      	beq.n	80049b8 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e01f      	b.n	80049b2 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004972:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <vQueueAddToRegistry+0x88>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	18d3      	adds	r3, r2, r3
 800497a:	3304      	adds	r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d105      	bne.n	8004990 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	00da      	lsls	r2, r3, #3
 8004988:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <vQueueAddToRegistry+0x88>)
 800498a:	18d3      	adds	r3, r2, r3
 800498c:	60bb      	str	r3, [r7, #8]
                    break;
 800498e:	e013      	b.n	80049b8 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <vQueueAddToRegistry+0x60>
 8004996:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <vQueueAddToRegistry+0x88>)
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	00d2      	lsls	r2, r2, #3
 800499c:	58d3      	ldr	r3, [r2, r3]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	00da      	lsls	r2, r3, #3
 80049a6:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <vQueueAddToRegistry+0x88>)
 80049a8:	18d3      	adds	r3, r2, r3
 80049aa:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	d9dc      	bls.n	8004972 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b004      	add	sp, #16
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	20000790 	.word	0x20000790

080049d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80049e8:	f001 faea 	bl	8005fc0 <vPortEnterCritical>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2244      	movs	r2, #68	@ 0x44
 80049f0:	5c9b      	ldrb	r3, [r3, r2]
 80049f2:	b25b      	sxtb	r3, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	d103      	bne.n	8004a00 <vQueueWaitForMessageRestricted+0x28>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2244      	movs	r2, #68	@ 0x44
 80049fc:	2100      	movs	r1, #0
 80049fe:	5499      	strb	r1, [r3, r2]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2245      	movs	r2, #69	@ 0x45
 8004a04:	5c9b      	ldrb	r3, [r3, r2]
 8004a06:	b25b      	sxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	d103      	bne.n	8004a14 <vQueueWaitForMessageRestricted+0x3c>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2245      	movs	r2, #69	@ 0x45
 8004a10:	2100      	movs	r1, #0
 8004a12:	5499      	strb	r1, [r3, r2]
 8004a14:	f001 fae6 	bl	8005fe4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3324      	adds	r3, #36	@ 0x24
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 fcb9 	bl	80053a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7ff ff17 	bl	8004864 <prvUnlockQueue>
    }
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b006      	add	sp, #24
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8004a3e:	b590      	push	{r4, r7, lr}
 8004a40:	b08d      	sub	sp, #52	@ 0x34
 8004a42:	af04      	add	r7, sp, #16
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <xTaskCreateStatic+0x1a>
 8004a52:	b672      	cpsid	i
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	e7fd      	b.n	8004a54 <xTaskCreateStatic+0x16>
        configASSERT( pxTaskBuffer != NULL );
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <xTaskCreateStatic+0x26>
 8004a5e:	b672      	cpsid	i
 8004a60:	46c0      	nop			@ (mov r8, r8)
 8004a62:	e7fd      	b.n	8004a60 <xTaskCreateStatic+0x22>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8004a64:	235c      	movs	r3, #92	@ 0x5c
 8004a66:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a6c:	d002      	beq.n	8004a74 <xTaskCreateStatic+0x36>
 8004a6e:	b672      	cpsid	i
 8004a70:	46c0      	nop			@ (mov r8, r8)
 8004a72:	e7fd      	b.n	8004a70 <xTaskCreateStatic+0x32>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a74:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d026      	beq.n	8004aca <xTaskCreateStatic+0x8c>
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d023      	beq.n	8004aca <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	225c      	movs	r2, #92	@ 0x5c
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f001 fbb1 	bl	80061f4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2259      	movs	r2, #89	@ 0x59
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aa0:	683c      	ldr	r4, [r7, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9303      	str	r3, [sp, #12]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	2318      	movs	r3, #24
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	0023      	movs	r3, r4
 8004abc:	f000 f85e 	bl	8004b7c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 f8dc 	bl	8004c80 <prvAddNewTaskToReadyList>
 8004ac8:	e001      	b.n	8004ace <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004ace:	69bb      	ldr	r3, [r7, #24]
    }
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b009      	add	sp, #36	@ 0x24
 8004ad6:	bd90      	pop	{r4, r7, pc}

08004ad8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b08d      	sub	sp, #52	@ 0x34
 8004adc:	af04      	add	r7, sp, #16
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	1dbb      	adds	r3, r7, #6
 8004ae6:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ae8:	1dbb      	adds	r3, r7, #6
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	0018      	movs	r0, r3
 8004af0:	f001 fafe 	bl	80060f0 <pvPortMalloc>
 8004af4:	0003      	movs	r3, r0
 8004af6:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004afe:	205c      	movs	r0, #92	@ 0x5c
 8004b00:	f001 faf6 	bl	80060f0 <pvPortMalloc>
 8004b04:	0003      	movs	r3, r0
 8004b06:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	225c      	movs	r2, #92	@ 0x5c
 8004b12:	2100      	movs	r1, #0
 8004b14:	0018      	movs	r0, r3
 8004b16:	f001 fb6d 	bl	80061f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b20:	e006      	b.n	8004b30 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f001 fb35 	bl	8006194 <vPortFree>
 8004b2a:	e001      	b.n	8004b30 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01a      	beq.n	8004b6c <xTaskCreate+0x94>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2259      	movs	r2, #89	@ 0x59
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b3e:	1dbb      	adds	r3, r7, #6
 8004b40:	881a      	ldrh	r2, [r3, #0]
 8004b42:	683c      	ldr	r4, [r7, #0]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	0023      	movs	r3, r4
 8004b5a:	f000 f80f 	bl	8004b7c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f88d 	bl	8004c80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004b66:	2301      	movs	r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e002      	b.n	8004b72 <xTaskCreate+0x9a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	425b      	negs	r3, r3
 8004b70:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004b72:	69bb      	ldr	r3, [r7, #24]
    }
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b009      	add	sp, #36	@ 0x24
 8004b7a:	bd90      	pop	{r4, r7, pc}

08004b7c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	001a      	movs	r2, r3
 8004b94:	21a5      	movs	r1, #165	@ 0xa5
 8004b96:	f001 fb2d 	bl	80061f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4936      	ldr	r1, [pc, #216]	@ (8004c7c <prvInitialiseNewTask+0x100>)
 8004ba2:	468c      	mov	ip, r1
 8004ba4:	4463      	add	r3, ip
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	18d3      	adds	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2207      	movs	r2, #7
 8004bb0:	4393      	bics	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2207      	movs	r2, #7
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d002      	beq.n	8004bc2 <prvInitialiseNewTask+0x46>
 8004bbc:	b672      	cpsid	i
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	e7fd      	b.n	8004bbe <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01f      	beq.n	8004c08 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e013      	b.n	8004bf6 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	18d3      	adds	r3, r2, r3
 8004bd4:	7818      	ldrb	r0, [r3, #0]
 8004bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bd8:	2134      	movs	r1, #52	@ 0x34
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	18d3      	adds	r3, r2, r3
 8004bde:	185b      	adds	r3, r3, r1
 8004be0:	1c02      	adds	r2, r0, #0
 8004be2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	18d3      	adds	r3, r2, r3
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b0f      	cmp	r3, #15
 8004bfa:	d9e8      	bls.n	8004bce <prvInitialiseNewTask+0x52>
 8004bfc:	e000      	b.n	8004c00 <prvInitialiseNewTask+0x84>
            {
                break;
 8004bfe:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	2243      	movs	r2, #67	@ 0x43
 8004c04:	2100      	movs	r1, #0
 8004c06:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	2b37      	cmp	r3, #55	@ 0x37
 8004c0c:	d902      	bls.n	8004c14 <prvInitialiseNewTask+0x98>
 8004c0e:	b672      	cpsid	i
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	e7fd      	b.n	8004c10 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2b37      	cmp	r3, #55	@ 0x37
 8004c18:	d901      	bls.n	8004c1e <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c1a:	2337      	movs	r3, #55	@ 0x37
 8004c1c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	6a3a      	ldr	r2, [r7, #32]
 8004c22:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7ff fbd8 	bl	80043e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	3318      	adds	r3, #24
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fbd3 	bl	80043e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c42:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	2238      	movs	r2, #56	@ 0x38
 8004c48:	1ad2      	subs	r2, r2, r3
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c52:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f001 f916 	bl	8005e8c <pxPortInitialiseStack>
 8004c60:	0002      	movs	r2, r0
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b006      	add	sp, #24
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	3fffffff 	.word	0x3fffffff

08004c80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004c88:	f001 f99a 	bl	8005fc0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d84 <prvAddNewTaskToReadyList+0x104>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	4b3c      	ldr	r3, [pc, #240]	@ (8004d84 <prvAddNewTaskToReadyList+0x104>)
 8004c94:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8004c96:	4b3c      	ldr	r3, [pc, #240]	@ (8004d88 <prvAddNewTaskToReadyList+0x108>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d88 <prvAddNewTaskToReadyList+0x108>)
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ca4:	4b37      	ldr	r3, [pc, #220]	@ (8004d84 <prvAddNewTaskToReadyList+0x104>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d110      	bne.n	8004cce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004cac:	f000 fd08 	bl	80056c0 <prvInitialiseTaskLists>
 8004cb0:	e00d      	b.n	8004cce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004cb2:	4b36      	ldr	r3, [pc, #216]	@ (8004d8c <prvAddNewTaskToReadyList+0x10c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cba:	4b33      	ldr	r3, [pc, #204]	@ (8004d88 <prvAddNewTaskToReadyList+0x108>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d802      	bhi.n	8004cce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d88 <prvAddNewTaskToReadyList+0x108>)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004cce:	4b30      	ldr	r3, [pc, #192]	@ (8004d90 <prvAddNewTaskToReadyList+0x110>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d90 <prvAddNewTaskToReadyList+0x110>)
 8004cd6:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d90 <prvAddNewTaskToReadyList+0x110>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d94 <prvAddNewTaskToReadyList+0x114>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d903      	bls.n	8004cf4 <prvAddNewTaskToReadyList+0x74>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	4b28      	ldr	r3, [pc, #160]	@ (8004d94 <prvAddNewTaskToReadyList+0x114>)
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf8:	4927      	ldr	r1, [pc, #156]	@ (8004d98 <prvAddNewTaskToReadyList+0x118>)
 8004cfa:	0013      	movs	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	18cb      	adds	r3, r1, r3
 8004d04:	3304      	adds	r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	3204      	adds	r2, #4
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2e:	0013      	movs	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a18      	ldr	r2, [pc, #96]	@ (8004d98 <prvAddNewTaskToReadyList+0x118>)
 8004d38:	189a      	adds	r2, r3, r2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	615a      	str	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d42:	4915      	ldr	r1, [pc, #84]	@ (8004d98 <prvAddNewTaskToReadyList+0x118>)
 8004d44:	0013      	movs	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	585b      	ldr	r3, [r3, r1]
 8004d4e:	1c58      	adds	r0, r3, #1
 8004d50:	4911      	ldr	r1, [pc, #68]	@ (8004d98 <prvAddNewTaskToReadyList+0x118>)
 8004d52:	0013      	movs	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004d5c:	f001 f942 	bl	8005fe4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004d60:	4b0a      	ldr	r3, [pc, #40]	@ (8004d8c <prvAddNewTaskToReadyList+0x10c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d68:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <prvAddNewTaskToReadyList+0x108>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d201      	bcs.n	8004d7a <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004d76:	f001 f913 	bl	8005fa0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			@ (mov r8, r8)
 8004d84:	20000ca4 	.word	0x20000ca4
 8004d88:	200007d0 	.word	0x200007d0
 8004d8c:	20000cb0 	.word	0x20000cb0
 8004d90:	20000cc0 	.word	0x20000cc0
 8004d94:	20000cac 	.word	0x20000cac
 8004d98:	200007d4 	.word	0x200007d4

08004d9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d011      	beq.n	8004dd2 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <vTaskDelay+0x48>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <vTaskDelay+0x20>
 8004db6:	b672      	cpsid	i
 8004db8:	46c0      	nop			@ (mov r8, r8)
 8004dba:	e7fd      	b.n	8004db8 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8004dbc:	f000 f86e 	bl	8004e9c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f000 fd4d 	bl	8005864 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004dca:	f000 f873 	bl	8004eb4 <xTaskResumeAll>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <vTaskDelay+0x40>
        {
            portYIELD_WITHIN_API();
 8004dd8:	f001 f8e2 	bl	8005fa0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b004      	add	sp, #16
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000ccc 	.word	0x20000ccc

08004de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b089      	sub	sp, #36	@ 0x24
 8004dec:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004df6:	003a      	movs	r2, r7
 8004df8:	1d39      	adds	r1, r7, #4
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff faa2 	bl	8004348 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8004e04:	683c      	ldr	r4, [r7, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	491d      	ldr	r1, [pc, #116]	@ (8004e80 <vTaskStartScheduler+0x98>)
 8004e0c:	481d      	ldr	r0, [pc, #116]	@ (8004e84 <vTaskStartScheduler+0x9c>)
 8004e0e:	9202      	str	r2, [sp, #8]
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	2300      	movs	r3, #0
 8004e18:	0022      	movs	r2, r4
 8004e1a:	f7ff fe10 	bl	8004a3e <xTaskCreateStatic>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	4b19      	ldr	r3, [pc, #100]	@ (8004e88 <vTaskStartScheduler+0xa0>)
 8004e22:	601a      	str	r2, [r3, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8004e24:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <vTaskStartScheduler+0xa0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e001      	b.n	8004e36 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d103      	bne.n	8004e44 <vTaskStartScheduler+0x5c>
        {
            xReturn = xTimerCreateTimerTask();
 8004e3c:	f000 fd80 	bl	8005940 <xTimerCreateTimerTask>
 8004e40:	0003      	movs	r3, r0
 8004e42:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10d      	bne.n	8004e66 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8004e4a:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e8c <vTaskStartScheduler+0xa4>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4252      	negs	r2, r2
 8004e52:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004e54:	4b0e      	ldr	r3, [pc, #56]	@ (8004e90 <vTaskStartScheduler+0xa8>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e94 <vTaskStartScheduler+0xac>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004e60:	f001 f87a 	bl	8005f58 <xPortStartScheduler>
 8004e64:	e005      	b.n	8004e72 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	d102      	bne.n	8004e72 <vTaskStartScheduler+0x8a>
 8004e6c:	b672      	cpsid	i
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	e7fd      	b.n	8004e6e <vTaskStartScheduler+0x86>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004e72:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <vTaskStartScheduler+0xb0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b005      	add	sp, #20
 8004e7c:	bd90      	pop	{r4, r7, pc}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	08006b28 	.word	0x08006b28
 8004e84:	080056a1 	.word	0x080056a1
 8004e88:	20000cc8 	.word	0x20000cc8
 8004e8c:	20000cc4 	.word	0x20000cc4
 8004e90:	20000cb0 	.word	0x20000cb0
 8004e94:	20000ca8 	.word	0x20000ca8
 8004e98:	08006c48 	.word	0x08006c48

08004e9c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ea0:	4b03      	ldr	r3, [pc, #12]	@ (8004eb0 <vTaskSuspendAll+0x14>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	4b02      	ldr	r3, [pc, #8]	@ (8004eb0 <vTaskSuspendAll+0x14>)
 8004ea8:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000ccc 	.word	0x20000ccc

08004eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004ec2:	4b69      	ldr	r3, [pc, #420]	@ (8005068 <xTaskResumeAll+0x1b4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <xTaskResumeAll+0x1c>
 8004eca:	b672      	cpsid	i
 8004ecc:	46c0      	nop			@ (mov r8, r8)
 8004ece:	e7fd      	b.n	8004ecc <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004ed0:	f001 f876 	bl	8005fc0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004ed4:	4b64      	ldr	r3, [pc, #400]	@ (8005068 <xTaskResumeAll+0x1b4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	4b63      	ldr	r3, [pc, #396]	@ (8005068 <xTaskResumeAll+0x1b4>)
 8004edc:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004ede:	4b62      	ldr	r3, [pc, #392]	@ (8005068 <xTaskResumeAll+0x1b4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d000      	beq.n	8004ee8 <xTaskResumeAll+0x34>
 8004ee6:	e0b7      	b.n	8005058 <xTaskResumeAll+0x1a4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ee8:	4b60      	ldr	r3, [pc, #384]	@ (800506c <xTaskResumeAll+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d100      	bne.n	8004ef2 <xTaskResumeAll+0x3e>
 8004ef0:	e0b2      	b.n	8005058 <xTaskResumeAll+0x1a4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef2:	e089      	b.n	8005008 <xTaskResumeAll+0x154>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8005070 <xTaskResumeAll+0x1bc>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	6a12      	ldr	r2, [r2, #32]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	69d2      	ldr	r2, [r2, #28]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	3318      	adds	r3, #24
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d103      	bne.n	8004f2a <xTaskResumeAll+0x76>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	68d2      	ldr	r2, [r2, #12]
 8004f48:	609a      	str	r2, [r3, #8]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	6892      	ldr	r2, [r2, #8]
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d103      	bne.n	8004f68 <xTaskResumeAll+0xb4>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	605a      	str	r2, [r3, #4]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	615a      	str	r2, [r3, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1e5a      	subs	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005074 <xTaskResumeAll+0x1c0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <xTaskResumeAll+0xd8>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f88:	4b3a      	ldr	r3, [pc, #232]	@ (8005074 <xTaskResumeAll+0x1c0>)
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	4939      	ldr	r1, [pc, #228]	@ (8005078 <xTaskResumeAll+0x1c4>)
 8004f92:	0013      	movs	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	18cb      	adds	r3, r1, r3
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	60da      	str	r2, [r3, #12]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	3204      	adds	r2, #4
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4a2a      	ldr	r2, [pc, #168]	@ (8005078 <xTaskResumeAll+0x1c4>)
 8004fd0:	189a      	adds	r2, r3, r2
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	615a      	str	r2, [r3, #20]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fda:	4927      	ldr	r1, [pc, #156]	@ (8005078 <xTaskResumeAll+0x1c4>)
 8004fdc:	0013      	movs	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	585b      	ldr	r3, [r3, r1]
 8004fe6:	1c58      	adds	r0, r3, #1
 8004fe8:	4923      	ldr	r1, [pc, #140]	@ (8005078 <xTaskResumeAll+0x1c4>)
 8004fea:	0013      	movs	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	189b      	adds	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff8:	4b20      	ldr	r3, [pc, #128]	@ (800507c <xTaskResumeAll+0x1c8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d902      	bls.n	8005008 <xTaskResumeAll+0x154>
                    {
                        xYieldPending = pdTRUE;
 8005002:	4b1f      	ldr	r3, [pc, #124]	@ (8005080 <xTaskResumeAll+0x1cc>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005008:	4b19      	ldr	r3, [pc, #100]	@ (8005070 <xTaskResumeAll+0x1bc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d000      	beq.n	8005012 <xTaskResumeAll+0x15e>
 8005010:	e770      	b.n	8004ef4 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <xTaskResumeAll+0x168>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005018:	f000 fbee 	bl	80057f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800501c:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <xTaskResumeAll+0x1d0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00f      	beq.n	8005048 <xTaskResumeAll+0x194>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005028:	f000 f83c 	bl	80050a4 <xTaskIncrementTick>
 800502c:	1e03      	subs	r3, r0, #0
 800502e:	d002      	beq.n	8005036 <xTaskResumeAll+0x182>
                            {
                                xYieldPending = pdTRUE;
 8005030:	4b13      	ldr	r3, [pc, #76]	@ (8005080 <xTaskResumeAll+0x1cc>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3b01      	subs	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f2      	bne.n	8005028 <xTaskResumeAll+0x174>

                        xPendedTicks = 0;
 8005042:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <xTaskResumeAll+0x1d0>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005048:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <xTaskResumeAll+0x1cc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <xTaskResumeAll+0x1a4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005050:	2301      	movs	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005054:	f000 ffa4 	bl	8005fa0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005058:	f000 ffc4 	bl	8005fe4 <vPortExitCritical>

    return xAlreadyYielded;
 800505c:	693b      	ldr	r3, [r7, #16]
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b006      	add	sp, #24
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	20000ccc 	.word	0x20000ccc
 800506c:	20000ca4 	.word	0x20000ca4
 8005070:	20000c64 	.word	0x20000c64
 8005074:	20000cac 	.word	0x20000cac
 8005078:	200007d4 	.word	0x200007d4
 800507c:	200007d0 	.word	0x200007d0
 8005080:	20000cb8 	.word	0x20000cb8
 8005084:	20000cb4 	.word	0x20000cb4

08005088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800508e:	4b04      	ldr	r3, [pc, #16]	@ (80050a0 <xTaskGetTickCount+0x18>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005094:	687b      	ldr	r3, [r7, #4]
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b002      	add	sp, #8
 800509c:	bd80      	pop	{r7, pc}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	20000ca8 	.word	0x20000ca8

080050a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80050ae:	4b78      	ldr	r3, [pc, #480]	@ (8005290 <xTaskIncrementTick+0x1ec>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d000      	beq.n	80050b8 <xTaskIncrementTick+0x14>
 80050b6:	e0e1      	b.n	800527c <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050b8:	4b76      	ldr	r3, [pc, #472]	@ (8005294 <xTaskIncrementTick+0x1f0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80050c0:	4b74      	ldr	r3, [pc, #464]	@ (8005294 <xTaskIncrementTick+0x1f0>)
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d118      	bne.n	80050fe <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 80050cc:	4b72      	ldr	r3, [pc, #456]	@ (8005298 <xTaskIncrementTick+0x1f4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <xTaskIncrementTick+0x38>
 80050d6:	b672      	cpsid	i
 80050d8:	46c0      	nop			@ (mov r8, r8)
 80050da:	e7fd      	b.n	80050d8 <xTaskIncrementTick+0x34>
 80050dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005298 <xTaskIncrementTick+0x1f4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	4b6e      	ldr	r3, [pc, #440]	@ (800529c <xTaskIncrementTick+0x1f8>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b6c      	ldr	r3, [pc, #432]	@ (8005298 <xTaskIncrementTick+0x1f4>)
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	4b6c      	ldr	r3, [pc, #432]	@ (800529c <xTaskIncrementTick+0x1f8>)
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	4b6b      	ldr	r3, [pc, #428]	@ (80052a0 <xTaskIncrementTick+0x1fc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	4b6a      	ldr	r3, [pc, #424]	@ (80052a0 <xTaskIncrementTick+0x1fc>)
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f000 fb7d 	bl	80057f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80050fe:	4b69      	ldr	r3, [pc, #420]	@ (80052a4 <xTaskIncrementTick+0x200>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	429a      	cmp	r2, r3
 8005106:	d200      	bcs.n	800510a <xTaskIncrementTick+0x66>
 8005108:	e0a4      	b.n	8005254 <xTaskIncrementTick+0x1b0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800510a:	4b63      	ldr	r3, [pc, #396]	@ (8005298 <xTaskIncrementTick+0x1f4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005114:	4b63      	ldr	r3, [pc, #396]	@ (80052a4 <xTaskIncrementTick+0x200>)
 8005116:	2201      	movs	r2, #1
 8005118:	4252      	negs	r2, r2
 800511a:	601a      	str	r2, [r3, #0]
                    break;
 800511c:	e09a      	b.n	8005254 <xTaskIncrementTick+0x1b0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511e:	4b5e      	ldr	r3, [pc, #376]	@ (8005298 <xTaskIncrementTick+0x1f4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	429a      	cmp	r2, r3
 8005134:	d203      	bcs.n	800513e <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005136:	4b5b      	ldr	r3, [pc, #364]	@ (80052a4 <xTaskIncrementTick+0x200>)
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800513c:	e08a      	b.n	8005254 <xTaskIncrementTick+0x1b0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	68d2      	ldr	r2, [r2, #12]
 800514c:	609a      	str	r2, [r3, #8]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3304      	adds	r3, #4
 8005160:	429a      	cmp	r2, r3
 8005162:	d103      	bne.n	800516c <xTaskIncrementTick+0xc8>
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2200      	movs	r2, #0
 8005170:	615a      	str	r2, [r3, #20]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01e      	beq.n	80051c2 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	6a12      	ldr	r2, [r2, #32]
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	69d2      	ldr	r2, [r2, #28]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3318      	adds	r3, #24
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d103      	bne.n	80051b2 <xTaskIncrementTick+0x10e>
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2200      	movs	r2, #0
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c6:	4b38      	ldr	r3, [pc, #224]	@ (80052a8 <xTaskIncrementTick+0x204>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <xTaskIncrementTick+0x132>
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d2:	4b35      	ldr	r3, [pc, #212]	@ (80052a8 <xTaskIncrementTick+0x204>)
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051da:	4934      	ldr	r1, [pc, #208]	@ (80052ac <xTaskIncrementTick+0x208>)
 80051dc:	0013      	movs	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	189b      	adds	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	18cb      	adds	r3, r1, r3
 80051e6:	3304      	adds	r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	3204      	adds	r2, #4
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	609a      	str	r2, [r3, #8]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005210:	0013      	movs	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	189b      	adds	r3, r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4a24      	ldr	r2, [pc, #144]	@ (80052ac <xTaskIncrementTick+0x208>)
 800521a:	189a      	adds	r2, r3, r2
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	615a      	str	r2, [r3, #20]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005224:	4921      	ldr	r1, [pc, #132]	@ (80052ac <xTaskIncrementTick+0x208>)
 8005226:	0013      	movs	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	189b      	adds	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	585b      	ldr	r3, [r3, r1]
 8005230:	1c58      	adds	r0, r3, #1
 8005232:	491e      	ldr	r1, [pc, #120]	@ (80052ac <xTaskIncrementTick+0x208>)
 8005234:	0013      	movs	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	189b      	adds	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005242:	4b1b      	ldr	r3, [pc, #108]	@ (80052b0 <xTaskIncrementTick+0x20c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	429a      	cmp	r2, r3
 800524a:	d800      	bhi.n	800524e <xTaskIncrementTick+0x1aa>
 800524c:	e75d      	b.n	800510a <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800524e:	2301      	movs	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005252:	e75a      	b.n	800510a <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005254:	4b16      	ldr	r3, [pc, #88]	@ (80052b0 <xTaskIncrementTick+0x20c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525a:	4914      	ldr	r1, [pc, #80]	@ (80052ac <xTaskIncrementTick+0x208>)
 800525c:	0013      	movs	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	189b      	adds	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	585b      	ldr	r3, [r3, r1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d901      	bls.n	800526e <xTaskIncrementTick+0x1ca>
            {
                xSwitchRequired = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800526e:	4b11      	ldr	r3, [pc, #68]	@ (80052b4 <xTaskIncrementTick+0x210>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 8005276:	2301      	movs	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	e004      	b.n	8005286 <xTaskIncrementTick+0x1e2>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800527c:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <xTaskIncrementTick+0x214>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <xTaskIncrementTick+0x214>)
 8005284:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005286:	69fb      	ldr	r3, [r7, #28]
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b008      	add	sp, #32
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000ccc 	.word	0x20000ccc
 8005294:	20000ca8 	.word	0x20000ca8
 8005298:	20000c5c 	.word	0x20000c5c
 800529c:	20000c60 	.word	0x20000c60
 80052a0:	20000cbc 	.word	0x20000cbc
 80052a4:	20000cc4 	.word	0x20000cc4
 80052a8:	20000cac 	.word	0x20000cac
 80052ac:	200007d4 	.word	0x200007d4
 80052b0:	200007d0 	.word	0x200007d0
 80052b4:	20000cb8 	.word	0x20000cb8
 80052b8:	20000cb4 	.word	0x20000cb4

080052bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80052c2:	4b22      	ldr	r3, [pc, #136]	@ (800534c <vTaskSwitchContext+0x90>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80052ca:	4b21      	ldr	r3, [pc, #132]	@ (8005350 <vTaskSwitchContext+0x94>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80052d0:	e037      	b.n	8005342 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 80052d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005350 <vTaskSwitchContext+0x94>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <vTaskSwitchContext+0x98>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	e008      	b.n	80052f2 <vTaskSwitchContext+0x36>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <vTaskSwitchContext+0x30>
 80052e6:	b672      	cpsid	i
 80052e8:	46c0      	nop			@ (mov r8, r8)
 80052ea:	e7fd      	b.n	80052e8 <vTaskSwitchContext+0x2c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	4919      	ldr	r1, [pc, #100]	@ (8005358 <vTaskSwitchContext+0x9c>)
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	0013      	movs	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	189b      	adds	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	585b      	ldr	r3, [r3, r1]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ed      	beq.n	80052e0 <vTaskSwitchContext+0x24>
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	0013      	movs	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	189b      	adds	r3, r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4a12      	ldr	r2, [pc, #72]	@ (8005358 <vTaskSwitchContext+0x9c>)
 8005310:	189b      	adds	r3, r3, r2
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	429a      	cmp	r2, r3
 8005328:	d103      	bne.n	8005332 <vTaskSwitchContext+0x76>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	4b08      	ldr	r3, [pc, #32]	@ (800535c <vTaskSwitchContext+0xa0>)
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <vTaskSwitchContext+0x98>)
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b002      	add	sp, #8
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	20000ccc 	.word	0x20000ccc
 8005350:	20000cb8 	.word	0x20000cb8
 8005354:	20000cac 	.word	0x20000cac
 8005358:	200007d4 	.word	0x200007d4
 800535c:	200007d0 	.word	0x200007d0

08005360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <vTaskPlaceOnEventList+0x16>
 8005370:	b672      	cpsid	i
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	e7fd      	b.n	8005372 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <vTaskPlaceOnEventList+0x3c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3318      	adds	r3, #24
 800537c:	001a      	movs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	0011      	movs	r1, r2
 8005382:	0018      	movs	r0, r3
 8005384:	f7ff f839 	bl	80043fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2101      	movs	r1, #1
 800538c:	0018      	movs	r0, r3
 800538e:	f000 fa69 	bl	8005864 <prvAddCurrentTaskToDelayedList>
}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	200007d0 	.word	0x200007d0

080053a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <vTaskPlaceOnEventListRestricted+0x18>
 80053b2:	b672      	cpsid	i
 80053b4:	46c0      	nop			@ (mov r8, r8)
 80053b6:	e7fd      	b.n	80053b4 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	4b17      	ldr	r3, [pc, #92]	@ (800541c <vTaskPlaceOnEventListRestricted+0x7c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	61da      	str	r2, [r3, #28]
 80053c6:	4b15      	ldr	r3, [pc, #84]	@ (800541c <vTaskPlaceOnEventListRestricted+0x7c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	6892      	ldr	r2, [r2, #8]
 80053ce:	621a      	str	r2, [r3, #32]
 80053d0:	4b12      	ldr	r3, [pc, #72]	@ (800541c <vTaskPlaceOnEventListRestricted+0x7c>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	3218      	adds	r2, #24
 80053da:	605a      	str	r2, [r3, #4]
 80053dc:	4b0f      	ldr	r3, [pc, #60]	@ (800541c <vTaskPlaceOnEventListRestricted+0x7c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3318      	adds	r3, #24
 80053e2:	001a      	movs	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <vTaskPlaceOnEventListRestricted+0x7c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8005400:	2301      	movs	r3, #1
 8005402:	425b      	negs	r3, r3
 8005404:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	0011      	movs	r1, r2
 800540c:	0018      	movs	r0, r3
 800540e:	f000 fa29 	bl	8005864 <prvAddCurrentTaskToDelayedList>
    }
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	46bd      	mov	sp, r7
 8005416:	b006      	add	sp, #24
 8005418:	bd80      	pop	{r7, pc}
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	200007d0 	.word	0x200007d0

08005420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <xTaskRemoveFromEventList+0x1c>
 8005436:	b672      	cpsid	i
 8005438:	46c0      	nop			@ (mov r8, r8)
 800543a:	e7fd      	b.n	8005438 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	6a12      	ldr	r2, [r2, #32]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	69d2      	ldr	r2, [r2, #28]
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	3318      	adds	r3, #24
 800545e:	429a      	cmp	r2, r3
 8005460:	d103      	bne.n	800546a <xTaskRemoveFromEventList+0x4a>
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	605a      	str	r2, [r3, #4]
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2200      	movs	r2, #0
 800546e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800547a:	4b49      	ldr	r3, [pc, #292]	@ (80055a0 <xTaskRemoveFromEventList+0x180>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d15d      	bne.n	800553e <xTaskRemoveFromEventList+0x11e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	68d2      	ldr	r2, [r2, #12]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	6892      	ldr	r2, [r2, #8]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	3304      	adds	r3, #4
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d103      	bne.n	80054b0 <xTaskRemoveFromEventList+0x90>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2200      	movs	r2, #0
 80054b4:	615a      	str	r2, [r3, #20]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c4:	4b37      	ldr	r3, [pc, #220]	@ (80055a4 <xTaskRemoveFromEventList+0x184>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d903      	bls.n	80054d4 <xTaskRemoveFromEventList+0xb4>
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d0:	4b34      	ldr	r3, [pc, #208]	@ (80055a4 <xTaskRemoveFromEventList+0x184>)
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d8:	4933      	ldr	r1, [pc, #204]	@ (80055a8 <xTaskRemoveFromEventList+0x188>)
 80054da:	0013      	movs	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	18cb      	adds	r3, r1, r3
 80054e4:	3304      	adds	r3, #4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	3204      	adds	r2, #4
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550e:	0013      	movs	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	189b      	adds	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4a24      	ldr	r2, [pc, #144]	@ (80055a8 <xTaskRemoveFromEventList+0x188>)
 8005518:	189a      	adds	r2, r3, r2
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	615a      	str	r2, [r3, #20]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005522:	4921      	ldr	r1, [pc, #132]	@ (80055a8 <xTaskRemoveFromEventList+0x188>)
 8005524:	0013      	movs	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	189b      	adds	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	585b      	ldr	r3, [r3, r1]
 800552e:	1c58      	adds	r0, r3, #1
 8005530:	491d      	ldr	r1, [pc, #116]	@ (80055a8 <xTaskRemoveFromEventList+0x188>)
 8005532:	0013      	movs	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	189b      	adds	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	5058      	str	r0, [r3, r1]
 800553c:	e01b      	b.n	8005576 <xTaskRemoveFromEventList+0x156>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800553e:	4b1b      	ldr	r3, [pc, #108]	@ (80055ac <xTaskRemoveFromEventList+0x18c>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	61da      	str	r2, [r3, #28]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	621a      	str	r2, [r3, #32]
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	3218      	adds	r2, #24
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	3318      	adds	r3, #24
 8005560:	001a      	movs	r2, r3
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	4a10      	ldr	r2, [pc, #64]	@ (80055ac <xTaskRemoveFromEventList+0x18c>)
 800556a:	629a      	str	r2, [r3, #40]	@ 0x28
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <xTaskRemoveFromEventList+0x18c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	4b0e      	ldr	r3, [pc, #56]	@ (80055ac <xTaskRemoveFromEventList+0x18c>)
 8005574:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557a:	4b0d      	ldr	r3, [pc, #52]	@ (80055b0 <xTaskRemoveFromEventList+0x190>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	429a      	cmp	r2, r3
 8005582:	d905      	bls.n	8005590 <xTaskRemoveFromEventList+0x170>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <xTaskRemoveFromEventList+0x194>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e001      	b.n	8005594 <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8005594:	69fb      	ldr	r3, [r7, #28]
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b008      	add	sp, #32
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	20000ccc 	.word	0x20000ccc
 80055a4:	20000cac 	.word	0x20000cac
 80055a8:	200007d4 	.word	0x200007d4
 80055ac:	20000c64 	.word	0x20000c64
 80055b0:	200007d0 	.word	0x200007d0
 80055b4:	20000cb8 	.word	0x20000cb8

080055b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <vTaskInternalSetTimeOutState+0x20>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80055c8:	4b04      	ldr	r3, [pc, #16]	@ (80055dc <vTaskInternalSetTimeOutState+0x24>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	605a      	str	r2, [r3, #4]
}
 80055d0:	46c0      	nop			@ (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000cbc 	.word	0x20000cbc
 80055dc:	20000ca8 	.word	0x20000ca8

080055e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <xTaskCheckForTimeOut+0x16>
 80055f0:	b672      	cpsid	i
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	e7fd      	b.n	80055f2 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <xTaskCheckForTimeOut+0x22>
 80055fc:	b672      	cpsid	i
 80055fe:	46c0      	nop			@ (mov r8, r8)
 8005600:	e7fd      	b.n	80055fe <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8005602:	f000 fcdd 	bl	8005fc0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005606:	4b1f      	ldr	r3, [pc, #124]	@ (8005684 <xTaskCheckForTimeOut+0xa4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	d102      	bne.n	8005624 <xTaskCheckForTimeOut+0x44>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e027      	b.n	8005674 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b17      	ldr	r3, [pc, #92]	@ (8005688 <xTaskCheckForTimeOut+0xa8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d00a      	beq.n	8005646 <xTaskCheckForTimeOut+0x66>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	429a      	cmp	r2, r3
 8005638:	d305      	bcc.n	8005646 <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800563a:	2301      	movs	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e016      	b.n	8005674 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d20c      	bcs.n	800566a <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	0018      	movs	r0, r3
 8005660:	f7ff ffaa 	bl	80055b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e004      	b.n	8005674 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005674:	f000 fcb6 	bl	8005fe4 <vPortExitCritical>

    return xReturn;
 8005678:	697b      	ldr	r3, [r7, #20]
}
 800567a:	0018      	movs	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	b006      	add	sp, #24
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	20000ca8 	.word	0x20000ca8
 8005688:	20000cbc 	.word	0x20000cbc

0800568c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005690:	4b02      	ldr	r3, [pc, #8]	@ (800569c <vTaskMissedYield+0x10>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
}
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000cb8 	.word	0x20000cb8

080056a0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80056a8:	f000 f84e 	bl	8005748 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056ac:	4b03      	ldr	r3, [pc, #12]	@ (80056bc <prvIdleTask+0x1c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d9f9      	bls.n	80056a8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80056b4:	f000 fc74 	bl	8005fa0 <vPortYield>
        prvCheckTasksWaitingTermination();
 80056b8:	e7f6      	b.n	80056a8 <prvIdleTask+0x8>
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	200007d4 	.word	0x200007d4

080056c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	e00c      	b.n	80056e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	0013      	movs	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4a14      	ldr	r2, [pc, #80]	@ (8005728 <prvInitialiseTaskLists+0x68>)
 80056d8:	189b      	adds	r3, r3, r2
 80056da:	0018      	movs	r0, r3
 80056dc:	f7fe fe64 	bl	80043a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3301      	adds	r3, #1
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b37      	cmp	r3, #55	@ 0x37
 80056ea:	d9ef      	bls.n	80056cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80056ec:	4b0f      	ldr	r3, [pc, #60]	@ (800572c <prvInitialiseTaskLists+0x6c>)
 80056ee:	0018      	movs	r0, r3
 80056f0:	f7fe fe5a 	bl	80043a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80056f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005730 <prvInitialiseTaskLists+0x70>)
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7fe fe56 	bl	80043a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80056fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <prvInitialiseTaskLists+0x74>)
 80056fe:	0018      	movs	r0, r3
 8005700:	f7fe fe52 	bl	80043a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005704:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <prvInitialiseTaskLists+0x78>)
 8005706:	0018      	movs	r0, r3
 8005708:	f7fe fe4e 	bl	80043a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800570c:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <prvInitialiseTaskLists+0x7c>)
 800570e:	0018      	movs	r0, r3
 8005710:	f7fe fe4a 	bl	80043a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005714:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <prvInitialiseTaskLists+0x80>)
 8005716:	4a05      	ldr	r2, [pc, #20]	@ (800572c <prvInitialiseTaskLists+0x6c>)
 8005718:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800571a:	4b0a      	ldr	r3, [pc, #40]	@ (8005744 <prvInitialiseTaskLists+0x84>)
 800571c:	4a04      	ldr	r2, [pc, #16]	@ (8005730 <prvInitialiseTaskLists+0x70>)
 800571e:	601a      	str	r2, [r3, #0]
}
 8005720:	46c0      	nop			@ (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200007d4 	.word	0x200007d4
 800572c:	20000c34 	.word	0x20000c34
 8005730:	20000c48 	.word	0x20000c48
 8005734:	20000c64 	.word	0x20000c64
 8005738:	20000c78 	.word	0x20000c78
 800573c:	20000c90 	.word	0x20000c90
 8005740:	20000c5c 	.word	0x20000c5c
 8005744:	20000c60 	.word	0x20000c60

08005748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800574e:	e01a      	b.n	8005786 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8005750:	f000 fc36 	bl	8005fc0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005754:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <prvCheckTasksWaitingTermination+0x50>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	0018      	movs	r0, r3
 8005762:	f7fe fe80 	bl	8004466 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <prvCheckTasksWaitingTermination+0x54>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1e5a      	subs	r2, r3, #1
 800576c:	4b0b      	ldr	r3, [pc, #44]	@ (800579c <prvCheckTasksWaitingTermination+0x54>)
 800576e:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005770:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <prvCheckTasksWaitingTermination+0x58>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	1e5a      	subs	r2, r3, #1
 8005776:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <prvCheckTasksWaitingTermination+0x58>)
 8005778:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 800577a:	f000 fc33 	bl	8005fe4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f000 f80f 	bl	80057a4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005786:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <prvCheckTasksWaitingTermination+0x58>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e0      	bne.n	8005750 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46c0      	nop			@ (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b002      	add	sp, #8
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000c78 	.word	0x20000c78
 800579c:	20000ca4 	.word	0x20000ca4
 80057a0:	20000c8c 	.word	0x20000c8c

080057a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2259      	movs	r2, #89	@ 0x59
 80057b0:	5c9b      	ldrb	r3, [r3, r2]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <prvDeleteTCB+0x26>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	0018      	movs	r0, r3
 80057bc:	f000 fcea 	bl	8006194 <vPortFree>
                vPortFree( pxTCB );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 fce6 	bl	8006194 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80057c8:	e011      	b.n	80057ee <prvDeleteTCB+0x4a>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2259      	movs	r2, #89	@ 0x59
 80057ce:	5c9b      	ldrb	r3, [r3, r2]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d104      	bne.n	80057de <prvDeleteTCB+0x3a>
                vPortFree( pxTCB );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 fcdc 	bl	8006194 <vPortFree>
    }
 80057dc:	e007      	b.n	80057ee <prvDeleteTCB+0x4a>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2259      	movs	r2, #89	@ 0x59
 80057e2:	5c9b      	ldrb	r3, [r3, r2]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d002      	beq.n	80057ee <prvDeleteTCB+0x4a>
 80057e8:	b672      	cpsid	i
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	e7fd      	b.n	80057ea <prvDeleteTCB+0x46>
    }
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b002      	add	sp, #8
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057fc:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <prvResetNextTaskUnblockTime+0x2c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d104      	bne.n	8005810 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005806:	4b08      	ldr	r3, [pc, #32]	@ (8005828 <prvResetNextTaskUnblockTime+0x30>)
 8005808:	2201      	movs	r2, #1
 800580a:	4252      	negs	r2, r2
 800580c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800580e:	e005      	b.n	800581c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005810:	4b04      	ldr	r3, [pc, #16]	@ (8005824 <prvResetNextTaskUnblockTime+0x2c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b03      	ldr	r3, [pc, #12]	@ (8005828 <prvResetNextTaskUnblockTime+0x30>)
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	20000c5c 	.word	0x20000c5c
 8005828:	20000cc4 	.word	0x20000cc4

0800582c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005832:	4b0a      	ldr	r3, [pc, #40]	@ (800585c <xTaskGetSchedulerState+0x30>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800583a:	2301      	movs	r3, #1
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	e008      	b.n	8005852 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005840:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <xTaskGetSchedulerState+0x34>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005848:	2302      	movs	r3, #2
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e001      	b.n	8005852 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800584e:	2300      	movs	r3, #0
 8005850:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005852:	687b      	ldr	r3, [r7, #4]
    }
 8005854:	0018      	movs	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	b002      	add	sp, #8
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000cb0 	.word	0x20000cb0
 8005860:	20000ccc 	.word	0x20000ccc

08005864 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800586e:	4b2e      	ldr	r3, [pc, #184]	@ (8005928 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005874:	4b2d      	ldr	r3, [pc, #180]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3304      	adds	r3, #4
 800587a:	0018      	movs	r0, r3
 800587c:	f7fe fdf3 	bl	8004466 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3301      	adds	r3, #1
 8005884:	d124      	bne.n	80058d0 <prvAddCurrentTaskToDelayedList+0x6c>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d021      	beq.n	80058d0 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800588c:	4b28      	ldr	r3, [pc, #160]	@ (8005930 <prvAddCurrentTaskToDelayedList+0xcc>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	4b26      	ldr	r3, [pc, #152]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	609a      	str	r2, [r3, #8]
 800589a:	4b24      	ldr	r3, [pc, #144]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	6892      	ldr	r2, [r2, #8]
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	4b21      	ldr	r3, [pc, #132]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	3204      	adds	r2, #4
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	4b1e      	ldr	r3, [pc, #120]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	4b1c      	ldr	r3, [pc, #112]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1c      	ldr	r2, [pc, #112]	@ (8005930 <prvAddCurrentTaskToDelayedList+0xcc>)
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005930 <prvAddCurrentTaskToDelayedList+0xcc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <prvAddCurrentTaskToDelayedList+0xcc>)
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	46c0      	nop			@ (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80058ce:	e026      	b.n	800591e <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058d8:	4b14      	ldr	r3, [pc, #80]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d209      	bcs.n	80058fc <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058e8:	4b12      	ldr	r3, [pc, #72]	@ (8005934 <prvAddCurrentTaskToDelayedList+0xd0>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4b0f      	ldr	r3, [pc, #60]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3304      	adds	r3, #4
 80058f2:	0019      	movs	r1, r3
 80058f4:	0010      	movs	r0, r2
 80058f6:	f7fe fd80 	bl	80043fa <vListInsert>
}
 80058fa:	e010      	b.n	800591e <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005938 <prvAddCurrentTaskToDelayedList+0xd4>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b0a      	ldr	r3, [pc, #40]	@ (800592c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3304      	adds	r3, #4
 8005906:	0019      	movs	r1, r3
 8005908:	0010      	movs	r0, r2
 800590a:	f7fe fd76 	bl	80043fa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800590e:	4b0b      	ldr	r3, [pc, #44]	@ (800593c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	429a      	cmp	r2, r3
 8005916:	d202      	bcs.n	800591e <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8005918:	4b08      	ldr	r3, [pc, #32]	@ (800593c <prvAddCurrentTaskToDelayedList+0xd8>)
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]
}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b006      	add	sp, #24
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	20000ca8 	.word	0x20000ca8
 800592c:	200007d0 	.word	0x200007d0
 8005930:	20000c90 	.word	0x20000c90
 8005934:	20000c60 	.word	0x20000c60
 8005938:	20000c5c 	.word	0x20000c5c
 800593c:	20000cc4 	.word	0x20000cc4

08005940 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b089      	sub	sp, #36	@ 0x24
 8005944:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800594a:	f000 fa5d 	bl	8005e08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800594e:	4b18      	ldr	r3, [pc, #96]	@ (80059b0 <xTimerCreateTimerTask+0x70>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800595e:	003a      	movs	r2, r7
 8005960:	1d39      	adds	r1, r7, #4
 8005962:	2308      	movs	r3, #8
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	0018      	movs	r0, r3
 8005968:	f7fe fd06 	bl	8004378 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800596c:	683c      	ldr	r4, [r7, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4910      	ldr	r1, [pc, #64]	@ (80059b4 <xTimerCreateTimerTask+0x74>)
 8005974:	4810      	ldr	r0, [pc, #64]	@ (80059b8 <xTimerCreateTimerTask+0x78>)
 8005976:	9202      	str	r2, [sp, #8]
 8005978:	9301      	str	r3, [sp, #4]
 800597a:	2302      	movs	r3, #2
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	2300      	movs	r3, #0
 8005980:	0022      	movs	r2, r4
 8005982:	f7ff f85c 	bl	8004a3e <xTaskCreateStatic>
 8005986:	0002      	movs	r2, r0
 8005988:	4b0c      	ldr	r3, [pc, #48]	@ (80059bc <xTimerCreateTimerTask+0x7c>)
 800598a:	601a      	str	r2, [r3, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800598c:	4b0b      	ldr	r3, [pc, #44]	@ (80059bc <xTimerCreateTimerTask+0x7c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <xTimerCreateTimerTask+0x64>
 800599e:	b672      	cpsid	i
 80059a0:	46c0      	nop			@ (mov r8, r8)
 80059a2:	e7fd      	b.n	80059a0 <xTimerCreateTimerTask+0x60>
        return xReturn;
 80059a4:	68fb      	ldr	r3, [r7, #12]
    }
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b005      	add	sp, #20
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	20000d00 	.word	0x20000d00
 80059b4:	08006b30 	.word	0x08006b30
 80059b8:	08005a69 	.word	0x08005a69
 80059bc:	20000d04 	.word	0x20000d04

080059c0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80059cc:	e009      	b.n	80059e2 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	18d3      	adds	r3, r2, r3
 80059d6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	0010      	movs	r0, r2
 80059e0:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	18d1      	adds	r1, r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f8da 	bl	8005ba8 <prvInsertTimerInActiveList>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d1ea      	bne.n	80059ce <prvReloadTimer+0xe>
        }
    }
 80059f8:	46c0      	nop			@ (mov r8, r8)
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b004      	add	sp, #16
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0e:	4b15      	ldr	r3, [pc, #84]	@ (8005a64 <prvProcessExpiredTimer+0x60>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7fe fd22 	bl	8004466 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2228      	movs	r2, #40	@ 0x28
 8005a26:	5c9b      	ldrb	r3, [r3, r2]
 8005a28:	001a      	movs	r2, r3
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d006      	beq.n	8005a3e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7ff ffc2 	bl	80059c0 <prvReloadTimer>
 8005a3c:	e008      	b.n	8005a50 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2228      	movs	r2, #40	@ 0x28
 8005a42:	5c9b      	ldrb	r3, [r3, r2]
 8005a44:	2201      	movs	r2, #1
 8005a46:	4393      	bics	r3, r2
 8005a48:	b2d9      	uxtb	r1, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2228      	movs	r2, #40	@ 0x28
 8005a4e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	0010      	movs	r0, r2
 8005a58:	4798      	blx	r3
    }
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b004      	add	sp, #16
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	20000cf8 	.word	0x20000cf8

08005a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a70:	2308      	movs	r3, #8
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	0018      	movs	r0, r3
 8005a76:	f000 f855 	bl	8005b24 <prvGetNextExpireTime>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	0011      	movs	r1, r2
 8005a84:	0018      	movs	r0, r3
 8005a86:	f000 f805 	bl	8005a94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005a8a:	f000 f8cf 	bl	8005c2c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	e7ee      	b.n	8005a70 <prvTimerTask+0x8>
	...

08005a94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005a9e:	f7ff f9fd 	bl	8004e9c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 f85e 	bl	8005b68 <prvSampleTimeNow>
 8005aac:	0003      	movs	r3, r0
 8005aae:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d12b      	bne.n	8005b0e <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10c      	bne.n	8005ad6 <prvProcessTimerOrBlockTask+0x42>
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d808      	bhi.n	8005ad6 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8005ac4:	f7ff f9f6 	bl	8004eb4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	0011      	movs	r1, r2
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7ff ff98 	bl	8005a04 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005ad4:	e01d      	b.n	8005b12 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005adc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <prvProcessTimerOrBlockTask+0x88>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <prvProcessTimerOrBlockTask+0x56>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <prvProcessTimerOrBlockTask+0x58>
 8005aea:	2300      	movs	r3, #0
 8005aec:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005aee:	4b0c      	ldr	r3, [pc, #48]	@ (8005b20 <prvProcessTimerOrBlockTask+0x8c>)
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	0019      	movs	r1, r3
 8005afc:	f7fe ff6c 	bl	80049d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005b00:	f7ff f9d8 	bl	8004eb4 <xTaskResumeAll>
 8005b04:	1e03      	subs	r3, r0, #0
 8005b06:	d104      	bne.n	8005b12 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8005b08:	f000 fa4a 	bl	8005fa0 <vPortYield>
    }
 8005b0c:	e001      	b.n	8005b12 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8005b0e:	f7ff f9d1 	bl	8004eb4 <xTaskResumeAll>
    }
 8005b12:	46c0      	nop			@ (mov r8, r8)
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b004      	add	sp, #16
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	20000cfc 	.word	0x20000cfc
 8005b20:	20000d00 	.word	0x20000d00

08005b24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <prvGetNextExpireTime+0x40>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <prvGetNextExpireTime+0x16>
 8005b36:	2201      	movs	r2, #1
 8005b38:	e000      	b.n	8005b3c <prvGetNextExpireTime+0x18>
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b48:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <prvGetNextExpireTime+0x40>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e001      	b.n	8005b58 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005b58:	68fb      	ldr	r3, [r7, #12]
    }
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b004      	add	sp, #16
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	20000cf8 	.word	0x20000cf8

08005b68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005b70:	f7ff fa8a 	bl	8005088 <xTaskGetTickCount>
 8005b74:	0003      	movs	r3, r0
 8005b76:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8005b78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <prvSampleTimeNow+0x3c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d205      	bcs.n	8005b8e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8005b82:	f000 f919 	bl	8005db8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	e002      	b.n	8005b94 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005b94:	4b03      	ldr	r3, [pc, #12]	@ (8005ba4 <prvSampleTimeNow+0x3c>)
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
    }
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b004      	add	sp, #16
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000d08 	.word	0x20000d08

08005ba8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d812      	bhi.n	8005bf4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d302      	bcc.n	8005be2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e01b      	b.n	8005c1a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005be2:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <prvInsertTimerInActiveList+0x7c>)
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3304      	adds	r3, #4
 8005bea:	0019      	movs	r1, r3
 8005bec:	0010      	movs	r0, r2
 8005bee:	f7fe fc04 	bl	80043fa <vListInsert>
 8005bf2:	e012      	b.n	8005c1a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d206      	bcs.n	8005c0a <prvInsertTimerInActiveList+0x62>
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d302      	bcc.n	8005c0a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e007      	b.n	8005c1a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c0a:	4b07      	ldr	r3, [pc, #28]	@ (8005c28 <prvInsertTimerInActiveList+0x80>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	0019      	movs	r1, r3
 8005c14:	0010      	movs	r0, r2
 8005c16:	f7fe fbf0 	bl	80043fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005c1a:	697b      	ldr	r3, [r7, #20]
    }
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b006      	add	sp, #24
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000cfc 	.word	0x20000cfc
 8005c28:	20000cf8 	.word	0x20000cf8

08005c2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c32:	e0ad      	b.n	8005d90 <prvProcessReceivedCommands+0x164>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c34:	1d3b      	adds	r3, r7, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da10      	bge.n	8005c5e <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	3304      	adds	r3, #4
 8005c40:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <prvProcessReceivedCommands+0x22>
 8005c48:	b672      	cpsid	i
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	e7fd      	b.n	8005c4a <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	6858      	ldr	r0, [r3, #4]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	da00      	bge.n	8005c68 <prvProcessReceivedCommands+0x3c>
 8005c66:	e093      	b.n	8005d90 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7fe fbf3 	bl	8004466 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c80:	003b      	movs	r3, r7
 8005c82:	0018      	movs	r0, r3
 8005c84:	f7ff ff70 	bl	8005b68 <prvSampleTimeNow>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8005c8c:	1d3b      	adds	r3, r7, #4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b09      	cmp	r3, #9
 8005c92:	d900      	bls.n	8005c96 <prvProcessReceivedCommands+0x6a>
 8005c94:	e079      	b.n	8005d8a <prvProcessReceivedCommands+0x15e>
 8005c96:	009a      	lsls	r2, r3, #2
 8005c98:	4b45      	ldr	r3, [pc, #276]	@ (8005db0 <prvProcessReceivedCommands+0x184>)
 8005c9a:	18d3      	adds	r3, r2, r3
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2228      	movs	r2, #40	@ 0x28
 8005ca4:	5c9b      	ldrb	r3, [r3, r2]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	b2d9      	uxtb	r1, r3
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2228      	movs	r2, #40	@ 0x28
 8005cb0:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	18d1      	adds	r1, r2, r3
 8005cbc:	1d3b      	adds	r3, r7, #4
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	69b8      	ldr	r0, [r7, #24]
 8005cc4:	f7ff ff70 	bl	8005ba8 <prvInsertTimerInActiveList>
 8005cc8:	1e03      	subs	r3, r0, #0
 8005cca:	d060      	beq.n	8005d8e <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2228      	movs	r2, #40	@ 0x28
 8005cd0:	5c9b      	ldrb	r3, [r3, r2]
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d00a      	beq.n	8005cf0 <prvProcessReceivedCommands+0xc4>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	18d1      	adds	r1, r2, r3
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7ff fe69 	bl	80059c0 <prvReloadTimer>
 8005cee:	e008      	b.n	8005d02 <prvProcessReceivedCommands+0xd6>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2228      	movs	r2, #40	@ 0x28
 8005cf4:	5c9b      	ldrb	r3, [r3, r2]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	b2d9      	uxtb	r1, r3
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2228      	movs	r2, #40	@ 0x28
 8005d00:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0010      	movs	r0, r2
 8005d0a:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005d0c:	e03f      	b.n	8005d8e <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2228      	movs	r2, #40	@ 0x28
 8005d12:	5c9b      	ldrb	r3, [r3, r2]
 8005d14:	2201      	movs	r2, #1
 8005d16:	4393      	bics	r3, r2
 8005d18:	b2d9      	uxtb	r1, r3
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2228      	movs	r2, #40	@ 0x28
 8005d1e:	5499      	strb	r1, [r3, r2]
                        break;
 8005d20:	e036      	b.n	8005d90 <prvProcessReceivedCommands+0x164>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2228      	movs	r2, #40	@ 0x28
 8005d26:	5c9b      	ldrb	r3, [r3, r2]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b2d9      	uxtb	r1, r3
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2228      	movs	r2, #40	@ 0x28
 8005d32:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <prvProcessReceivedCommands+0x11e>
 8005d44:	b672      	cpsid	i
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	e7fd      	b.n	8005d46 <prvProcessReceivedCommands+0x11a>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	18d1      	adds	r1, r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	69b8      	ldr	r0, [r7, #24]
 8005d58:	f7ff ff26 	bl	8005ba8 <prvInsertTimerInActiveList>
                        break;
 8005d5c:	e018      	b.n	8005d90 <prvProcessReceivedCommands+0x164>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2228      	movs	r2, #40	@ 0x28
 8005d62:	5c9b      	ldrb	r3, [r3, r2]
 8005d64:	001a      	movs	r2, r3
 8005d66:	2302      	movs	r3, #2
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d104      	bne.n	8005d76 <prvProcessReceivedCommands+0x14a>
                            {
                                vPortFree( pxTimer );
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f000 fa10 	bl	8006194 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005d74:	e00c      	b.n	8005d90 <prvProcessReceivedCommands+0x164>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2228      	movs	r2, #40	@ 0x28
 8005d7a:	5c9b      	ldrb	r3, [r3, r2]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4393      	bics	r3, r2
 8005d80:	b2d9      	uxtb	r1, r3
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2228      	movs	r2, #40	@ 0x28
 8005d86:	5499      	strb	r1, [r3, r2]
                        break;
 8005d88:	e002      	b.n	8005d90 <prvProcessReceivedCommands+0x164>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	e000      	b.n	8005d90 <prvProcessReceivedCommands+0x164>
                        break;
 8005d8e:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d90:	4b08      	ldr	r3, [pc, #32]	@ (8005db4 <prvProcessReceivedCommands+0x188>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	1d39      	adds	r1, r7, #4
 8005d96:	2200      	movs	r2, #0
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7fe fc85 	bl	80046a8 <xQueueReceive>
 8005d9e:	1e03      	subs	r3, r0, #0
 8005da0:	d000      	beq.n	8005da4 <prvProcessReceivedCommands+0x178>
 8005da2:	e747      	b.n	8005c34 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005da4:	46c0      	nop			@ (mov r8, r8)
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b008      	add	sp, #32
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	08006c4c 	.word	0x08006c4c
 8005db4:	20000d00 	.word	0x20000d00

08005db8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dbe:	e00b      	b.n	8005dd8 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005e00 <prvSwitchTimerLists+0x48>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005dca:	2301      	movs	r3, #1
 8005dcc:	425a      	negs	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	0011      	movs	r1, r2
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff fe16 	bl	8005a04 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dd8:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <prvSwitchTimerLists+0x48>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1ee      	bne.n	8005dc0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <prvSwitchTimerLists+0x48>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005de8:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <prvSwitchTimerLists+0x4c>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <prvSwitchTimerLists+0x48>)
 8005dee:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8005df0:	4b04      	ldr	r3, [pc, #16]	@ (8005e04 <prvSwitchTimerLists+0x4c>)
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
    }
 8005df6:	46c0      	nop			@ (mov r8, r8)
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b002      	add	sp, #8
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	20000cf8 	.word	0x20000cf8
 8005e04:	20000cfc 	.word	0x20000cfc

08005e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005e0e:	f000 f8d7 	bl	8005fc0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005e12:	4b16      	ldr	r3, [pc, #88]	@ (8005e6c <prvCheckForValidListAndQueue+0x64>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d123      	bne.n	8005e62 <prvCheckForValidListAndQueue+0x5a>
            {
                vListInitialise( &xActiveTimerList1 );
 8005e1a:	4b15      	ldr	r3, [pc, #84]	@ (8005e70 <prvCheckForValidListAndQueue+0x68>)
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fe fac3 	bl	80043a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005e22:	4b14      	ldr	r3, [pc, #80]	@ (8005e74 <prvCheckForValidListAndQueue+0x6c>)
 8005e24:	0018      	movs	r0, r3
 8005e26:	f7fe fabf 	bl	80043a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005e2a:	4b13      	ldr	r3, [pc, #76]	@ (8005e78 <prvCheckForValidListAndQueue+0x70>)
 8005e2c:	4a10      	ldr	r2, [pc, #64]	@ (8005e70 <prvCheckForValidListAndQueue+0x68>)
 8005e2e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005e30:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <prvCheckForValidListAndQueue+0x74>)
 8005e32:	4a10      	ldr	r2, [pc, #64]	@ (8005e74 <prvCheckForValidListAndQueue+0x6c>)
 8005e34:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e36:	4b12      	ldr	r3, [pc, #72]	@ (8005e80 <prvCheckForValidListAndQueue+0x78>)
 8005e38:	4a12      	ldr	r2, [pc, #72]	@ (8005e84 <prvCheckForValidListAndQueue+0x7c>)
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	9100      	str	r1, [sp, #0]
 8005e3e:	2110      	movs	r1, #16
 8005e40:	200a      	movs	r0, #10
 8005e42:	f7fe fbc3 	bl	80045cc <xQueueGenericCreateStatic>
 8005e46:	0002      	movs	r2, r0
 8005e48:	4b08      	ldr	r3, [pc, #32]	@ (8005e6c <prvCheckForValidListAndQueue+0x64>)
 8005e4a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005e4c:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <prvCheckForValidListAndQueue+0x64>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <prvCheckForValidListAndQueue+0x5a>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e54:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <prvCheckForValidListAndQueue+0x64>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a0b      	ldr	r2, [pc, #44]	@ (8005e88 <prvCheckForValidListAndQueue+0x80>)
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7fe fd75 	bl	800494c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005e62:	f000 f8bf 	bl	8005fe4 <vPortExitCritical>
    }
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000d00 	.word	0x20000d00
 8005e70:	20000cd0 	.word	0x20000cd0
 8005e74:	20000ce4 	.word	0x20000ce4
 8005e78:	20000cf8 	.word	0x20000cf8
 8005e7c:	20000cfc 	.word	0x20000cfc
 8005e80:	20000dac 	.word	0x20000dac
 8005e84:	20000d0c 	.word	0x20000d0c
 8005e88:	08006b38 	.word	0x08006b38

08005e8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3b04      	subs	r3, #4
 8005e9c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2280      	movs	r2, #128	@ 0x80
 8005ea2:	0452      	lsls	r2, r2, #17
 8005ea4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3b04      	subs	r3, #4
 8005eaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3b04      	subs	r3, #4
 8005eb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8005eb8:	4a08      	ldr	r2, [pc, #32]	@ (8005edc <pxPortInitialiseStack+0x50>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3b14      	subs	r3, #20
 8005ec2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b20      	subs	r3, #32
 8005ece:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
}
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b004      	add	sp, #16
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	08005ee1 	.word	0x08005ee1

08005ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005eea:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <prvTaskExitError+0x2c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	d002      	beq.n	8005ef8 <prvTaskExitError+0x18>
 8005ef2:	b672      	cpsid	i
 8005ef4:	46c0      	nop			@ (mov r8, r8)
 8005ef6:	e7fd      	b.n	8005ef4 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8005ef8:	b672      	cpsid	i

    while( ulDummy == 0 )
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0fc      	beq.n	8005efc <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	46c0      	nop			@ (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000024 	.word	0x20000024

08005f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8005f14:	46c0      	nop			@ (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	0000      	movs	r0, r0
 8005f1c:	0000      	movs	r0, r0
	...

08005f20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8005f20:	4a0b      	ldr	r2, [pc, #44]	@ (8005f50 <pxCurrentTCBConst2>)
 8005f22:	6813      	ldr	r3, [r2, #0]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	3020      	adds	r0, #32
 8005f28:	f380 8809 	msr	PSP, r0
 8005f2c:	2002      	movs	r0, #2
 8005f2e:	f380 8814 	msr	CONTROL, r0
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005f38:	46ae      	mov	lr, r5
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	bc04      	pop	{r2}
 8005f3e:	b662      	cpsie	i
 8005f40:	4718      	bx	r3
 8005f42:	46c0      	nop			@ (mov r8, r8)
 8005f44:	46c0      	nop			@ (mov r8, r8)
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	46c0      	nop			@ (mov r8, r8)
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	46c0      	nop			@ (mov r8, r8)
 8005f4e:	46c0      	nop			@ (mov r8, r8)

08005f50 <pxCurrentTCBConst2>:
 8005f50:	200007d0 	.word	0x200007d0
        "   bx   r3                     \n"/* Finally, jump to the user defined task code. */
        "                               \n"
        "   .align 4                    \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB   "
        );
}
 8005f54:	46c0      	nop			@ (mov r8, r8)
 8005f56:	46c0      	nop			@ (mov r8, r8)

08005f58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f98 <xPortStartScheduler+0x40>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <xPortStartScheduler+0x40>)
 8005f62:	21ff      	movs	r1, #255	@ 0xff
 8005f64:	0409      	lsls	r1, r1, #16
 8005f66:	430a      	orrs	r2, r1
 8005f68:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f98 <xPortStartScheduler+0x40>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <xPortStartScheduler+0x40>)
 8005f70:	21ff      	movs	r1, #255	@ 0xff
 8005f72:	0609      	lsls	r1, r1, #24
 8005f74:	430a      	orrs	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005f78:	f000 f898 	bl	80060ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005f7c:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <xPortStartScheduler+0x44>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8005f82:	f7ff ffcd 	bl	8005f20 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005f86:	f7ff f999 	bl	80052bc <vTaskSwitchContext>
    prvTaskExitError();
 8005f8a:	f7ff ffa9 	bl	8005ee0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	46c0      	nop			@ (mov r8, r8)
 8005f98:	e000ed20 	.word	0xe000ed20
 8005f9c:	20000024 	.word	0x20000024

08005fa0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fa4:	4b05      	ldr	r3, [pc, #20]	@ (8005fbc <vPortYield+0x1c>)
 8005fa6:	2280      	movs	r2, #128	@ 0x80
 8005fa8:	0552      	lsls	r2, r2, #21
 8005faa:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8005fac:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005fb0:	f3bf 8f6f 	isb	sy
}
 8005fb4:	46c0      	nop			@ (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	e000ed04 	.word	0xe000ed04

08005fc0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005fc4:	b672      	cpsid	i
    uxCriticalNesting++;
 8005fc6:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <vPortEnterCritical+0x20>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <vPortEnterCritical+0x20>)
 8005fce:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8005fd0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005fd4:	f3bf 8f6f 	isb	sy
}
 8005fd8:	46c0      	nop			@ (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	20000024 	.word	0x20000024

08005fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005fe8:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <vPortExitCritical+0x2c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <vPortExitCritical+0x12>
 8005ff0:	b672      	cpsid	i
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	e7fd      	b.n	8005ff2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005ff6:	4b06      	ldr	r3, [pc, #24]	@ (8006010 <vPortExitCritical+0x2c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	4b04      	ldr	r3, [pc, #16]	@ (8006010 <vPortExitCritical+0x2c>)
 8005ffe:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8006000:	4b03      	ldr	r3, [pc, #12]	@ (8006010 <vPortExitCritical+0x2c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d100      	bne.n	800600a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8006008:	b662      	cpsie	i
    }
}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000024 	.word	0x20000024

08006014 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8006014:	f3ef 8010 	mrs	r0, PRIMASK
 8006018:	b672      	cpsid	i
 800601a:	4770      	bx	lr
        " mrs r0, PRIMASK   \n"
        " cpsid i           \n"
        " bx lr               "
        ::: "memory"
        );
}
 800601c:	46c0      	nop			@ (mov r8, r8)
 800601e:	0018      	movs	r0, r3

08006020 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8006020:	f380 8810 	msr	PRIMASK, r0
 8006024:	4770      	bx	lr
        " msr PRIMASK, r0   \n"
        " bx lr               "
        ::: "memory"
        );
}
 8006026:	46c0      	nop			@ (mov r8, r8)
	...

08006030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006030:	f3ef 8009 	mrs	r0, PSP
 8006034:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <pxCurrentTCBConst>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	3820      	subs	r0, #32
 800603a:	6010      	str	r0, [r2, #0]
 800603c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800603e:	4644      	mov	r4, r8
 8006040:	464d      	mov	r5, r9
 8006042:	4656      	mov	r6, sl
 8006044:	465f      	mov	r7, fp
 8006046:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006048:	b508      	push	{r3, lr}
 800604a:	b672      	cpsid	i
 800604c:	f7ff f936 	bl	80052bc <vTaskSwitchContext>
 8006050:	b662      	cpsie	i
 8006052:	bc0c      	pop	{r2, r3}
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	6808      	ldr	r0, [r1, #0]
 8006058:	3010      	adds	r0, #16
 800605a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800605c:	46a0      	mov	r8, r4
 800605e:	46a9      	mov	r9, r5
 8006060:	46b2      	mov	sl, r6
 8006062:	46bb      	mov	fp, r7
 8006064:	f380 8809 	msr	PSP, r0
 8006068:	3820      	subs	r0, #32
 800606a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800606c:	4718      	bx	r3
 800606e:	46c0      	nop			@ (mov r8, r8)

08006070 <pxCurrentTCBConst>:
 8006070:	200007d0 	.word	0x200007d0
        "   bx r3                               \n"
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB    "
    );
}
 8006074:	46c0      	nop			@ (mov r8, r8)
 8006076:	46c0      	nop			@ (mov r8, r8)

08006078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800607e:	f7ff ffc9 	bl	8006014 <ulSetInterruptMaskFromISR>
 8006082:	0003      	movs	r3, r0
 8006084:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006086:	f7ff f80d 	bl	80050a4 <xTaskIncrementTick>
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d003      	beq.n	8006096 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <xPortSysTickHandler+0x30>)
 8006090:	2280      	movs	r2, #128	@ 0x80
 8006092:	0552      	lsls	r2, r2, #21
 8006094:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f7ff ffc1 	bl	8006020 <vClearInterruptMaskFromISR>
}
 800609e:	46c0      	nop			@ (mov r8, r8)
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b002      	add	sp, #8
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <vPortSetupTimerInterrupt+0x38>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060bc:	4b0a      	ldr	r3, [pc, #40]	@ (80060e8 <vPortSetupTimerInterrupt+0x3c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	22fa      	movs	r2, #250	@ 0xfa
 80060c2:	0091      	lsls	r1, r2, #2
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fa f831 	bl	800012c <__udivsi3>
 80060ca:	0003      	movs	r3, r0
 80060cc:	001a      	movs	r2, r3
 80060ce:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <vPortSetupTimerInterrupt+0x40>)
 80060d0:	3a01      	subs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060d4:	4b02      	ldr	r3, [pc, #8]	@ (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060d6:	2207      	movs	r2, #7
 80060d8:	601a      	str	r2, [r3, #0]
}
 80060da:	46c0      	nop			@ (mov r8, r8)
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	e000e010 	.word	0xe000e010
 80060e4:	e000e018 	.word	0xe000e018
 80060e8:	20000000 	.word	0x20000000
 80060ec:	e000e014 	.word	0xe000e014

080060f0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2207      	movs	r2, #7
 8006100:	4013      	ands	r3, r2
 8006102:	d00e      	beq.n	8006122 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2207      	movs	r2, #7
 8006108:	4393      	bics	r3, r2
 800610a:	3308      	adds	r3, #8
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	d205      	bcs.n	800611e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2207      	movs	r2, #7
 8006116:	4393      	bics	r3, r2
 8006118:	3308      	adds	r3, #8
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	e001      	b.n	8006122 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8006122:	f7fe febb 	bl	8004e9c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8006126:	4b17      	ldr	r3, [pc, #92]	@ (8006184 <pvPortMalloc+0x94>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d105      	bne.n	800613a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800612e:	4b16      	ldr	r3, [pc, #88]	@ (8006188 <pvPortMalloc+0x98>)
 8006130:	2207      	movs	r2, #7
 8006132:	4393      	bics	r3, r2
 8006134:	001a      	movs	r2, r3
 8006136:	4b13      	ldr	r3, [pc, #76]	@ (8006184 <pvPortMalloc+0x94>)
 8006138:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01a      	beq.n	8006176 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8006140:	4b12      	ldr	r3, [pc, #72]	@ (800618c <pvPortMalloc+0x9c>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8006148:	4a11      	ldr	r2, [pc, #68]	@ (8006190 <pvPortMalloc+0xa0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d813      	bhi.n	8006176 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800614e:	4b0f      	ldr	r3, [pc, #60]	@ (800618c <pvPortMalloc+0x9c>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	18d2      	adds	r2, r2, r3
 8006156:	4b0d      	ldr	r3, [pc, #52]	@ (800618c <pvPortMalloc+0x9c>)
 8006158:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800615a:	429a      	cmp	r2, r3
 800615c:	d90b      	bls.n	8006176 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800615e:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <pvPortMalloc+0x94>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b0a      	ldr	r3, [pc, #40]	@ (800618c <pvPortMalloc+0x9c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	18d3      	adds	r3, r2, r3
 8006168:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800616a:	4b08      	ldr	r3, [pc, #32]	@ (800618c <pvPortMalloc+0x9c>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	18d2      	adds	r2, r2, r3
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <pvPortMalloc+0x9c>)
 8006174:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006176:	f7fe fe9d 	bl	8004eb4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800617a:	68fb      	ldr	r3, [r7, #12]
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20001e00 	.word	0x20001e00
 8006188:	20000e03 	.word	0x20000e03
 800618c:	20001dfc 	.word	0x20001dfc
 8006190:	00000ff7 	.word	0x00000ff7

08006194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <vPortFree+0x14>
 80061a2:	b672      	cpsid	i
 80061a4:	46c0      	nop			@ (mov r8, r8)
 80061a6:	e7fd      	b.n	80061a4 <vPortFree+0x10>
}
 80061a8:	46c0      	nop			@ (mov r8, r8)
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b002      	add	sp, #8
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <siprintf>:
 80061b0:	b40e      	push	{r1, r2, r3}
 80061b2:	b510      	push	{r4, lr}
 80061b4:	2400      	movs	r4, #0
 80061b6:	490c      	ldr	r1, [pc, #48]	@ (80061e8 <siprintf+0x38>)
 80061b8:	b09d      	sub	sp, #116	@ 0x74
 80061ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061bc:	9002      	str	r0, [sp, #8]
 80061be:	9006      	str	r0, [sp, #24]
 80061c0:	9107      	str	r1, [sp, #28]
 80061c2:	9104      	str	r1, [sp, #16]
 80061c4:	4809      	ldr	r0, [pc, #36]	@ (80061ec <siprintf+0x3c>)
 80061c6:	490a      	ldr	r1, [pc, #40]	@ (80061f0 <siprintf+0x40>)
 80061c8:	cb04      	ldmia	r3!, {r2}
 80061ca:	9105      	str	r1, [sp, #20]
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	a902      	add	r1, sp, #8
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061d4:	f000 f9a8 	bl	8006528 <_svfiprintf_r>
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	701c      	strb	r4, [r3, #0]
 80061dc:	b01d      	add	sp, #116	@ 0x74
 80061de:	bc10      	pop	{r4}
 80061e0:	bc08      	pop	{r3}
 80061e2:	b003      	add	sp, #12
 80061e4:	4718      	bx	r3
 80061e6:	46c0      	nop			@ (mov r8, r8)
 80061e8:	7fffffff 	.word	0x7fffffff
 80061ec:	20000028 	.word	0x20000028
 80061f0:	ffff0208 	.word	0xffff0208

080061f4 <memset>:
 80061f4:	0003      	movs	r3, r0
 80061f6:	1882      	adds	r2, r0, r2
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d100      	bne.n	80061fe <memset+0xa>
 80061fc:	4770      	bx	lr
 80061fe:	7019      	strb	r1, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	e7f9      	b.n	80061f8 <memset+0x4>

08006204 <__errno>:
 8006204:	4b01      	ldr	r3, [pc, #4]	@ (800620c <__errno+0x8>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	4770      	bx	lr
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	20000028 	.word	0x20000028

08006210 <__libc_init_array>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	2600      	movs	r6, #0
 8006214:	4c0c      	ldr	r4, [pc, #48]	@ (8006248 <__libc_init_array+0x38>)
 8006216:	4d0d      	ldr	r5, [pc, #52]	@ (800624c <__libc_init_array+0x3c>)
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	42a6      	cmp	r6, r4
 800621e:	d109      	bne.n	8006234 <__libc_init_array+0x24>
 8006220:	2600      	movs	r6, #0
 8006222:	f000 fc63 	bl	8006aec <_init>
 8006226:	4c0a      	ldr	r4, [pc, #40]	@ (8006250 <__libc_init_array+0x40>)
 8006228:	4d0a      	ldr	r5, [pc, #40]	@ (8006254 <__libc_init_array+0x44>)
 800622a:	1b64      	subs	r4, r4, r5
 800622c:	10a4      	asrs	r4, r4, #2
 800622e:	42a6      	cmp	r6, r4
 8006230:	d105      	bne.n	800623e <__libc_init_array+0x2e>
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	00b3      	lsls	r3, r6, #2
 8006236:	58eb      	ldr	r3, [r5, r3]
 8006238:	4798      	blx	r3
 800623a:	3601      	adds	r6, #1
 800623c:	e7ee      	b.n	800621c <__libc_init_array+0xc>
 800623e:	00b3      	lsls	r3, r6, #2
 8006240:	58eb      	ldr	r3, [r5, r3]
 8006242:	4798      	blx	r3
 8006244:	3601      	adds	r6, #1
 8006246:	e7f2      	b.n	800622e <__libc_init_array+0x1e>
 8006248:	08006ca8 	.word	0x08006ca8
 800624c:	08006ca8 	.word	0x08006ca8
 8006250:	08006cac 	.word	0x08006cac
 8006254:	08006ca8 	.word	0x08006ca8

08006258 <__retarget_lock_acquire_recursive>:
 8006258:	4770      	bx	lr

0800625a <__retarget_lock_release_recursive>:
 800625a:	4770      	bx	lr

0800625c <memcpy>:
 800625c:	2300      	movs	r3, #0
 800625e:	b510      	push	{r4, lr}
 8006260:	429a      	cmp	r2, r3
 8006262:	d100      	bne.n	8006266 <memcpy+0xa>
 8006264:	bd10      	pop	{r4, pc}
 8006266:	5ccc      	ldrb	r4, [r1, r3]
 8006268:	54c4      	strb	r4, [r0, r3]
 800626a:	3301      	adds	r3, #1
 800626c:	e7f8      	b.n	8006260 <memcpy+0x4>
	...

08006270 <_free_r>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	0005      	movs	r5, r0
 8006274:	1e0c      	subs	r4, r1, #0
 8006276:	d010      	beq.n	800629a <_free_r+0x2a>
 8006278:	3c04      	subs	r4, #4
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	da00      	bge.n	8006282 <_free_r+0x12>
 8006280:	18e4      	adds	r4, r4, r3
 8006282:	0028      	movs	r0, r5
 8006284:	f000 f8e0 	bl	8006448 <__malloc_lock>
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <_free_r+0x90>)
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <_free_r+0x2c>
 8006290:	6063      	str	r3, [r4, #4]
 8006292:	6014      	str	r4, [r2, #0]
 8006294:	0028      	movs	r0, r5
 8006296:	f000 f8df 	bl	8006458 <__malloc_unlock>
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	42a3      	cmp	r3, r4
 800629e:	d908      	bls.n	80062b2 <_free_r+0x42>
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	1821      	adds	r1, r4, r0
 80062a4:	428b      	cmp	r3, r1
 80062a6:	d1f3      	bne.n	8006290 <_free_r+0x20>
 80062a8:	6819      	ldr	r1, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	1809      	adds	r1, r1, r0
 80062ae:	6021      	str	r1, [r4, #0]
 80062b0:	e7ee      	b.n	8006290 <_free_r+0x20>
 80062b2:	001a      	movs	r2, r3
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <_free_r+0x4e>
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	d9f9      	bls.n	80062b2 <_free_r+0x42>
 80062be:	6811      	ldr	r1, [r2, #0]
 80062c0:	1850      	adds	r0, r2, r1
 80062c2:	42a0      	cmp	r0, r4
 80062c4:	d10b      	bne.n	80062de <_free_r+0x6e>
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	1809      	adds	r1, r1, r0
 80062ca:	1850      	adds	r0, r2, r1
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	4283      	cmp	r3, r0
 80062d0:	d1e0      	bne.n	8006294 <_free_r+0x24>
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	1841      	adds	r1, r0, r1
 80062d8:	6011      	str	r1, [r2, #0]
 80062da:	6053      	str	r3, [r2, #4]
 80062dc:	e7da      	b.n	8006294 <_free_r+0x24>
 80062de:	42a0      	cmp	r0, r4
 80062e0:	d902      	bls.n	80062e8 <_free_r+0x78>
 80062e2:	230c      	movs	r3, #12
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	e7d5      	b.n	8006294 <_free_r+0x24>
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	1821      	adds	r1, r4, r0
 80062ec:	428b      	cmp	r3, r1
 80062ee:	d103      	bne.n	80062f8 <_free_r+0x88>
 80062f0:	6819      	ldr	r1, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	1809      	adds	r1, r1, r0
 80062f6:	6021      	str	r1, [r4, #0]
 80062f8:	6063      	str	r3, [r4, #4]
 80062fa:	6054      	str	r4, [r2, #4]
 80062fc:	e7ca      	b.n	8006294 <_free_r+0x24>
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	20001f48 	.word	0x20001f48

08006304 <sbrk_aligned>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4e0f      	ldr	r6, [pc, #60]	@ (8006344 <sbrk_aligned+0x40>)
 8006308:	000d      	movs	r5, r1
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	0004      	movs	r4, r0
 800630e:	2900      	cmp	r1, #0
 8006310:	d102      	bne.n	8006318 <sbrk_aligned+0x14>
 8006312:	f000 fb95 	bl	8006a40 <_sbrk_r>
 8006316:	6030      	str	r0, [r6, #0]
 8006318:	0029      	movs	r1, r5
 800631a:	0020      	movs	r0, r4
 800631c:	f000 fb90 	bl	8006a40 <_sbrk_r>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d103      	bne.n	800632c <sbrk_aligned+0x28>
 8006324:	2501      	movs	r5, #1
 8006326:	426d      	negs	r5, r5
 8006328:	0028      	movs	r0, r5
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	2303      	movs	r3, #3
 800632e:	1cc5      	adds	r5, r0, #3
 8006330:	439d      	bics	r5, r3
 8006332:	42a8      	cmp	r0, r5
 8006334:	d0f8      	beq.n	8006328 <sbrk_aligned+0x24>
 8006336:	1a29      	subs	r1, r5, r0
 8006338:	0020      	movs	r0, r4
 800633a:	f000 fb81 	bl	8006a40 <_sbrk_r>
 800633e:	3001      	adds	r0, #1
 8006340:	d1f2      	bne.n	8006328 <sbrk_aligned+0x24>
 8006342:	e7ef      	b.n	8006324 <sbrk_aligned+0x20>
 8006344:	20001f44 	.word	0x20001f44

08006348 <_malloc_r>:
 8006348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634a:	2203      	movs	r2, #3
 800634c:	1ccb      	adds	r3, r1, #3
 800634e:	4393      	bics	r3, r2
 8006350:	3308      	adds	r3, #8
 8006352:	0005      	movs	r5, r0
 8006354:	001f      	movs	r7, r3
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d234      	bcs.n	80063c4 <_malloc_r+0x7c>
 800635a:	270c      	movs	r7, #12
 800635c:	42b9      	cmp	r1, r7
 800635e:	d833      	bhi.n	80063c8 <_malloc_r+0x80>
 8006360:	0028      	movs	r0, r5
 8006362:	f000 f871 	bl	8006448 <__malloc_lock>
 8006366:	4e37      	ldr	r6, [pc, #220]	@ (8006444 <_malloc_r+0xfc>)
 8006368:	6833      	ldr	r3, [r6, #0]
 800636a:	001c      	movs	r4, r3
 800636c:	2c00      	cmp	r4, #0
 800636e:	d12f      	bne.n	80063d0 <_malloc_r+0x88>
 8006370:	0039      	movs	r1, r7
 8006372:	0028      	movs	r0, r5
 8006374:	f7ff ffc6 	bl	8006304 <sbrk_aligned>
 8006378:	0004      	movs	r4, r0
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d15f      	bne.n	800643e <_malloc_r+0xf6>
 800637e:	6834      	ldr	r4, [r6, #0]
 8006380:	9400      	str	r4, [sp, #0]
 8006382:	9b00      	ldr	r3, [sp, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d14a      	bne.n	800641e <_malloc_r+0xd6>
 8006388:	2c00      	cmp	r4, #0
 800638a:	d052      	beq.n	8006432 <_malloc_r+0xea>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	0028      	movs	r0, r5
 8006390:	18e3      	adds	r3, r4, r3
 8006392:	9900      	ldr	r1, [sp, #0]
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	f000 fb53 	bl	8006a40 <_sbrk_r>
 800639a:	9b01      	ldr	r3, [sp, #4]
 800639c:	4283      	cmp	r3, r0
 800639e:	d148      	bne.n	8006432 <_malloc_r+0xea>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	0028      	movs	r0, r5
 80063a4:	1aff      	subs	r7, r7, r3
 80063a6:	0039      	movs	r1, r7
 80063a8:	f7ff ffac 	bl	8006304 <sbrk_aligned>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d040      	beq.n	8006432 <_malloc_r+0xea>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	19db      	adds	r3, r3, r7
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	6833      	ldr	r3, [r6, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	d133      	bne.n	8006426 <_malloc_r+0xde>
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	e019      	b.n	80063f8 <_malloc_r+0xb0>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dac9      	bge.n	800635c <_malloc_r+0x14>
 80063c8:	230c      	movs	r3, #12
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	2000      	movs	r0, #0
 80063ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063d0:	6821      	ldr	r1, [r4, #0]
 80063d2:	1bc9      	subs	r1, r1, r7
 80063d4:	d420      	bmi.n	8006418 <_malloc_r+0xd0>
 80063d6:	290b      	cmp	r1, #11
 80063d8:	d90a      	bls.n	80063f0 <_malloc_r+0xa8>
 80063da:	19e2      	adds	r2, r4, r7
 80063dc:	6027      	str	r7, [r4, #0]
 80063de:	42a3      	cmp	r3, r4
 80063e0:	d104      	bne.n	80063ec <_malloc_r+0xa4>
 80063e2:	6032      	str	r2, [r6, #0]
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	6011      	str	r1, [r2, #0]
 80063e8:	6053      	str	r3, [r2, #4]
 80063ea:	e005      	b.n	80063f8 <_malloc_r+0xb0>
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	e7f9      	b.n	80063e4 <_malloc_r+0x9c>
 80063f0:	6862      	ldr	r2, [r4, #4]
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	d10e      	bne.n	8006414 <_malloc_r+0xcc>
 80063f6:	6032      	str	r2, [r6, #0]
 80063f8:	0028      	movs	r0, r5
 80063fa:	f000 f82d 	bl	8006458 <__malloc_unlock>
 80063fe:	0020      	movs	r0, r4
 8006400:	2207      	movs	r2, #7
 8006402:	300b      	adds	r0, #11
 8006404:	1d23      	adds	r3, r4, #4
 8006406:	4390      	bics	r0, r2
 8006408:	1ac2      	subs	r2, r0, r3
 800640a:	4298      	cmp	r0, r3
 800640c:	d0df      	beq.n	80063ce <_malloc_r+0x86>
 800640e:	1a1b      	subs	r3, r3, r0
 8006410:	50a3      	str	r3, [r4, r2]
 8006412:	e7dc      	b.n	80063ce <_malloc_r+0x86>
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	e7ef      	b.n	80063f8 <_malloc_r+0xb0>
 8006418:	0023      	movs	r3, r4
 800641a:	6864      	ldr	r4, [r4, #4]
 800641c:	e7a6      	b.n	800636c <_malloc_r+0x24>
 800641e:	9c00      	ldr	r4, [sp, #0]
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	e7ad      	b.n	8006382 <_malloc_r+0x3a>
 8006426:	001a      	movs	r2, r3
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	42a3      	cmp	r3, r4
 800642c:	d1fb      	bne.n	8006426 <_malloc_r+0xde>
 800642e:	2300      	movs	r3, #0
 8006430:	e7da      	b.n	80063e8 <_malloc_r+0xa0>
 8006432:	230c      	movs	r3, #12
 8006434:	0028      	movs	r0, r5
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f000 f80e 	bl	8006458 <__malloc_unlock>
 800643c:	e7c6      	b.n	80063cc <_malloc_r+0x84>
 800643e:	6007      	str	r7, [r0, #0]
 8006440:	e7da      	b.n	80063f8 <_malloc_r+0xb0>
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	20001f48 	.word	0x20001f48

08006448 <__malloc_lock>:
 8006448:	b510      	push	{r4, lr}
 800644a:	4802      	ldr	r0, [pc, #8]	@ (8006454 <__malloc_lock+0xc>)
 800644c:	f7ff ff04 	bl	8006258 <__retarget_lock_acquire_recursive>
 8006450:	bd10      	pop	{r4, pc}
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	20001f40 	.word	0x20001f40

08006458 <__malloc_unlock>:
 8006458:	b510      	push	{r4, lr}
 800645a:	4802      	ldr	r0, [pc, #8]	@ (8006464 <__malloc_unlock+0xc>)
 800645c:	f7ff fefd 	bl	800625a <__retarget_lock_release_recursive>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	20001f40 	.word	0x20001f40

08006468 <__ssputs_r>:
 8006468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646a:	688e      	ldr	r6, [r1, #8]
 800646c:	b085      	sub	sp, #20
 800646e:	001f      	movs	r7, r3
 8006470:	000c      	movs	r4, r1
 8006472:	680b      	ldr	r3, [r1, #0]
 8006474:	9002      	str	r0, [sp, #8]
 8006476:	9203      	str	r2, [sp, #12]
 8006478:	42be      	cmp	r6, r7
 800647a:	d830      	bhi.n	80064de <__ssputs_r+0x76>
 800647c:	210c      	movs	r1, #12
 800647e:	5e62      	ldrsh	r2, [r4, r1]
 8006480:	2190      	movs	r1, #144	@ 0x90
 8006482:	00c9      	lsls	r1, r1, #3
 8006484:	420a      	tst	r2, r1
 8006486:	d028      	beq.n	80064da <__ssputs_r+0x72>
 8006488:	2003      	movs	r0, #3
 800648a:	6921      	ldr	r1, [r4, #16]
 800648c:	1a5b      	subs	r3, r3, r1
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	6963      	ldr	r3, [r4, #20]
 8006492:	4343      	muls	r3, r0
 8006494:	9801      	ldr	r0, [sp, #4]
 8006496:	0fdd      	lsrs	r5, r3, #31
 8006498:	18ed      	adds	r5, r5, r3
 800649a:	1c7b      	adds	r3, r7, #1
 800649c:	181b      	adds	r3, r3, r0
 800649e:	106d      	asrs	r5, r5, #1
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	d900      	bls.n	80064a6 <__ssputs_r+0x3e>
 80064a4:	001d      	movs	r5, r3
 80064a6:	0552      	lsls	r2, r2, #21
 80064a8:	d528      	bpl.n	80064fc <__ssputs_r+0x94>
 80064aa:	0029      	movs	r1, r5
 80064ac:	9802      	ldr	r0, [sp, #8]
 80064ae:	f7ff ff4b 	bl	8006348 <_malloc_r>
 80064b2:	1e06      	subs	r6, r0, #0
 80064b4:	d02c      	beq.n	8006510 <__ssputs_r+0xa8>
 80064b6:	9a01      	ldr	r2, [sp, #4]
 80064b8:	6921      	ldr	r1, [r4, #16]
 80064ba:	f7ff fecf 	bl	800625c <memcpy>
 80064be:	89a2      	ldrh	r2, [r4, #12]
 80064c0:	4b18      	ldr	r3, [pc, #96]	@ (8006524 <__ssputs_r+0xbc>)
 80064c2:	401a      	ands	r2, r3
 80064c4:	2380      	movs	r3, #128	@ 0x80
 80064c6:	4313      	orrs	r3, r2
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	9b01      	ldr	r3, [sp, #4]
 80064cc:	6126      	str	r6, [r4, #16]
 80064ce:	18f6      	adds	r6, r6, r3
 80064d0:	6026      	str	r6, [r4, #0]
 80064d2:	003e      	movs	r6, r7
 80064d4:	6165      	str	r5, [r4, #20]
 80064d6:	1aed      	subs	r5, r5, r3
 80064d8:	60a5      	str	r5, [r4, #8]
 80064da:	42be      	cmp	r6, r7
 80064dc:	d900      	bls.n	80064e0 <__ssputs_r+0x78>
 80064de:	003e      	movs	r6, r7
 80064e0:	0032      	movs	r2, r6
 80064e2:	9903      	ldr	r1, [sp, #12]
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	f000 fa99 	bl	8006a1c <memmove>
 80064ea:	2000      	movs	r0, #0
 80064ec:	68a3      	ldr	r3, [r4, #8]
 80064ee:	1b9b      	subs	r3, r3, r6
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	199b      	adds	r3, r3, r6
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	b005      	add	sp, #20
 80064fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064fc:	002a      	movs	r2, r5
 80064fe:	9802      	ldr	r0, [sp, #8]
 8006500:	f000 fabb 	bl	8006a7a <_realloc_r>
 8006504:	1e06      	subs	r6, r0, #0
 8006506:	d1e0      	bne.n	80064ca <__ssputs_r+0x62>
 8006508:	6921      	ldr	r1, [r4, #16]
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	f7ff feb0 	bl	8006270 <_free_r>
 8006510:	230c      	movs	r3, #12
 8006512:	2001      	movs	r0, #1
 8006514:	9a02      	ldr	r2, [sp, #8]
 8006516:	4240      	negs	r0, r0
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	89a2      	ldrh	r2, [r4, #12]
 800651c:	3334      	adds	r3, #52	@ 0x34
 800651e:	4313      	orrs	r3, r2
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	e7e9      	b.n	80064f8 <__ssputs_r+0x90>
 8006524:	fffffb7f 	.word	0xfffffb7f

08006528 <_svfiprintf_r>:
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652a:	b0a1      	sub	sp, #132	@ 0x84
 800652c:	9003      	str	r0, [sp, #12]
 800652e:	001d      	movs	r5, r3
 8006530:	898b      	ldrh	r3, [r1, #12]
 8006532:	000f      	movs	r7, r1
 8006534:	0016      	movs	r6, r2
 8006536:	061b      	lsls	r3, r3, #24
 8006538:	d511      	bpl.n	800655e <_svfiprintf_r+0x36>
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10e      	bne.n	800655e <_svfiprintf_r+0x36>
 8006540:	2140      	movs	r1, #64	@ 0x40
 8006542:	f7ff ff01 	bl	8006348 <_malloc_r>
 8006546:	6038      	str	r0, [r7, #0]
 8006548:	6138      	str	r0, [r7, #16]
 800654a:	2800      	cmp	r0, #0
 800654c:	d105      	bne.n	800655a <_svfiprintf_r+0x32>
 800654e:	230c      	movs	r3, #12
 8006550:	9a03      	ldr	r2, [sp, #12]
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	2001      	movs	r0, #1
 8006556:	4240      	negs	r0, r0
 8006558:	e0cf      	b.n	80066fa <_svfiprintf_r+0x1d2>
 800655a:	2340      	movs	r3, #64	@ 0x40
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	2300      	movs	r3, #0
 8006560:	ac08      	add	r4, sp, #32
 8006562:	6163      	str	r3, [r4, #20]
 8006564:	3320      	adds	r3, #32
 8006566:	7663      	strb	r3, [r4, #25]
 8006568:	3310      	adds	r3, #16
 800656a:	76a3      	strb	r3, [r4, #26]
 800656c:	9507      	str	r5, [sp, #28]
 800656e:	0035      	movs	r5, r6
 8006570:	782b      	ldrb	r3, [r5, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <_svfiprintf_r+0x52>
 8006576:	2b25      	cmp	r3, #37	@ 0x25
 8006578:	d148      	bne.n	800660c <_svfiprintf_r+0xe4>
 800657a:	1bab      	subs	r3, r5, r6
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	42b5      	cmp	r5, r6
 8006580:	d00b      	beq.n	800659a <_svfiprintf_r+0x72>
 8006582:	0032      	movs	r2, r6
 8006584:	0039      	movs	r1, r7
 8006586:	9803      	ldr	r0, [sp, #12]
 8006588:	f7ff ff6e 	bl	8006468 <__ssputs_r>
 800658c:	3001      	adds	r0, #1
 800658e:	d100      	bne.n	8006592 <_svfiprintf_r+0x6a>
 8006590:	e0ae      	b.n	80066f0 <_svfiprintf_r+0x1c8>
 8006592:	6963      	ldr	r3, [r4, #20]
 8006594:	9a05      	ldr	r2, [sp, #20]
 8006596:	189b      	adds	r3, r3, r2
 8006598:	6163      	str	r3, [r4, #20]
 800659a:	782b      	ldrb	r3, [r5, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d100      	bne.n	80065a2 <_svfiprintf_r+0x7a>
 80065a0:	e0a6      	b.n	80066f0 <_svfiprintf_r+0x1c8>
 80065a2:	2201      	movs	r2, #1
 80065a4:	2300      	movs	r3, #0
 80065a6:	4252      	negs	r2, r2
 80065a8:	6062      	str	r2, [r4, #4]
 80065aa:	a904      	add	r1, sp, #16
 80065ac:	3254      	adds	r2, #84	@ 0x54
 80065ae:	1852      	adds	r2, r2, r1
 80065b0:	1c6e      	adds	r6, r5, #1
 80065b2:	6023      	str	r3, [r4, #0]
 80065b4:	60e3      	str	r3, [r4, #12]
 80065b6:	60a3      	str	r3, [r4, #8]
 80065b8:	7013      	strb	r3, [r2, #0]
 80065ba:	65a3      	str	r3, [r4, #88]	@ 0x58
 80065bc:	4b54      	ldr	r3, [pc, #336]	@ (8006710 <_svfiprintf_r+0x1e8>)
 80065be:	2205      	movs	r2, #5
 80065c0:	0018      	movs	r0, r3
 80065c2:	7831      	ldrb	r1, [r6, #0]
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	f000 fa4d 	bl	8006a64 <memchr>
 80065ca:	1c75      	adds	r5, r6, #1
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d11f      	bne.n	8006610 <_svfiprintf_r+0xe8>
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	06d3      	lsls	r3, r2, #27
 80065d4:	d504      	bpl.n	80065e0 <_svfiprintf_r+0xb8>
 80065d6:	2353      	movs	r3, #83	@ 0x53
 80065d8:	a904      	add	r1, sp, #16
 80065da:	185b      	adds	r3, r3, r1
 80065dc:	2120      	movs	r1, #32
 80065de:	7019      	strb	r1, [r3, #0]
 80065e0:	0713      	lsls	r3, r2, #28
 80065e2:	d504      	bpl.n	80065ee <_svfiprintf_r+0xc6>
 80065e4:	2353      	movs	r3, #83	@ 0x53
 80065e6:	a904      	add	r1, sp, #16
 80065e8:	185b      	adds	r3, r3, r1
 80065ea:	212b      	movs	r1, #43	@ 0x2b
 80065ec:	7019      	strb	r1, [r3, #0]
 80065ee:	7833      	ldrb	r3, [r6, #0]
 80065f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f2:	d016      	beq.n	8006622 <_svfiprintf_r+0xfa>
 80065f4:	0035      	movs	r5, r6
 80065f6:	2100      	movs	r1, #0
 80065f8:	200a      	movs	r0, #10
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	782a      	ldrb	r2, [r5, #0]
 80065fe:	1c6e      	adds	r6, r5, #1
 8006600:	3a30      	subs	r2, #48	@ 0x30
 8006602:	2a09      	cmp	r2, #9
 8006604:	d950      	bls.n	80066a8 <_svfiprintf_r+0x180>
 8006606:	2900      	cmp	r1, #0
 8006608:	d111      	bne.n	800662e <_svfiprintf_r+0x106>
 800660a:	e017      	b.n	800663c <_svfiprintf_r+0x114>
 800660c:	3501      	adds	r5, #1
 800660e:	e7af      	b.n	8006570 <_svfiprintf_r+0x48>
 8006610:	9b05      	ldr	r3, [sp, #20]
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	1ac0      	subs	r0, r0, r3
 8006616:	2301      	movs	r3, #1
 8006618:	4083      	lsls	r3, r0
 800661a:	4313      	orrs	r3, r2
 800661c:	002e      	movs	r6, r5
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	e7cc      	b.n	80065bc <_svfiprintf_r+0x94>
 8006622:	9b07      	ldr	r3, [sp, #28]
 8006624:	1d19      	adds	r1, r3, #4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	9107      	str	r1, [sp, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	db01      	blt.n	8006632 <_svfiprintf_r+0x10a>
 800662e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006630:	e004      	b.n	800663c <_svfiprintf_r+0x114>
 8006632:	425b      	negs	r3, r3
 8006634:	60e3      	str	r3, [r4, #12]
 8006636:	2302      	movs	r3, #2
 8006638:	4313      	orrs	r3, r2
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	782b      	ldrb	r3, [r5, #0]
 800663e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006640:	d10c      	bne.n	800665c <_svfiprintf_r+0x134>
 8006642:	786b      	ldrb	r3, [r5, #1]
 8006644:	2b2a      	cmp	r3, #42	@ 0x2a
 8006646:	d134      	bne.n	80066b2 <_svfiprintf_r+0x18a>
 8006648:	9b07      	ldr	r3, [sp, #28]
 800664a:	3502      	adds	r5, #2
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	9207      	str	r2, [sp, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	da01      	bge.n	800665a <_svfiprintf_r+0x132>
 8006656:	2301      	movs	r3, #1
 8006658:	425b      	negs	r3, r3
 800665a:	9309      	str	r3, [sp, #36]	@ 0x24
 800665c:	4e2d      	ldr	r6, [pc, #180]	@ (8006714 <_svfiprintf_r+0x1ec>)
 800665e:	2203      	movs	r2, #3
 8006660:	0030      	movs	r0, r6
 8006662:	7829      	ldrb	r1, [r5, #0]
 8006664:	f000 f9fe 	bl	8006a64 <memchr>
 8006668:	2800      	cmp	r0, #0
 800666a:	d006      	beq.n	800667a <_svfiprintf_r+0x152>
 800666c:	2340      	movs	r3, #64	@ 0x40
 800666e:	1b80      	subs	r0, r0, r6
 8006670:	4083      	lsls	r3, r0
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	3501      	adds	r5, #1
 8006676:	4313      	orrs	r3, r2
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	7829      	ldrb	r1, [r5, #0]
 800667c:	2206      	movs	r2, #6
 800667e:	4826      	ldr	r0, [pc, #152]	@ (8006718 <_svfiprintf_r+0x1f0>)
 8006680:	1c6e      	adds	r6, r5, #1
 8006682:	7621      	strb	r1, [r4, #24]
 8006684:	f000 f9ee 	bl	8006a64 <memchr>
 8006688:	2800      	cmp	r0, #0
 800668a:	d038      	beq.n	80066fe <_svfiprintf_r+0x1d6>
 800668c:	4b23      	ldr	r3, [pc, #140]	@ (800671c <_svfiprintf_r+0x1f4>)
 800668e:	2b00      	cmp	r3, #0
 8006690:	d122      	bne.n	80066d8 <_svfiprintf_r+0x1b0>
 8006692:	2207      	movs	r2, #7
 8006694:	9b07      	ldr	r3, [sp, #28]
 8006696:	3307      	adds	r3, #7
 8006698:	4393      	bics	r3, r2
 800669a:	3308      	adds	r3, #8
 800669c:	9307      	str	r3, [sp, #28]
 800669e:	6963      	ldr	r3, [r4, #20]
 80066a0:	9a04      	ldr	r2, [sp, #16]
 80066a2:	189b      	adds	r3, r3, r2
 80066a4:	6163      	str	r3, [r4, #20]
 80066a6:	e762      	b.n	800656e <_svfiprintf_r+0x46>
 80066a8:	4343      	muls	r3, r0
 80066aa:	0035      	movs	r5, r6
 80066ac:	2101      	movs	r1, #1
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	e7a4      	b.n	80065fc <_svfiprintf_r+0xd4>
 80066b2:	2300      	movs	r3, #0
 80066b4:	200a      	movs	r0, #10
 80066b6:	0019      	movs	r1, r3
 80066b8:	3501      	adds	r5, #1
 80066ba:	6063      	str	r3, [r4, #4]
 80066bc:	782a      	ldrb	r2, [r5, #0]
 80066be:	1c6e      	adds	r6, r5, #1
 80066c0:	3a30      	subs	r2, #48	@ 0x30
 80066c2:	2a09      	cmp	r2, #9
 80066c4:	d903      	bls.n	80066ce <_svfiprintf_r+0x1a6>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0c8      	beq.n	800665c <_svfiprintf_r+0x134>
 80066ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80066cc:	e7c6      	b.n	800665c <_svfiprintf_r+0x134>
 80066ce:	4341      	muls	r1, r0
 80066d0:	0035      	movs	r5, r6
 80066d2:	2301      	movs	r3, #1
 80066d4:	1889      	adds	r1, r1, r2
 80066d6:	e7f1      	b.n	80066bc <_svfiprintf_r+0x194>
 80066d8:	aa07      	add	r2, sp, #28
 80066da:	9200      	str	r2, [sp, #0]
 80066dc:	0021      	movs	r1, r4
 80066de:	003a      	movs	r2, r7
 80066e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006720 <_svfiprintf_r+0x1f8>)
 80066e2:	9803      	ldr	r0, [sp, #12]
 80066e4:	e000      	b.n	80066e8 <_svfiprintf_r+0x1c0>
 80066e6:	bf00      	nop
 80066e8:	9004      	str	r0, [sp, #16]
 80066ea:	9b04      	ldr	r3, [sp, #16]
 80066ec:	3301      	adds	r3, #1
 80066ee:	d1d6      	bne.n	800669e <_svfiprintf_r+0x176>
 80066f0:	89bb      	ldrh	r3, [r7, #12]
 80066f2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80066f4:	065b      	lsls	r3, r3, #25
 80066f6:	d500      	bpl.n	80066fa <_svfiprintf_r+0x1d2>
 80066f8:	e72c      	b.n	8006554 <_svfiprintf_r+0x2c>
 80066fa:	b021      	add	sp, #132	@ 0x84
 80066fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fe:	aa07      	add	r2, sp, #28
 8006700:	9200      	str	r2, [sp, #0]
 8006702:	0021      	movs	r1, r4
 8006704:	003a      	movs	r2, r7
 8006706:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <_svfiprintf_r+0x1f8>)
 8006708:	9803      	ldr	r0, [sp, #12]
 800670a:	f000 f87b 	bl	8006804 <_printf_i>
 800670e:	e7eb      	b.n	80066e8 <_svfiprintf_r+0x1c0>
 8006710:	08006c74 	.word	0x08006c74
 8006714:	08006c7a 	.word	0x08006c7a
 8006718:	08006c7e 	.word	0x08006c7e
 800671c:	00000000 	.word	0x00000000
 8006720:	08006469 	.word	0x08006469

08006724 <_printf_common>:
 8006724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006726:	0016      	movs	r6, r2
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	688a      	ldr	r2, [r1, #8]
 800672c:	690b      	ldr	r3, [r1, #16]
 800672e:	000c      	movs	r4, r1
 8006730:	9000      	str	r0, [sp, #0]
 8006732:	4293      	cmp	r3, r2
 8006734:	da00      	bge.n	8006738 <_printf_common+0x14>
 8006736:	0013      	movs	r3, r2
 8006738:	0022      	movs	r2, r4
 800673a:	6033      	str	r3, [r6, #0]
 800673c:	3243      	adds	r2, #67	@ 0x43
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	2a00      	cmp	r2, #0
 8006742:	d001      	beq.n	8006748 <_printf_common+0x24>
 8006744:	3301      	adds	r3, #1
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	069b      	lsls	r3, r3, #26
 800674c:	d502      	bpl.n	8006754 <_printf_common+0x30>
 800674e:	6833      	ldr	r3, [r6, #0]
 8006750:	3302      	adds	r3, #2
 8006752:	6033      	str	r3, [r6, #0]
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	2306      	movs	r3, #6
 8006758:	0015      	movs	r5, r2
 800675a:	401d      	ands	r5, r3
 800675c:	421a      	tst	r2, r3
 800675e:	d027      	beq.n	80067b0 <_printf_common+0x8c>
 8006760:	0023      	movs	r3, r4
 8006762:	3343      	adds	r3, #67	@ 0x43
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	1e5a      	subs	r2, r3, #1
 8006768:	4193      	sbcs	r3, r2
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	0692      	lsls	r2, r2, #26
 800676e:	d430      	bmi.n	80067d2 <_printf_common+0xae>
 8006770:	0022      	movs	r2, r4
 8006772:	9901      	ldr	r1, [sp, #4]
 8006774:	9800      	ldr	r0, [sp, #0]
 8006776:	9d08      	ldr	r5, [sp, #32]
 8006778:	3243      	adds	r2, #67	@ 0x43
 800677a:	47a8      	blx	r5
 800677c:	3001      	adds	r0, #1
 800677e:	d025      	beq.n	80067cc <_printf_common+0xa8>
 8006780:	2206      	movs	r2, #6
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	2500      	movs	r5, #0
 8006786:	4013      	ands	r3, r2
 8006788:	2b04      	cmp	r3, #4
 800678a:	d105      	bne.n	8006798 <_printf_common+0x74>
 800678c:	6833      	ldr	r3, [r6, #0]
 800678e:	68e5      	ldr	r5, [r4, #12]
 8006790:	1aed      	subs	r5, r5, r3
 8006792:	43eb      	mvns	r3, r5
 8006794:	17db      	asrs	r3, r3, #31
 8006796:	401d      	ands	r5, r3
 8006798:	68a3      	ldr	r3, [r4, #8]
 800679a:	6922      	ldr	r2, [r4, #16]
 800679c:	4293      	cmp	r3, r2
 800679e:	dd01      	ble.n	80067a4 <_printf_common+0x80>
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	18ed      	adds	r5, r5, r3
 80067a4:	2600      	movs	r6, #0
 80067a6:	42b5      	cmp	r5, r6
 80067a8:	d120      	bne.n	80067ec <_printf_common+0xc8>
 80067aa:	2000      	movs	r0, #0
 80067ac:	e010      	b.n	80067d0 <_printf_common+0xac>
 80067ae:	3501      	adds	r5, #1
 80067b0:	68e3      	ldr	r3, [r4, #12]
 80067b2:	6832      	ldr	r2, [r6, #0]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	42ab      	cmp	r3, r5
 80067b8:	ddd2      	ble.n	8006760 <_printf_common+0x3c>
 80067ba:	0022      	movs	r2, r4
 80067bc:	2301      	movs	r3, #1
 80067be:	9901      	ldr	r1, [sp, #4]
 80067c0:	9800      	ldr	r0, [sp, #0]
 80067c2:	9f08      	ldr	r7, [sp, #32]
 80067c4:	3219      	adds	r2, #25
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	d1f0      	bne.n	80067ae <_printf_common+0x8a>
 80067cc:	2001      	movs	r0, #1
 80067ce:	4240      	negs	r0, r0
 80067d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067d2:	2030      	movs	r0, #48	@ 0x30
 80067d4:	18e1      	adds	r1, r4, r3
 80067d6:	3143      	adds	r1, #67	@ 0x43
 80067d8:	7008      	strb	r0, [r1, #0]
 80067da:	0021      	movs	r1, r4
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	3145      	adds	r1, #69	@ 0x45
 80067e0:	7809      	ldrb	r1, [r1, #0]
 80067e2:	18a2      	adds	r2, r4, r2
 80067e4:	3243      	adds	r2, #67	@ 0x43
 80067e6:	3302      	adds	r3, #2
 80067e8:	7011      	strb	r1, [r2, #0]
 80067ea:	e7c1      	b.n	8006770 <_printf_common+0x4c>
 80067ec:	0022      	movs	r2, r4
 80067ee:	2301      	movs	r3, #1
 80067f0:	9901      	ldr	r1, [sp, #4]
 80067f2:	9800      	ldr	r0, [sp, #0]
 80067f4:	9f08      	ldr	r7, [sp, #32]
 80067f6:	321a      	adds	r2, #26
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	d0e6      	beq.n	80067cc <_printf_common+0xa8>
 80067fe:	3601      	adds	r6, #1
 8006800:	e7d1      	b.n	80067a6 <_printf_common+0x82>
	...

08006804 <_printf_i>:
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006806:	b08b      	sub	sp, #44	@ 0x2c
 8006808:	9206      	str	r2, [sp, #24]
 800680a:	000a      	movs	r2, r1
 800680c:	3243      	adds	r2, #67	@ 0x43
 800680e:	9307      	str	r3, [sp, #28]
 8006810:	9005      	str	r0, [sp, #20]
 8006812:	9203      	str	r2, [sp, #12]
 8006814:	7e0a      	ldrb	r2, [r1, #24]
 8006816:	000c      	movs	r4, r1
 8006818:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800681a:	2a78      	cmp	r2, #120	@ 0x78
 800681c:	d809      	bhi.n	8006832 <_printf_i+0x2e>
 800681e:	2a62      	cmp	r2, #98	@ 0x62
 8006820:	d80b      	bhi.n	800683a <_printf_i+0x36>
 8006822:	2a00      	cmp	r2, #0
 8006824:	d100      	bne.n	8006828 <_printf_i+0x24>
 8006826:	e0ba      	b.n	800699e <_printf_i+0x19a>
 8006828:	497a      	ldr	r1, [pc, #488]	@ (8006a14 <_printf_i+0x210>)
 800682a:	9104      	str	r1, [sp, #16]
 800682c:	2a58      	cmp	r2, #88	@ 0x58
 800682e:	d100      	bne.n	8006832 <_printf_i+0x2e>
 8006830:	e08e      	b.n	8006950 <_printf_i+0x14c>
 8006832:	0025      	movs	r5, r4
 8006834:	3542      	adds	r5, #66	@ 0x42
 8006836:	702a      	strb	r2, [r5, #0]
 8006838:	e022      	b.n	8006880 <_printf_i+0x7c>
 800683a:	0010      	movs	r0, r2
 800683c:	3863      	subs	r0, #99	@ 0x63
 800683e:	2815      	cmp	r0, #21
 8006840:	d8f7      	bhi.n	8006832 <_printf_i+0x2e>
 8006842:	f7f9 fc69 	bl	8000118 <__gnu_thumb1_case_shi>
 8006846:	0016      	.short	0x0016
 8006848:	fff6001f 	.word	0xfff6001f
 800684c:	fff6fff6 	.word	0xfff6fff6
 8006850:	001ffff6 	.word	0x001ffff6
 8006854:	fff6fff6 	.word	0xfff6fff6
 8006858:	fff6fff6 	.word	0xfff6fff6
 800685c:	0036009f 	.word	0x0036009f
 8006860:	fff6007e 	.word	0xfff6007e
 8006864:	00b0fff6 	.word	0x00b0fff6
 8006868:	0036fff6 	.word	0x0036fff6
 800686c:	fff6fff6 	.word	0xfff6fff6
 8006870:	0082      	.short	0x0082
 8006872:	0025      	movs	r5, r4
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	3542      	adds	r5, #66	@ 0x42
 8006878:	1d11      	adds	r1, r2, #4
 800687a:	6019      	str	r1, [r3, #0]
 800687c:	6813      	ldr	r3, [r2, #0]
 800687e:	702b      	strb	r3, [r5, #0]
 8006880:	2301      	movs	r3, #1
 8006882:	e09e      	b.n	80069c2 <_printf_i+0x1be>
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	6809      	ldr	r1, [r1, #0]
 8006888:	1d02      	adds	r2, r0, #4
 800688a:	060d      	lsls	r5, r1, #24
 800688c:	d50b      	bpl.n	80068a6 <_printf_i+0xa2>
 800688e:	6806      	ldr	r6, [r0, #0]
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	2e00      	cmp	r6, #0
 8006894:	da03      	bge.n	800689e <_printf_i+0x9a>
 8006896:	232d      	movs	r3, #45	@ 0x2d
 8006898:	9a03      	ldr	r2, [sp, #12]
 800689a:	4276      	negs	r6, r6
 800689c:	7013      	strb	r3, [r2, #0]
 800689e:	4b5d      	ldr	r3, [pc, #372]	@ (8006a14 <_printf_i+0x210>)
 80068a0:	270a      	movs	r7, #10
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	e018      	b.n	80068d8 <_printf_i+0xd4>
 80068a6:	6806      	ldr	r6, [r0, #0]
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	0649      	lsls	r1, r1, #25
 80068ac:	d5f1      	bpl.n	8006892 <_printf_i+0x8e>
 80068ae:	b236      	sxth	r6, r6
 80068b0:	e7ef      	b.n	8006892 <_printf_i+0x8e>
 80068b2:	6808      	ldr	r0, [r1, #0]
 80068b4:	6819      	ldr	r1, [r3, #0]
 80068b6:	c940      	ldmia	r1!, {r6}
 80068b8:	0605      	lsls	r5, r0, #24
 80068ba:	d402      	bmi.n	80068c2 <_printf_i+0xbe>
 80068bc:	0640      	lsls	r0, r0, #25
 80068be:	d500      	bpl.n	80068c2 <_printf_i+0xbe>
 80068c0:	b2b6      	uxth	r6, r6
 80068c2:	6019      	str	r1, [r3, #0]
 80068c4:	4b53      	ldr	r3, [pc, #332]	@ (8006a14 <_printf_i+0x210>)
 80068c6:	270a      	movs	r7, #10
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80068cc:	d100      	bne.n	80068d0 <_printf_i+0xcc>
 80068ce:	3f02      	subs	r7, #2
 80068d0:	0023      	movs	r3, r4
 80068d2:	2200      	movs	r2, #0
 80068d4:	3343      	adds	r3, #67	@ 0x43
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	6863      	ldr	r3, [r4, #4]
 80068da:	60a3      	str	r3, [r4, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	db06      	blt.n	80068ee <_printf_i+0xea>
 80068e0:	2104      	movs	r1, #4
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	9d03      	ldr	r5, [sp, #12]
 80068e6:	438a      	bics	r2, r1
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	4333      	orrs	r3, r6
 80068ec:	d00c      	beq.n	8006908 <_printf_i+0x104>
 80068ee:	9d03      	ldr	r5, [sp, #12]
 80068f0:	0030      	movs	r0, r6
 80068f2:	0039      	movs	r1, r7
 80068f4:	f7f9 fca0 	bl	8000238 <__aeabi_uidivmod>
 80068f8:	9b04      	ldr	r3, [sp, #16]
 80068fa:	3d01      	subs	r5, #1
 80068fc:	5c5b      	ldrb	r3, [r3, r1]
 80068fe:	702b      	strb	r3, [r5, #0]
 8006900:	0033      	movs	r3, r6
 8006902:	0006      	movs	r6, r0
 8006904:	429f      	cmp	r7, r3
 8006906:	d9f3      	bls.n	80068f0 <_printf_i+0xec>
 8006908:	2f08      	cmp	r7, #8
 800690a:	d109      	bne.n	8006920 <_printf_i+0x11c>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	07db      	lsls	r3, r3, #31
 8006910:	d506      	bpl.n	8006920 <_printf_i+0x11c>
 8006912:	6862      	ldr	r2, [r4, #4]
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	dc02      	bgt.n	8006920 <_printf_i+0x11c>
 800691a:	2330      	movs	r3, #48	@ 0x30
 800691c:	3d01      	subs	r5, #1
 800691e:	702b      	strb	r3, [r5, #0]
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	1b5b      	subs	r3, r3, r5
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	9b07      	ldr	r3, [sp, #28]
 8006928:	0021      	movs	r1, r4
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	9805      	ldr	r0, [sp, #20]
 800692e:	9b06      	ldr	r3, [sp, #24]
 8006930:	aa09      	add	r2, sp, #36	@ 0x24
 8006932:	f7ff fef7 	bl	8006724 <_printf_common>
 8006936:	3001      	adds	r0, #1
 8006938:	d148      	bne.n	80069cc <_printf_i+0x1c8>
 800693a:	2001      	movs	r0, #1
 800693c:	4240      	negs	r0, r0
 800693e:	b00b      	add	sp, #44	@ 0x2c
 8006940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006942:	2220      	movs	r2, #32
 8006944:	6809      	ldr	r1, [r1, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	2278      	movs	r2, #120	@ 0x78
 800694c:	4932      	ldr	r1, [pc, #200]	@ (8006a18 <_printf_i+0x214>)
 800694e:	9104      	str	r1, [sp, #16]
 8006950:	0021      	movs	r1, r4
 8006952:	3145      	adds	r1, #69	@ 0x45
 8006954:	700a      	strb	r2, [r1, #0]
 8006956:	6819      	ldr	r1, [r3, #0]
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	c940      	ldmia	r1!, {r6}
 800695c:	0610      	lsls	r0, r2, #24
 800695e:	d402      	bmi.n	8006966 <_printf_i+0x162>
 8006960:	0650      	lsls	r0, r2, #25
 8006962:	d500      	bpl.n	8006966 <_printf_i+0x162>
 8006964:	b2b6      	uxth	r6, r6
 8006966:	6019      	str	r1, [r3, #0]
 8006968:	07d3      	lsls	r3, r2, #31
 800696a:	d502      	bpl.n	8006972 <_printf_i+0x16e>
 800696c:	2320      	movs	r3, #32
 800696e:	4313      	orrs	r3, r2
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	2e00      	cmp	r6, #0
 8006974:	d001      	beq.n	800697a <_printf_i+0x176>
 8006976:	2710      	movs	r7, #16
 8006978:	e7aa      	b.n	80068d0 <_printf_i+0xcc>
 800697a:	2220      	movs	r2, #32
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	4393      	bics	r3, r2
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	e7f8      	b.n	8006976 <_printf_i+0x172>
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	680d      	ldr	r5, [r1, #0]
 8006988:	1d10      	adds	r0, r2, #4
 800698a:	6949      	ldr	r1, [r1, #20]
 800698c:	6018      	str	r0, [r3, #0]
 800698e:	6813      	ldr	r3, [r2, #0]
 8006990:	062e      	lsls	r6, r5, #24
 8006992:	d501      	bpl.n	8006998 <_printf_i+0x194>
 8006994:	6019      	str	r1, [r3, #0]
 8006996:	e002      	b.n	800699e <_printf_i+0x19a>
 8006998:	066d      	lsls	r5, r5, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0x190>
 800699c:	8019      	strh	r1, [r3, #0]
 800699e:	2300      	movs	r3, #0
 80069a0:	9d03      	ldr	r5, [sp, #12]
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	e7bf      	b.n	8006926 <_printf_i+0x122>
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	1d11      	adds	r1, r2, #4
 80069aa:	6019      	str	r1, [r3, #0]
 80069ac:	6815      	ldr	r5, [r2, #0]
 80069ae:	2100      	movs	r1, #0
 80069b0:	0028      	movs	r0, r5
 80069b2:	6862      	ldr	r2, [r4, #4]
 80069b4:	f000 f856 	bl	8006a64 <memchr>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d001      	beq.n	80069c0 <_printf_i+0x1bc>
 80069bc:	1b40      	subs	r0, r0, r5
 80069be:	6060      	str	r0, [r4, #4]
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	2300      	movs	r3, #0
 80069c6:	9a03      	ldr	r2, [sp, #12]
 80069c8:	7013      	strb	r3, [r2, #0]
 80069ca:	e7ac      	b.n	8006926 <_printf_i+0x122>
 80069cc:	002a      	movs	r2, r5
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	9906      	ldr	r1, [sp, #24]
 80069d2:	9805      	ldr	r0, [sp, #20]
 80069d4:	9d07      	ldr	r5, [sp, #28]
 80069d6:	47a8      	blx	r5
 80069d8:	3001      	adds	r0, #1
 80069da:	d0ae      	beq.n	800693a <_printf_i+0x136>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	079b      	lsls	r3, r3, #30
 80069e0:	d415      	bmi.n	8006a0e <_printf_i+0x20a>
 80069e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e4:	68e0      	ldr	r0, [r4, #12]
 80069e6:	4298      	cmp	r0, r3
 80069e8:	daa9      	bge.n	800693e <_printf_i+0x13a>
 80069ea:	0018      	movs	r0, r3
 80069ec:	e7a7      	b.n	800693e <_printf_i+0x13a>
 80069ee:	0022      	movs	r2, r4
 80069f0:	2301      	movs	r3, #1
 80069f2:	9906      	ldr	r1, [sp, #24]
 80069f4:	9805      	ldr	r0, [sp, #20]
 80069f6:	9e07      	ldr	r6, [sp, #28]
 80069f8:	3219      	adds	r2, #25
 80069fa:	47b0      	blx	r6
 80069fc:	3001      	adds	r0, #1
 80069fe:	d09c      	beq.n	800693a <_printf_i+0x136>
 8006a00:	3501      	adds	r5, #1
 8006a02:	68e3      	ldr	r3, [r4, #12]
 8006a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dcf0      	bgt.n	80069ee <_printf_i+0x1ea>
 8006a0c:	e7e9      	b.n	80069e2 <_printf_i+0x1de>
 8006a0e:	2500      	movs	r5, #0
 8006a10:	e7f7      	b.n	8006a02 <_printf_i+0x1fe>
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	08006c85 	.word	0x08006c85
 8006a18:	08006c96 	.word	0x08006c96

08006a1c <memmove>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4288      	cmp	r0, r1
 8006a20:	d902      	bls.n	8006a28 <memmove+0xc>
 8006a22:	188b      	adds	r3, r1, r2
 8006a24:	4298      	cmp	r0, r3
 8006a26:	d308      	bcc.n	8006a3a <memmove+0x1e>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d007      	beq.n	8006a3e <memmove+0x22>
 8006a2e:	5ccc      	ldrb	r4, [r1, r3]
 8006a30:	54c4      	strb	r4, [r0, r3]
 8006a32:	3301      	adds	r3, #1
 8006a34:	e7f9      	b.n	8006a2a <memmove+0xe>
 8006a36:	5c8b      	ldrb	r3, [r1, r2]
 8006a38:	5483      	strb	r3, [r0, r2]
 8006a3a:	3a01      	subs	r2, #1
 8006a3c:	d2fb      	bcs.n	8006a36 <memmove+0x1a>
 8006a3e:	bd10      	pop	{r4, pc}

08006a40 <_sbrk_r>:
 8006a40:	2300      	movs	r3, #0
 8006a42:	b570      	push	{r4, r5, r6, lr}
 8006a44:	4d06      	ldr	r5, [pc, #24]	@ (8006a60 <_sbrk_r+0x20>)
 8006a46:	0004      	movs	r4, r0
 8006a48:	0008      	movs	r0, r1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	f7fa f93a 	bl	8000cc4 <_sbrk>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d103      	bne.n	8006a5c <_sbrk_r+0x1c>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d000      	beq.n	8006a5c <_sbrk_r+0x1c>
 8006a5a:	6023      	str	r3, [r4, #0]
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	46c0      	nop			@ (mov r8, r8)
 8006a60:	20001f3c 	.word	0x20001f3c

08006a64 <memchr>:
 8006a64:	b2c9      	uxtb	r1, r1
 8006a66:	1882      	adds	r2, r0, r2
 8006a68:	4290      	cmp	r0, r2
 8006a6a:	d101      	bne.n	8006a70 <memchr+0xc>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	4770      	bx	lr
 8006a70:	7803      	ldrb	r3, [r0, #0]
 8006a72:	428b      	cmp	r3, r1
 8006a74:	d0fb      	beq.n	8006a6e <memchr+0xa>
 8006a76:	3001      	adds	r0, #1
 8006a78:	e7f6      	b.n	8006a68 <memchr+0x4>

08006a7a <_realloc_r>:
 8006a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a7c:	0006      	movs	r6, r0
 8006a7e:	000c      	movs	r4, r1
 8006a80:	0015      	movs	r5, r2
 8006a82:	2900      	cmp	r1, #0
 8006a84:	d105      	bne.n	8006a92 <_realloc_r+0x18>
 8006a86:	0011      	movs	r1, r2
 8006a88:	f7ff fc5e 	bl	8006348 <_malloc_r>
 8006a8c:	0004      	movs	r4, r0
 8006a8e:	0020      	movs	r0, r4
 8006a90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	d103      	bne.n	8006a9e <_realloc_r+0x24>
 8006a96:	f7ff fbeb 	bl	8006270 <_free_r>
 8006a9a:	002c      	movs	r4, r5
 8006a9c:	e7f7      	b.n	8006a8e <_realloc_r+0x14>
 8006a9e:	f000 f81c 	bl	8006ada <_malloc_usable_size_r>
 8006aa2:	0007      	movs	r7, r0
 8006aa4:	4285      	cmp	r5, r0
 8006aa6:	d802      	bhi.n	8006aae <_realloc_r+0x34>
 8006aa8:	0843      	lsrs	r3, r0, #1
 8006aaa:	42ab      	cmp	r3, r5
 8006aac:	d3ef      	bcc.n	8006a8e <_realloc_r+0x14>
 8006aae:	0029      	movs	r1, r5
 8006ab0:	0030      	movs	r0, r6
 8006ab2:	f7ff fc49 	bl	8006348 <_malloc_r>
 8006ab6:	9001      	str	r0, [sp, #4]
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d101      	bne.n	8006ac0 <_realloc_r+0x46>
 8006abc:	9c01      	ldr	r4, [sp, #4]
 8006abe:	e7e6      	b.n	8006a8e <_realloc_r+0x14>
 8006ac0:	002a      	movs	r2, r5
 8006ac2:	42bd      	cmp	r5, r7
 8006ac4:	d900      	bls.n	8006ac8 <_realloc_r+0x4e>
 8006ac6:	003a      	movs	r2, r7
 8006ac8:	0021      	movs	r1, r4
 8006aca:	9801      	ldr	r0, [sp, #4]
 8006acc:	f7ff fbc6 	bl	800625c <memcpy>
 8006ad0:	0021      	movs	r1, r4
 8006ad2:	0030      	movs	r0, r6
 8006ad4:	f7ff fbcc 	bl	8006270 <_free_r>
 8006ad8:	e7f0      	b.n	8006abc <_realloc_r+0x42>

08006ada <_malloc_usable_size_r>:
 8006ada:	1f0b      	subs	r3, r1, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	1f18      	subs	r0, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da01      	bge.n	8006ae8 <_malloc_usable_size_r+0xe>
 8006ae4:	580b      	ldr	r3, [r1, r0]
 8006ae6:	18c0      	adds	r0, r0, r3
 8006ae8:	4770      	bx	lr
	...

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
