
cpu_exhaust_fan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003f4c  08003f4c  00004f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800401c  0800401c  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800401c  0800401c  00006074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800401c  0800401c  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004020  08004020  00005020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004024  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000074  08004098  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004098  0000637c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108f2  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a9  00000000  00000000  0001698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00018d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b16  00000000  00000000  00019b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149b4  00000000  00000000  0001a66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a11  00000000  00000000  0002f022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a72  00000000  00000000  00040a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c14a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d4  00000000  00000000  000c14e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c4cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f34 	.word	0x08003f34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003f34 	.word	0x08003f34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <TIM1_CC_IRQHandler>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void TIM1_CC_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
    // Check if the interrupt flag for Capture/Compare 1 is set
    if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) != RESET)
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <TIM1_CC_IRQHandler+0x3c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	2202      	movs	r2, #2
 8000424:	4013      	ands	r3, r2
 8000426:	2b02      	cmp	r3, #2
 8000428:	d110      	bne.n	800044c <TIM1_CC_IRQHandler+0x34>
    {
        // Clear the interrupt flag to prevent it from triggering again
        __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <TIM1_CC_IRQHandler+0x3c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2203      	movs	r2, #3
 8000430:	4252      	negs	r2, r2
 8000432:	611a      	str	r2, [r3, #16]
        pulse_count++;
 8000434:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <TIM1_CC_IRQHandler+0x40>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	4b07      	ldr	r3, [pc, #28]	@ (8000458 <TIM1_CC_IRQHandler+0x40>)
 800043c:	601a      	str	r2, [r3, #0]
        // Get the captured value (the timer counter at the moment of the pulse)
        //uint32_t captured_value = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800043e:	23a0      	movs	r3, #160	@ 0xa0
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	2201      	movs	r2, #1
 8000444:	2120      	movs	r1, #32
 8000446:	0018      	movs	r0, r3
 8000448:	f001 f8a4 	bl	8001594 <HAL_GPIO_WritePin>
        //sprintf(msg, "Captured value: %lu\r\n", captured_value);
        //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);  // Send the message via UART

        // Optionally, you can increment a pulse count or do other processing
    }
}
 800044c:	46c0      	nop			@ (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	200000ac 	.word	0x200000ac
 8000458:	20000090 	.word	0x20000090

0800045c <Send_RPM_Via_UART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Send_RPM_Via_UART(uint32_t rpm_value)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b089      	sub	sp, #36	@ 0x24
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    char rpm_str[20];

    // Convert the RPM value to a string using sprintf
    sprintf(rpm_str, "RPM: %lu\r\n", rpm_value);  // Convert RPM to string format
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	490b      	ldr	r1, [pc, #44]	@ (8000494 <Send_RPM_Via_UART+0x38>)
 8000468:	240c      	movs	r4, #12
 800046a:	193b      	adds	r3, r7, r4
 800046c:	0018      	movs	r0, r3
 800046e:	f003 f8c5 	bl	80035fc <siprintf>

    // Send the string via UART
    HAL_UART_Transmit(&huart1, (uint8_t*)rpm_str, strlen(rpm_str), 1000);  // Timeout is 1000 ms
 8000472:	193b      	adds	r3, r7, r4
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff fe47 	bl	8000108 <strlen>
 800047a:	0003      	movs	r3, r0
 800047c:	b29a      	uxth	r2, r3
 800047e:	23fa      	movs	r3, #250	@ 0xfa
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	1939      	adds	r1, r7, r4
 8000484:	4804      	ldr	r0, [pc, #16]	@ (8000498 <Send_RPM_Via_UART+0x3c>)
 8000486:	f002 fb49 	bl	8002b1c <HAL_UART_Transmit>
}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b009      	add	sp, #36	@ 0x24
 8000490:	bd90      	pop	{r4, r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	08003f4c 	.word	0x08003f4c
 8000498:	200000f8 	.word	0x200000f8

0800049c <RPM_Calculate>:
void RPM_Calculate()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    // Calculate RPM if 1 second has passed
    if (HAL_GetTick() - last_time >= 5000)  // 1000 ms (1 second)
 80004a0:	f000 fd90 	bl	8000fc4 <HAL_GetTick>
 80004a4:	0002      	movs	r2, r0
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <RPM_Calculate+0x48>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <RPM_Calculate+0x4c>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d915      	bls.n	80004de <RPM_Calculate+0x42>
    {
        // Calculate RPM based on pulse count (assuming 2 pulses per revolution)
        rpm = (pulse_count * 60) / 2;  // RPM = (Pulse Frequency * 60) / PPR
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <RPM_Calculate+0x50>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	0013      	movs	r3, r2
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	1a9b      	subs	r3, r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	085a      	lsrs	r2, r3, #1
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <RPM_Calculate+0x54>)
 80004c2:	601a      	str	r2, [r3, #0]
        last_time = HAL_GetTick();  // Update last time to current time
 80004c4:	f000 fd7e 	bl	8000fc4 <HAL_GetTick>
 80004c8:	0002      	movs	r2, r0
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <RPM_Calculate+0x48>)
 80004cc:	601a      	str	r2, [r3, #0]
        pulse_count = 0;  // Reset the pulse count for the next second
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <RPM_Calculate+0x50>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
        Send_RPM_Via_UART(rpm);
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <RPM_Calculate+0x54>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ffbf 	bl	800045c <Send_RPM_Via_UART>
    }
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000098 	.word	0x20000098
 80004e8:	00001387 	.word	0x00001387
 80004ec:	20000090 	.word	0x20000090
 80004f0:	20000094 	.word	0x20000094

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcf0 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f82c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f94a 	bl	8000798 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000504:	f000 f870 	bl	80005e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000508:	f000 f8f8 	bl	80006fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800050c:	2000      	movs	r0, #0
 800050e:	f000 fb0d 	bl	8000b2c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000512:	2101      	movs	r1, #1
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb73 	bl	8000c00 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <main+0x60>)
 800051c:	22e1      	movs	r2, #225	@ 0xe1
 800051e:	0252      	lsls	r2, r2, #9
 8000520:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <main+0x60>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <main+0x60>)
 800052a:	2200      	movs	r2, #0
 800052c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <main+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000534:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <main+0x60>)
 8000536:	2200      	movs	r2, #0
 8000538:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <main+0x60>)
 800053c:	0019      	movs	r1, r3
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fc04 	bl	8000d4c <BSP_COM_Init>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <main+0x58>
  {
    Error_Handler();
 8000548:	f000 f976 	bl	8000838 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RPM_Calculate();
 800054c:	f7ff ffa6 	bl	800049c <RPM_Calculate>
 8000550:	e7fc      	b.n	800054c <main+0x58>
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	2000009c 	.word	0x2000009c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b08d      	sub	sp, #52	@ 0x34
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	2414      	movs	r4, #20
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	231c      	movs	r3, #28
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 f869 	bl	8003640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2314      	movs	r3, #20
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 f862 	bl	8003640 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 800057c:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <SystemClock_Config+0x8c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2207      	movs	r2, #7
 8000582:	4393      	bics	r3, r2
 8000584:	001a      	movs	r2, r3
 8000586:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <SystemClock_Config+0x8c>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2280      	movs	r2, #128	@ 0x80
 8000598:	0252      	lsls	r2, r2, #9
 800059a:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	193b      	adds	r3, r7, r4
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 f816 	bl	80015d0 <HAL_RCC_OscConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005a8:	f000 f946 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	003b      	movs	r3, r7
 80005ae:	2207      	movs	r2, #7
 80005b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ca:	003b      	movs	r3, r7
 80005cc:	2101      	movs	r1, #1
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 f9e2 	bl	8001998 <HAL_RCC_ClockConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d8:	f000 f92e 	bl	8000838 <Error_Handler>
  }
}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b00d      	add	sp, #52	@ 0x34
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40022000 	.word	0x40022000

080005e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	@ 0x30
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ee:	2320      	movs	r3, #32
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	2310      	movs	r3, #16
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f003 f821 	bl	8003640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fe:	2314      	movs	r3, #20
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	0018      	movs	r0, r3
 8000604:	230c      	movs	r3, #12
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f003 f819 	bl	8003640 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	0018      	movs	r0, r3
 8000612:	2310      	movs	r3, #16
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f003 f812 	bl	8003640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800061c:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <MX_TIM1_Init+0x108>)
 800061e:	4a35      	ldr	r2, [pc, #212]	@ (80006f4 <MX_TIM1_Init+0x10c>)
 8000620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000622:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <MX_TIM1_Init+0x108>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000628:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <MX_TIM1_Init+0x108>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800062e:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <MX_TIM1_Init+0x108>)
 8000630:	4a31      	ldr	r2, [pc, #196]	@ (80006f8 <MX_TIM1_Init+0x110>)
 8000632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <MX_TIM1_Init+0x108>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_TIM1_Init+0x108>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000640:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <MX_TIM1_Init+0x108>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000646:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_TIM1_Init+0x108>)
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fc07 	bl	8001e5c <HAL_TIM_Base_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000652:	f000 f8f1 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000656:	2120      	movs	r1, #32
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2280      	movs	r2, #128	@ 0x80
 800065c:	0152      	lsls	r2, r2, #5
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000660:	187a      	adds	r2, r7, r1
 8000662:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <MX_TIM1_Init+0x108>)
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fe7e 	bl	8002368 <HAL_TIM_ConfigClockSource>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000670:	f000 f8e2 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_TIM1_Init+0x108>)
 8000676:	0018      	movs	r0, r3
 8000678:	f001 fc48 	bl	8001f0c <HAL_TIM_IC_Init>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000680:	f000 f8da 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000684:	2114      	movs	r1, #20
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000698:	187a      	adds	r2, r7, r1
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_TIM1_Init+0x108>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 f984 	bl	80029ac <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006a8:	f000 f8c6 	bl	8000838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV2;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2204      	movs	r2, #4
 80006bc:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_TIM1_Init+0x108>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fda8 	bl	8002220 <HAL_TIM_IC_ConfigChannel>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80006d4:	f000 f8b0 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  // Start the input capture with interrupt
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <MX_TIM1_Init+0x108>)
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fc75 	bl	8001fcc <HAL_TIM_IC_Start_IT>
  //HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);  // Set priority (you can adjust this)
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80006e2:	200e      	movs	r0, #14
 80006e4:	f000 fd39 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM1_Init 2 */

}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b00c      	add	sp, #48	@ 0x30
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000ac 	.word	0x200000ac
 80006f4:	40012c00 	.word	0x40012c00
 80006f8:	0000ffff 	.word	0x0000ffff

080006fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART2;
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000702:	4a24      	ldr	r2, [pc, #144]	@ (8000794 <MX_USART1_UART_Init+0x98>)
 8000704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000708:	22e1      	movs	r2, #225	@ 0xe1
 800070a:	0252      	lsls	r2, r2, #9
 800070c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000746:	0018      	movs	r0, r3
 8000748:	f002 f992 	bl	8002a70 <HAL_UART_Init>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000750:	f000 f872 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000756:	2100      	movs	r1, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fe6f 	bl	800343c <HAL_UARTEx_SetTxFifoThreshold>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000762:	f000 f869 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 8000768:	2100      	movs	r1, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fea6 	bl	80034bc <HAL_UARTEx_SetRxFifoThreshold>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000774:	f000 f860 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <MX_USART1_UART_Init+0x94>)
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fe24 	bl	80033c8 <HAL_UARTEx_DisableFifoMode>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000784:	f000 f858 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	200000f8 	.word	0x200000f8
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b089      	sub	sp, #36	@ 0x24
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	240c      	movs	r4, #12
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2314      	movs	r3, #20
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f002 ff49 	bl	8003640 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007b4:	2104      	movs	r1, #4
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007be:	2204      	movs	r2, #4
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007cc:	2120      	movs	r1, #32
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d6:	2220      	movs	r2, #32
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007f6:	23a0      	movs	r3, #160	@ 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fec8 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2220      	movs	r2, #32
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2202      	movs	r2, #2
 8000816:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	187a      	adds	r2, r7, r1
 8000820:	23a0      	movs	r3, #160	@ 0xa0
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fd42 	bl	80012b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b009      	add	sp, #36	@ 0x24
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_MspInit+0x44>)
 800084c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <HAL_MspInit+0x44>)
 8000850:	2101      	movs	r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	641a      	str	r2, [r3, #64]	@ 0x40
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <HAL_MspInit+0x44>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x44>)
 8000864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <HAL_MspInit+0x44>)
 8000868:	2180      	movs	r1, #128	@ 0x80
 800086a:	0549      	lsls	r1, r1, #21
 800086c:	430a      	orrs	r2, r1
 800086e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <HAL_MspInit+0x44>)
 8000872:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000874:	2380      	movs	r3, #128	@ 0x80
 8000876:	055b      	lsls	r3, r3, #21
 8000878:	4013      	ands	r3, r2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b08b      	sub	sp, #44	@ 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	2414      	movs	r4, #20
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f002 fece 	bl	8003640 <memset>
  if(htim_base->Instance==TIM1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <HAL_TIM_Base_MspInit+0x8c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d130      	bne.n	8000910 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_TIM_Base_MspInit+0x90>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_TIM_Base_MspInit+0x90>)
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	0109      	lsls	r1, r1, #4
 80008b8:	430a      	orrs	r2, r1
 80008ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_TIM_Base_MspInit+0x90>)
 80008be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_TIM_Base_MspInit+0x90>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ce:	4b13      	ldr	r3, [pc, #76]	@ (800091c <HAL_TIM_Base_MspInit+0x90>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_TIM_Base_MspInit+0x90>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2202      	movs	r2, #2
 80008ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2205      	movs	r2, #5
 8000900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	187a      	adds	r2, r7, r1
 8000904:	23a0      	movs	r3, #160	@ 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fcd0 	bl	80012b0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b00b      	add	sp, #44	@ 0x2c
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	40012c00 	.word	0x40012c00
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b091      	sub	sp, #68	@ 0x44
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	232c      	movs	r3, #44	@ 0x2c
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	0018      	movs	r0, r3
 800092e:	2314      	movs	r3, #20
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f002 fe84 	bl	8003640 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	2410      	movs	r4, #16
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	231c      	movs	r3, #28
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f002 fe7c 	bl	8003640 <memset>
  if(huart->Instance==USART1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a08 <HAL_UART_MspInit+0xe8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d156      	bne.n	8000a00 <HAL_UART_MspInit+0xe0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	193b      	adds	r3, r7, r4
 8000960:	0018      	movs	r0, r3
 8000962:	f001 f98f 	bl	8001c84 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800096a:	f7ff ff65 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800096e:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <HAL_UART_MspInit+0xec>)
 8000970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000972:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <HAL_UART_MspInit+0xec>)
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	01c9      	lsls	r1, r1, #7
 8000978:	430a      	orrs	r2, r1
 800097a:	641a      	str	r2, [r3, #64]	@ 0x40
 800097c:	4b23      	ldr	r3, [pc, #140]	@ (8000a0c <HAL_UART_MspInit+0xec>)
 800097e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	01db      	lsls	r3, r3, #7
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <HAL_UART_MspInit+0xec>)
 800098c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800098e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <HAL_UART_MspInit+0xec>)
 8000990:	2101      	movs	r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	@ 0x34
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <HAL_UART_MspInit+0xec>)
 8000998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a2:	242c      	movs	r4, #44	@ 0x2c
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2202      	movs	r2, #2
 80009a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2202      	movs	r2, #2
 80009ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2204      	movs	r2, #4
 80009c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	193a      	adds	r2, r7, r4
 80009c4:	23a0      	movs	r3, #160	@ 0xa0
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fc70 	bl	80012b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d0:	0021      	movs	r1, r4
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	23a0      	movs	r3, #160	@ 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fc58 	bl	80012b0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b011      	add	sp, #68	@ 0x44
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 fab2 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 f95e 	bl	8000d08 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f002 fde4 	bl	8003650 <__errno>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	425b      	negs	r3, r3
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	18d2      	adds	r2, r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <_sbrk+0x64>)
 8000aa4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b006      	add	sp, #24
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20003000 	.word	0x20003000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	2000018c 	.word	0x2000018c
 8000abc:	20000380 	.word	0x20000380

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <SystemInit+0x14>)
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	0512      	lsls	r2, r2, #20
 8000aca:	609a      	str	r2, [r3, #8]
#endif
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000adc:	f7ff fff0 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ae0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ae2:	e003      	b.n	8000aec <LoopCopyDataInit>

08000ae4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ae6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ae8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aea:	3104      	adds	r1, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aec:	480a      	ldr	r0, [pc, #40]	@ (8000b18 <LoopForever+0xa>)
  ldr r3, =_edata
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <LoopForever+0xe>)
  adds r2, r0, r1
 8000af0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000af4:	d3f6      	bcc.n	8000ae4 <CopyDataInit>
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopForever+0x12>)
  b LoopFillZerobss
 8000af8:	e002      	b.n	8000b00 <LoopFillZerobss>

08000afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  str  r3, [r2]
 8000afc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afe:	3204      	adds	r2, #4

08000b00 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <LoopForever+0x16>)
  cmp r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b04:	d3f9      	bcc.n	8000afa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b06:	f002 fda9 	bl	800365c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fcf3 	bl	80004f4 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000b14:	08004024 	.word	0x08004024
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b1c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000b20:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000b24:	2000037c 	.word	0x2000037c

08000b28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_IRQHandler>
	...

08000b2c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d007      	beq.n	8000b54 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d003      	beq.n	8000b54 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	425b      	negs	r3, r3
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b52:	e04a      	b.n	8000bea <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10c      	bne.n	8000b76 <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000b5c:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <BSP_LED_Init+0xc8>)
 8000b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b60:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <BSP_LED_Init+0xc8>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	430a      	orrs	r2, r1
 8000b66:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <BSP_LED_Init+0xc8>)
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	e00b      	b.n	8000b8e <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 8000b76:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <BSP_LED_Init+0xc8>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <BSP_LED_Init+0xc8>)
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <BSP_LED_Init+0xc8>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b86:	2204      	movs	r2, #4
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <BSP_LED_Init+0xcc>)
 8000b94:	0052      	lsls	r2, r2, #1
 8000b96:	5ad3      	ldrh	r3, [r2, r3]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <BSP_LED_Init+0xd0>)
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	58d3      	ldr	r3, [r2, r3]
 8000bbc:	187a      	adds	r2, r7, r1
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 fb75 	bl	80012b0 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d10d      	bne.n	8000bea <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <BSP_LED_Init+0xd0>)
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	58d0      	ldr	r0, [r2, r3]
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <BSP_LED_Init+0xcc>)
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	5ad3      	ldrh	r3, [r2, r3]
 8000be2:	2201      	movs	r2, #1
 8000be4:	0019      	movs	r1, r3
 8000be6:	f000 fcd5 	bl	8001594 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b00a      	add	sp, #40	@ 0x28
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	08003fb8 	.word	0x08003fb8
 8000bfc:	20000008 	.word	0x20000008

08000c00 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0002      	movs	r2, r0
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	1dbb      	adds	r3, r7, #6
 8000c0e:	1c0a      	adds	r2, r1, #0
 8000c10:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c12:	4b36      	ldr	r3, [pc, #216]	@ (8000cec <BSP_PB_Init+0xec>)
 8000c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c16:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <BSP_PB_Init+0xec>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c1e:	4b33      	ldr	r3, [pc, #204]	@ (8000cec <BSP_PB_Init+0xec>)
 8000c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c22:	2204      	movs	r2, #4
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c2a:	2380      	movs	r3, #128	@ 0x80
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	001a      	movs	r2, r3
 8000c30:	210c      	movs	r1, #12
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2201      	movs	r2, #1
 8000c3a:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2202      	movs	r2, #2
 8000c40:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000c42:	1dbb      	adds	r3, r7, #6
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10d      	bne.n	8000c66 <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <BSP_PB_Init+0xf0>)
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	58d3      	ldr	r3, [r2, r3]
 8000c5a:	187a      	adds	r2, r7, r1
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fb26 	bl	80012b0 <HAL_GPIO_Init>
 8000c64:	e03c      	b.n	8000ce0 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000c66:	210c      	movs	r1, #12
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	4a22      	ldr	r2, [pc, #136]	@ (8000cf4 <BSP_PB_Init+0xf4>)
 8000c6c:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <BSP_PB_Init+0xf0>)
 8000c74:	0092      	lsls	r2, r2, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	187a      	adds	r2, r7, r1
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fb17 	bl	80012b0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	0013      	movs	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	189b      	adds	r3, r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf8 <BSP_PB_Init+0xf8>)
 8000c90:	1898      	adds	r0, r3, r2
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <BSP_PB_Init+0xfc>)
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	58d3      	ldr	r3, [r2, r3]
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	f000 faab 	bl	80011f8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <BSP_PB_Init+0xf8>)
 8000cb0:	1898      	adds	r0, r3, r2
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <BSP_PB_Init+0x100>)
 8000cb8:	0092      	lsls	r2, r2, #2
 8000cba:	58d3      	ldr	r3, [r2, r3]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f000 fa68 	bl	8001194 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000cc4:	2007      	movs	r0, #7
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <BSP_PB_Init+0x104>)
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	f000 fa2c 	bl	8001130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000cd8:	2307      	movs	r3, #7
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 fa3d 	bl	800115a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b008      	add	sp, #32
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	20000010 	.word	0x20000010
 8000cf4:	10210000 	.word	0x10210000
 8000cf8:	20000190 	.word	0x20000190
 8000cfc:	08003fbc 	.word	0x08003fbc
 8000d00:	20000014 	.word	0x20000014
 8000d04:	20000018 	.word	0x20000018

08000d08 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	0013      	movs	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <BSP_PB_IRQHandler+0x2c>)
 8000d22:	189b      	adds	r3, r3, r2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 fa79 	bl	800121c <HAL_EXTI_IRQHandler>
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000190 	.word	0x20000190

08000d38 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d66:	2302      	movs	r3, #2
 8000d68:	425b      	negs	r3, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e018      	b.n	8000da0 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2294      	movs	r2, #148	@ 0x94
 8000d74:	435a      	muls	r2, r3
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <BSP_COM_Init+0x60>)
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 f856 	bl	8000e2c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2294      	movs	r2, #148	@ 0x94
 8000d86:	435a      	muls	r2, r3
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <BSP_COM_Init+0x60>)
 8000d8a:	18d3      	adds	r3, r2, r3
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 f80d 	bl	8000db0 <MX_USART2_Init>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d002      	beq.n	8000da0 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000da0:	68fb      	ldr	r3, [r7, #12]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	2000019c 	.word	0x2000019c

08000db0 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <MX_USART2_Init+0x68>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	220c      	movs	r2, #12
 8000dce:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	895b      	ldrh	r3, [r3, #10]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	891b      	ldrh	r3, [r3, #8]
 8000de6:	001a      	movs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	899b      	ldrh	r3, [r3, #12]
 8000df0:	001a      	movs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2280      	movs	r2, #128	@ 0x80
 8000dfa:	0212      	lsls	r2, r2, #8
 8000dfc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f001 fe32 	bl	8002a70 <HAL_UART_Init>
 8000e0c:	0003      	movs	r3, r0
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	20000004 	.word	0x20000004

08000e1c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff ff89 	bl	8000d38 <BSP_PB_Callback>
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b08b      	sub	sp, #44	@ 0x2c
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e44:	2201      	movs	r2, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e50:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	430a      	orrs	r2, r1
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4013      	ands	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e6a:	2180      	movs	r1, #128	@ 0x80
 8000e6c:	0289      	lsls	r1, r1, #10
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <COM1_MspInit+0xac>)
 8000e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	029b      	lsls	r3, r3, #10
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000e80:	2414      	movs	r4, #20
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2204      	movs	r2, #4
 8000e86:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2202      	movs	r2, #2
 8000e92:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2201      	movs	r2, #1
 8000e98:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ea0:	193a      	adds	r2, r7, r4
 8000ea2:	23a0      	movs	r3, #160	@ 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 fa01 	bl	80012b0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000ec0:	193a      	adds	r2, r7, r4
 8000ec2:	23a0      	movs	r3, #160	@ 0xa0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 f9f1 	bl	80012b0 <HAL_GPIO_Init>
}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b00b      	add	sp, #44	@ 0x2c
 8000ed4:	bd90      	pop	{r4, r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f80f 	bl	8000f0c <HAL_InitTick>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e001      	b.n	8000efe <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efa:	f7ff fca3 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <HAL_InitTick+0x88>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d02b      	beq.n	8000f7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <HAL_InitTick+0x8c>)
 8000f26:	681c      	ldr	r4, [r3, #0]
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_InitTick+0x88>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	23fa      	movs	r3, #250	@ 0xfa
 8000f30:	0098      	lsls	r0, r3, #2
 8000f32:	f7ff f8fb 	bl	800012c <__udivsi3>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	0020      	movs	r0, r4
 8000f3c:	f7ff f8f6 	bl	800012c <__udivsi3>
 8000f40:	0003      	movs	r3, r0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f919 	bl	800117a <HAL_SYSTICK_Config>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d112      	bne.n	8000f72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d80a      	bhi.n	8000f68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2301      	movs	r3, #1
 8000f56:	425b      	negs	r3, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f8e8 	bl	8001130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <HAL_InitTick+0x90>)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e00d      	b.n	8000f84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e008      	b.n	8000f84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	230f      	movs	r3, #15
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e003      	b.n	8000f84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b005      	add	sp, #20
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	20000020 	.word	0x20000020
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	2000001c 	.word	0x2000001c

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	001a      	movs	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	18d2      	adds	r2, r2, r3
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	20000020 	.word	0x20000020
 8000fc0:	20000230 	.word	0x20000230

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	@ (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	20000230 	.word	0x20000230

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fea:	d809      	bhi.n	8001000 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	231f      	movs	r3, #31
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_EnableIRQ+0x30>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4091      	lsls	r1, r2
 8000ffc:	000a      	movs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	0002      	movs	r2, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001020:	d828      	bhi.n	8001074 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001022:	4a2f      	ldr	r2, [pc, #188]	@ (80010e0 <__NVIC_SetPriority+0xd4>)
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	33c0      	adds	r3, #192	@ 0xc0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	589b      	ldr	r3, [r3, r2]
 8001032:	1dfa      	adds	r2, r7, #7
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	0011      	movs	r1, r2
 8001038:	2203      	movs	r2, #3
 800103a:	400a      	ands	r2, r1
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	21ff      	movs	r1, #255	@ 0xff
 8001040:	4091      	lsls	r1, r2
 8001042:	000a      	movs	r2, r1
 8001044:	43d2      	mvns	r2, r2
 8001046:	401a      	ands	r2, r3
 8001048:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	22ff      	movs	r2, #255	@ 0xff
 8001050:	401a      	ands	r2, r3
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0018      	movs	r0, r3
 8001058:	2303      	movs	r3, #3
 800105a:	4003      	ands	r3, r0
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001060:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <__NVIC_SetPriority+0xd4>)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	430a      	orrs	r2, r1
 800106c:	33c0      	adds	r3, #192	@ 0xc0
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001072:	e031      	b.n	80010d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <__NVIC_SetPriority+0xd8>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	0019      	movs	r1, r3
 800107c:	230f      	movs	r3, #15
 800107e:	400b      	ands	r3, r1
 8001080:	3b08      	subs	r3, #8
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3306      	adds	r3, #6
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	0011      	movs	r1, r2
 8001094:	2203      	movs	r2, #3
 8001096:	400a      	ands	r2, r1
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	21ff      	movs	r1, #255	@ 0xff
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	43d2      	mvns	r2, r2
 80010a2:	401a      	ands	r2, r3
 80010a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	22ff      	movs	r2, #255	@ 0xff
 80010ac:	401a      	ands	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	4003      	ands	r3, r0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <__NVIC_SetPriority+0xd8>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	001c      	movs	r4, r3
 80010c4:	230f      	movs	r3, #15
 80010c6:	4023      	ands	r3, r4
 80010c8:	3b08      	subs	r3, #8
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	430a      	orrs	r2, r1
 80010ce:	3306      	adds	r3, #6
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	18c3      	adds	r3, r0, r3
 80010d4:	3304      	adds	r3, #4
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b003      	add	sp, #12
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	045b      	lsls	r3, r3, #17
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d301      	bcc.n	8001100 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fc:	2301      	movs	r3, #1
 80010fe:	e010      	b.n	8001122 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <SysTick_Config+0x44>)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	3a01      	subs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001108:	2301      	movs	r3, #1
 800110a:	425b      	negs	r3, r3
 800110c:	2103      	movs	r1, #3
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff7c 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SysTick_Config+0x44>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SysTick_Config+0x44>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	210f      	movs	r1, #15
 800113c:	187b      	adds	r3, r7, r1
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	187b      	adds	r3, r7, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	0002      	movs	r2, r0
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ff33 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ffaf 	bl	80010e8 <SysTick_Config>
 800118a:	0003      	movs	r3, r0
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	200b      	movs	r0, #11
 80011a0:	183b      	adds	r3, r7, r0
 80011a2:	1c0a      	adds	r2, r1, #0
 80011a4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011a6:	2317      	movs	r3, #23
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d010      	beq.n	80011d8 <HAL_EXTI_RegisterCallback+0x44>
 80011b6:	dc13      	bgt.n	80011e0 <HAL_EXTI_RegisterCallback+0x4c>
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_EXTI_RegisterCallback+0x2e>
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d007      	beq.n	80011d0 <HAL_EXTI_RegisterCallback+0x3c>
 80011c0:	e00e      	b.n	80011e0 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
      break;
 80011ce:	e00c      	b.n	80011ea <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
      break;
 80011d6:	e008      	b.n	80011ea <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]
      break;
 80011de:	e004      	b.n	80011ea <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 80011e0:	2317      	movs	r3, #23
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
      break;
 80011e8:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80011ea:	2317      	movs	r3, #23
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b006      	add	sp, #24
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e003      	b.n	8001214 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001212:	2300      	movs	r3, #0
  }
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	2201      	movs	r2, #1
 800122c:	4013      	ands	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	221f      	movs	r2, #31
 8001236:	4013      	ands	r3, r2
 8001238:	2201      	movs	r2, #1
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	015b      	lsls	r3, r3, #5
 8001244:	4a18      	ldr	r2, [pc, #96]	@ (80012a8 <HAL_EXTI_IRQHandler+0x8c>)
 8001246:	4694      	mov	ip, r2
 8001248:	4463      	add	r3, ip
 800124a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d009      	beq.n	8001270 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	015b      	lsls	r3, r3, #5
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <HAL_EXTI_IRQHandler+0x90>)
 8001276:	4694      	mov	ip, r2
 8001278:	4463      	add	r3, ip
 800127a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d009      	beq.n	80012a0 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	4798      	blx	r3
    }
  }
}
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b006      	add	sp, #24
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	4002180c 	.word	0x4002180c
 80012ac:	40021810 	.word	0x40021810

080012b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012be:	e153      	b.n	8001568 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4091      	lsls	r1, r2
 80012ca:	000a      	movs	r2, r1
 80012cc:	4013      	ands	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d100      	bne.n	80012d8 <HAL_GPIO_Init+0x28>
 80012d6:	e144      	b.n	8001562 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x38>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d125      	bne.n	8001334 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	58d3      	ldr	r3, [r2, r3]
 80012f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	2207      	movs	r2, #7
 80012fa:	4013      	ands	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	43da      	mvns	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4013      	ands	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	220f      	movs	r2, #15
 8001312:	401a      	ands	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2107      	movs	r1, #7
 8001318:	400b      	ands	r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	4313      	orrs	r3, r2
 8001324:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	6979      	ldr	r1, [r7, #20]
 8001332:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	43da      	mvns	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4013      	ands	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2203      	movs	r2, #3
 8001352:	401a      	ands	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	409a      	lsls	r2, r3
 800135a:	0013      	movs	r3, r2
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	4313      	orrs	r3, r2
 8001360:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d00b      	beq.n	8001388 <HAL_GPIO_Init+0xd8>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d007      	beq.n	8001388 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137c:	2b11      	cmp	r3, #17
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d130      	bne.n	80013ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	409a      	lsls	r2, r3
 8001396:	0013      	movs	r3, r2
 8001398:	43da      	mvns	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013be:	2201      	movs	r2, #1
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4013      	ands	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	2201      	movs	r2, #1
 80013d6:	401a      	ands	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d017      	beq.n	8001422 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4013      	ands	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4313      	orrs	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	2380      	movs	r3, #128	@ 0x80
 8001428:	055b      	lsls	r3, r3, #21
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_GPIO_Init+0x180>
 800142e:	e098      	b.n	8001562 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001430:	4a53      	ldr	r2, [pc, #332]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3318      	adds	r3, #24
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	589b      	ldr	r3, [r3, r2]
 800143c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2203      	movs	r2, #3
 8001442:	4013      	ands	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	220f      	movs	r2, #15
 8001448:	409a      	lsls	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	43da      	mvns	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	4013      	ands	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	23a0      	movs	r3, #160	@ 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	429a      	cmp	r2, r3
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x1e2>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a48      	ldr	r2, [pc, #288]	@ (8001584 <HAL_GPIO_Init+0x2d4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x1de>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a47      	ldr	r2, [pc, #284]	@ (8001588 <HAL_GPIO_Init+0x2d8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x1da>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a46      	ldr	r2, [pc, #280]	@ (800158c <HAL_GPIO_Init+0x2dc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x1d6>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a45      	ldr	r2, [pc, #276]	@ (8001590 <HAL_GPIO_Init+0x2e0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x1d2>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x1e4>
 8001482:	2306      	movs	r3, #6
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x1e4>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x1e4>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x1e4>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x1e4>
 8001492:	2300      	movs	r3, #0
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	2103      	movs	r1, #3
 8001498:	400a      	ands	r2, r1
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	4093      	lsls	r3, r2
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80014a4:	4936      	ldr	r1, [pc, #216]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3318      	adds	r3, #24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80014b2:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	58d3      	ldr	r3, [r2, r3]
 80014b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43da      	mvns	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	4013      	ands	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	025b      	lsls	r3, r3, #9
 80014cc:	4013      	ands	r3, r2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80014d8:	4929      	ldr	r1, [pc, #164]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80014e0:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 80014e2:	2384      	movs	r3, #132	@ 0x84
 80014e4:	58d3      	ldr	r3, [r2, r3]
 80014e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4013      	ands	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	029b      	lsls	r3, r3, #10
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001506:	491e      	ldr	r1, [pc, #120]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 8001508:	2284      	movs	r2, #132	@ 0x84
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43da      	mvns	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4013      	ands	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	035b      	lsls	r3, r3, #13
 8001526:	4013      	ands	r3, r2
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43da      	mvns	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	039b      	lsls	r3, r3, #14
 8001550:	4013      	ands	r3, r2
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_GPIO_Init+0x2d0>)
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	3301      	adds	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	40da      	lsrs	r2, r3
 8001570:	1e13      	subs	r3, r2, #0
 8001572:	d000      	beq.n	8001576 <HAL_GPIO_Init+0x2c6>
 8001574:	e6a4      	b.n	80012c0 <HAL_GPIO_Init+0x10>
  }
}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46c0      	nop			@ (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b006      	add	sp, #24
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021800 	.word	0x40021800
 8001584:	50000400 	.word	0x50000400
 8001588:	50000800 	.word	0x50000800
 800158c:	50000c00 	.word	0x50000c00
 8001590:	50001400 	.word	0x50001400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	0008      	movs	r0, r1
 800159e:	0011      	movs	r1, r2
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	1c02      	adds	r2, r0, #0
 80015a4:	801a      	strh	r2, [r3, #0]
 80015a6:	1c7b      	adds	r3, r7, #1
 80015a8:	1c0a      	adds	r2, r1, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ac:	1c7b      	adds	r3, r7, #1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b4:	1cbb      	adds	r3, r7, #2
 80015b6:	881a      	ldrh	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015be:	1cbb      	adds	r3, r7, #2
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1d0      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4013      	ands	r3, r2
 80015ea:	d100      	bne.n	80015ee <HAL_RCC_OscConfig+0x1e>
 80015ec:	e069      	b.n	80016c2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ee:	4bc8      	ldr	r3, [pc, #800]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2238      	movs	r2, #56	@ 0x38
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d105      	bne.n	800160a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d15d      	bne.n	80016c2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1bc      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	429a      	cmp	r2, r3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_OscConfig+0x56>
 8001616:	4bbe      	ldr	r3, [pc, #760]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4bbd      	ldr	r3, [pc, #756]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 800161c:	2180      	movs	r1, #128	@ 0x80
 800161e:	0249      	lsls	r1, r1, #9
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e020      	b.n	8001668 <HAL_RCC_OscConfig+0x98>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	23a0      	movs	r3, #160	@ 0xa0
 800162c:	02db      	lsls	r3, r3, #11
 800162e:	429a      	cmp	r2, r3
 8001630:	d10e      	bne.n	8001650 <HAL_RCC_OscConfig+0x80>
 8001632:	4bb7      	ldr	r3, [pc, #732]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4bb6      	ldr	r3, [pc, #728]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	02c9      	lsls	r1, r1, #11
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	4bb3      	ldr	r3, [pc, #716]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4bb2      	ldr	r3, [pc, #712]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	0249      	lsls	r1, r1, #9
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0x98>
 8001650:	4baf      	ldr	r3, [pc, #700]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4bae      	ldr	r3, [pc, #696]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001656:	49af      	ldr	r1, [pc, #700]	@ (8001914 <HAL_RCC_OscConfig+0x344>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4bac      	ldr	r3, [pc, #688]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4bab      	ldr	r3, [pc, #684]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001662:	49ad      	ldr	r1, [pc, #692]	@ (8001918 <HAL_RCC_OscConfig+0x348>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fca8 	bl	8000fc4 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800167a:	f7ff fca3 	bl	8000fc4 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	@ 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e17b      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168c:	4ba0      	ldr	r3, [pc, #640]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0xaa>
 8001698:	e013      	b.n	80016c2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fc93 	bl	8000fc4 <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fc8e 	bl	8000fc4 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e166      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b6:	4b96      	ldr	r3, [pc, #600]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0xfe>
 80016cc:	e086      	b.n	80017dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ce:	4b90      	ldr	r3, [pc, #576]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2238      	movs	r2, #56	@ 0x38
 80016d4:	4013      	ands	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d12f      	bne.n	800173e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e14c      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b89      	ldr	r3, [pc, #548]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a8b      	ldr	r2, [pc, #556]	@ (800191c <HAL_RCC_OscConfig+0x34c>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	021a      	lsls	r2, r3, #8
 80016fa:	4b85      	ldr	r3, [pc, #532]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d112      	bne.n	800172c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001706:	4b82      	ldr	r3, [pc, #520]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a85      	ldr	r2, [pc, #532]	@ (8001920 <HAL_RCC_OscConfig+0x350>)
 800170c:	4013      	ands	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	4b7e      	ldr	r3, [pc, #504]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800171a:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0adb      	lsrs	r3, r3, #11
 8001720:	2207      	movs	r2, #7
 8001722:	4013      	ands	r3, r2
 8001724:	4a7f      	ldr	r2, [pc, #508]	@ (8001924 <HAL_RCC_OscConfig+0x354>)
 8001726:	40da      	lsrs	r2, r3
 8001728:	4b7f      	ldr	r3, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x358>)
 800172a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800172c:	4b7f      	ldr	r3, [pc, #508]	@ (800192c <HAL_RCC_OscConfig+0x35c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff fbeb 	bl	8000f0c <HAL_InitTick>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d050      	beq.n	80017dc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e122      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d030      	beq.n	80017a8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001746:	4b72      	ldr	r3, [pc, #456]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a75      	ldr	r2, [pc, #468]	@ (8001920 <HAL_RCC_OscConfig+0x350>)
 800174c:	4013      	ands	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	4b6e      	ldr	r3, [pc, #440]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800175a:	4b6d      	ldr	r3, [pc, #436]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b6c      	ldr	r3, [pc, #432]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001760:	2180      	movs	r1, #128	@ 0x80
 8001762:	0049      	lsls	r1, r1, #1
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fc2c 	bl	8000fc4 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001772:	f7ff fc27 	bl	8000fc4 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0ff      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001784:	4b62      	ldr	r3, [pc, #392]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4013      	ands	r3, r2
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a61      	ldr	r2, [pc, #388]	@ (800191c <HAL_RCC_OscConfig+0x34c>)
 8001796:	4013      	ands	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	021a      	lsls	r2, r3, #8
 80017a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	e019      	b.n	80017dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80017a8:	4b59      	ldr	r3, [pc, #356]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b58      	ldr	r3, [pc, #352]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80017ae:	4960      	ldr	r1, [pc, #384]	@ (8001930 <HAL_RCC_OscConfig+0x360>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fc06 	bl	8000fc4 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80017be:	f7ff fc01 	bl	8000fc4 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0d9      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2208      	movs	r2, #8
 80017e2:	4013      	ands	r3, r2
 80017e4:	d042      	beq.n	800186c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80017e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2238      	movs	r2, #56	@ 0x38
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b18      	cmp	r3, #24
 80017f0:	d105      	bne.n	80017fe <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d138      	bne.n	800186c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0c2      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d019      	beq.n	800183a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001806:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001808:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800180a:	4b41      	ldr	r3, [pc, #260]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fbd7 	bl	8000fc4 <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800181c:	f7ff fbd2 	bl	8000fc4 <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0aa      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800182e:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0f1      	beq.n	800181c <HAL_RCC_OscConfig+0x24c>
 8001838:	e018      	b.n	800186c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800183a:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 800183c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001840:	2101      	movs	r1, #1
 8001842:	438a      	bics	r2, r1
 8001844:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fbbd 	bl	8000fc4 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001850:	f7ff fbb8 	bl	8000fc4 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e090      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d1f1      	bne.n	8001850 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2204      	movs	r2, #4
 8001872:	4013      	ands	r3, r2
 8001874:	d100      	bne.n	8001878 <HAL_RCC_OscConfig+0x2a8>
 8001876:	e084      	b.n	8001982 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001878:	230f      	movs	r3, #15
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001880:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2238      	movs	r2, #56	@ 0x38
 8001886:	4013      	ands	r3, r2
 8001888:	2b20      	cmp	r3, #32
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d000      	beq.n	8001896 <HAL_RCC_OscConfig+0x2c6>
 8001894:	e075      	b.n	8001982 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e074      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2e0>
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018ae:	e01c      	b.n	80018ea <HAL_RCC_OscConfig+0x31a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x302>
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018be:	2104      	movs	r1, #4
 80018c0:	430a      	orrs	r2, r1
 80018c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018ca:	2101      	movs	r1, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018d0:	e00b      	b.n	80018ea <HAL_RCC_OscConfig+0x31a>
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018d8:	2101      	movs	r1, #1
 80018da:	438a      	bics	r2, r1
 80018dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_RCC_OscConfig+0x340>)
 80018e4:	2104      	movs	r1, #4
 80018e6:	438a      	bics	r2, r1
 80018e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d028      	beq.n	8001944 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fb67 	bl	8000fc4 <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb62 	bl	8000fc4 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_RCC_OscConfig+0x364>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d915      	bls.n	8001938 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e039      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
 8001910:	40021000 	.word	0x40021000
 8001914:	fffeffff 	.word	0xfffeffff
 8001918:	fffbffff 	.word	0xfffbffff
 800191c:	ffff80ff 	.word	0xffff80ff
 8001920:	ffffc7ff 	.word	0xffffc7ff
 8001924:	02dc6c00 	.word	0x02dc6c00
 8001928:	20000000 	.word	0x20000000
 800192c:	2000001c 	.word	0x2000001c
 8001930:	fffffeff 	.word	0xfffffeff
 8001934:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <HAL_RCC_OscConfig+0x3bc>)
 800193a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d0dc      	beq.n	80018fc <HAL_RCC_OscConfig+0x32c>
 8001942:	e013      	b.n	800196c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb3e 	bl	8000fc4 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800194c:	e009      	b.n	8001962 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fb39 	bl	8000fc4 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <HAL_RCC_OscConfig+0x3c0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e010      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_RCC_OscConfig+0x3bc>)
 8001964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800196c:	230f      	movs	r3, #15
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_RCC_OscConfig+0x3bc>)
 8001978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <HAL_RCC_OscConfig+0x3bc>)
 800197c:	4905      	ldr	r1, [pc, #20]	@ (8001994 <HAL_RCC_OscConfig+0x3c4>)
 800197e:	400a      	ands	r2, r1
 8001980:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b006      	add	sp, #24
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	00001388 	.word	0x00001388
 8001994:	efffffff 	.word	0xefffffff

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0df      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b71      	ldr	r3, [pc, #452]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2207      	movs	r2, #7
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d91e      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2207      	movs	r2, #7
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019cc:	f7ff fafa 	bl	8000fc4 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80019d6:	f7ff faf5 	bl	8000fc4 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a65      	ldr	r2, [pc, #404]	@ (8001b78 <HAL_RCC_ClockConfig+0x1e0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0c0      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ea:	4b62      	ldr	r3, [pc, #392]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2207      	movs	r2, #7
 80019f0:	4013      	ands	r3, r2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d017      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2204      	movs	r2, #4
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a5b      	ldr	r2, [pc, #364]	@ (8001b80 <HAL_RCC_ClockConfig+0x1e8>)
 8001a12:	401a      	ands	r2, r3
 8001a14:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a16:	21b0      	movs	r1, #176	@ 0xb0
 8001a18:	0109      	lsls	r1, r1, #4
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1e:	4b57      	ldr	r3, [pc, #348]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4a58      	ldr	r2, [pc, #352]	@ (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d04b      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a44:	4b4d      	ldr	r3, [pc, #308]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d11f      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e08b      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a5c:	4b47      	ldr	r3, [pc, #284]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4013      	ands	r3, r2
 8001a66:	d113      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e07f      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a74:	4b41      	ldr	r3, [pc, #260]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e074      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	2202      	movs	r2, #2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e06d      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a90:	4b3a      	ldr	r3, [pc, #232]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2207      	movs	r2, #7
 8001a96:	4393      	bics	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa4:	f7ff fa8e 	bl	8000fc4 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff fa89 	bl	8000fc4 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b78 <HAL_RCC_ClockConfig+0x1e0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e054      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2238      	movs	r2, #56	@ 0x38
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1ec      	bne.n	8001aae <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2207      	movs	r2, #7
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d21e      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4393      	bics	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001af4:	f7ff fa66 	bl	8000fc4 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001afc:	e009      	b.n	8001b12 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7ff fa61 	bl	8000fc4 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4a1b      	ldr	r2, [pc, #108]	@ (8001b78 <HAL_RCC_ClockConfig+0x1e0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e02c      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2207      	movs	r2, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2204      	movs	r2, #4
 8001b26:	4013      	ands	r3, r2
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4a16      	ldr	r2, [pc, #88]	@ (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b3e:	f000 f82b 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b42:	0001      	movs	r1, r0
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001b46:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f4>)
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b54:	221f      	movs	r2, #31
 8001b56:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b58:	000a      	movs	r2, r1
 8001b5a:	40da      	lsrs	r2, r3
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_RCC_ClockConfig+0x1fc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff f9d1 	bl	8000f0c <HAL_InitTick>
 8001b6a:	0003      	movs	r3, r0
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40022000 	.word	0x40022000
 8001b78:	00001388 	.word	0x00001388
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	ffff84ff 	.word	0xffff84ff
 8001b84:	fffff0ff 	.word	0xfffff0ff
 8001b88:	ffff8fff 	.word	0xffff8fff
 8001b8c:	08003f58 	.word	0x08003f58
 8001b90:	20000000 	.word	0x20000000
 8001b94:	2000001c 	.word	0x2000001c

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x78>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2238      	movs	r2, #56	@ 0x38
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x78>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0adb      	lsrs	r3, r3, #11
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	4815      	ldr	r0, [pc, #84]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001bbe:	f7fe fab5 	bl	800012c <__udivsi3>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	e01e      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2238      	movs	r2, #56	@ 0x38
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2238      	movs	r2, #56	@ 0x38
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d103      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2238      	movs	r2, #56	@ 0x38
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b18      	cmp	r3, #24
 8001bf8:	d103      	bne.n	8001c02 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bfa:	23fa      	movs	r3, #250	@ 0xfa
 8001bfc:	01db      	lsls	r3, r3, #7
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	e001      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	02dc6c00 	.word	0x02dc6c00

08001c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c1c:	f7ff ffbc 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001c20:	0001      	movs	r1, r0
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_GetHCLKFreq+0x30>)
 8001c24:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	220f      	movs	r2, #15
 8001c2a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <HAL_RCC_GetHCLKFreq+0x34>)
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c32:	221f      	movs	r2, #31
 8001c34:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c36:	000a      	movs	r2, r1
 8001c38:	40da      	lsrs	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x38>)
 8001c3c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x38>)
 8001c40:	681b      	ldr	r3, [r3, #0]
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08003f58 	.word	0x08003f58
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c5c:	0001      	movs	r1, r0
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0b1b      	lsrs	r3, r3, #12
 8001c64:	2207      	movs	r2, #7
 8001c66:	401a      	ands	r2, r3
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	58d3      	ldr	r3, [r2, r3]
 8001c6e:	221f      	movs	r2, #31
 8001c70:	4013      	ands	r3, r2
 8001c72:	40d9      	lsrs	r1, r3
 8001c74:	000b      	movs	r3, r1
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08003f98 	.word	0x08003f98

08001c84 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c8c:	2313      	movs	r3, #19
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c94:	2312      	movs	r3, #18
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2240      	movs	r2, #64	@ 0x40
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d100      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001ca6:	e079      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca8:	2011      	movs	r0, #17
 8001caa:	183b      	adds	r3, r7, r0
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb0:	4b63      	ldr	r3, [pc, #396]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d110      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b60      	ldr	r3, [pc, #384]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cc2:	2180      	movs	r1, #128	@ 0x80
 8001cc4:	0549      	lsls	r1, r1, #21
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cca:	4b5d      	ldr	r3, [pc, #372]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	055b      	lsls	r3, r3, #21
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001cde:	4b58      	ldr	r3, [pc, #352]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ce2:	23c0      	movs	r3, #192	@ 0xc0
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d019      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d014      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001cfa:	4b51      	ldr	r3, [pc, #324]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfe:	4a51      	ldr	r2, [pc, #324]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d04:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d08:	4b4d      	ldr	r3, [pc, #308]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d0a:	2180      	movs	r1, #128	@ 0x80
 8001d0c:	0249      	lsls	r1, r1, #9
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d12:	4b4b      	ldr	r3, [pc, #300]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d16:	4b4a      	ldr	r3, [pc, #296]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d18:	494b      	ldr	r1, [pc, #300]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001d1e:	4b48      	ldr	r3, [pc, #288]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d016      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f94a 	bl	8000fc4 <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d34:	e00c      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff f945 	bl	8000fc4 <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4a42      	ldr	r2, [pc, #264]	@ (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d904      	bls.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001d46:	2313      	movs	r3, #19
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	701a      	strb	r2, [r3, #0]
          break;
 8001d4e:	e004      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d50:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d0ed      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001d5a:	2313      	movs	r3, #19
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d64:	4b36      	ldr	r3, [pc, #216]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	4a36      	ldr	r2, [pc, #216]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	4b33      	ldr	r3, [pc, #204]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d78:	e005      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d7a:	2312      	movs	r3, #18
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2213      	movs	r2, #19
 8001d80:	18ba      	adds	r2, r7, r2
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d86:	2311      	movs	r3, #17
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d94:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d96:	492e      	ldr	r1, [pc, #184]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	d009      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001da6:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001daa:	2203      	movs	r2, #3
 8001dac:	4393      	bics	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc8:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	4013      	ands	r3, r2
 8001de0:	d008      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	0899      	lsrs	r1, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e02:	4a15      	ldr	r2, [pc, #84]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2280      	movs	r2, #128	@ 0x80
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	22e0      	movs	r2, #224	@ 0xe0
 8001e22:	4393      	bics	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001e30:	2312      	movs	r3, #18
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b006      	add	sp, #24
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	40021000 	.word	0x40021000
 8001e44:	fffffcff 	.word	0xfffffcff
 8001e48:	fffeffff 	.word	0xfffeffff
 8001e4c:	00001388 	.word	0x00001388
 8001e50:	efffffff 	.word	0xefffffff
 8001e54:	ffffcfff 	.word	0xffffcfff
 8001e58:	ffff3fff 	.word	0xffff3fff

08001e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e04a      	b.n	8001f04 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	223d      	movs	r2, #61	@ 0x3d
 8001e72:	5c9b      	ldrb	r3, [r3, r2]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	223c      	movs	r2, #60	@ 0x3c
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fd01 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223d      	movs	r2, #61	@ 0x3d
 8001e8e:	2102      	movs	r1, #2
 8001e90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	f000 fb39 	bl	8002514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2248      	movs	r2, #72	@ 0x48
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	223e      	movs	r2, #62	@ 0x3e
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	223f      	movs	r2, #63	@ 0x3f
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2240      	movs	r2, #64	@ 0x40
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2241      	movs	r2, #65	@ 0x41
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2242      	movs	r2, #66	@ 0x42
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2243      	movs	r2, #67	@ 0x43
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2244      	movs	r2, #68	@ 0x44
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2245      	movs	r2, #69	@ 0x45
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2246      	movs	r2, #70	@ 0x46
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2247      	movs	r2, #71	@ 0x47
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	223d      	movs	r2, #61	@ 0x3d
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e04a      	b.n	8001fb4 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	223d      	movs	r2, #61	@ 0x3d
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d107      	bne.n	8001f3a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	223c      	movs	r2, #60	@ 0x3c
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 f841 	bl	8001fbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223d      	movs	r2, #61	@ 0x3d
 8001f3e:	2102      	movs	r1, #2
 8001f40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	f000 fae1 	bl	8002514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2248      	movs	r2, #72	@ 0x48
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	223e      	movs	r2, #62	@ 0x3e
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	223f      	movs	r2, #63	@ 0x3f
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2241      	movs	r2, #65	@ 0x41
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2242      	movs	r2, #66	@ 0x42
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2243      	movs	r2, #67	@ 0x43
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2244      	movs	r2, #68	@ 0x44
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2245      	movs	r2, #69	@ 0x45
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2246      	movs	r2, #70	@ 0x46
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2247      	movs	r2, #71	@ 0x47
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	223d      	movs	r2, #61	@ 0x3d
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001fc4:	46c0      	nop			@ (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <HAL_TIM_IC_Start_IT+0x22>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	223e      	movs	r2, #62	@ 0x3e
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	e023      	b.n	8002036 <HAL_TIM_IC_Start_IT+0x6a>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_IC_Start_IT+0x32>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	223f      	movs	r2, #63	@ 0x3f
 8001ff8:	5c9b      	ldrb	r3, [r3, r2]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	e01b      	b.n	8002036 <HAL_TIM_IC_Start_IT+0x6a>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d104      	bne.n	800200e <HAL_TIM_IC_Start_IT+0x42>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2240      	movs	r2, #64	@ 0x40
 8002008:	5c9b      	ldrb	r3, [r3, r2]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	e013      	b.n	8002036 <HAL_TIM_IC_Start_IT+0x6a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d104      	bne.n	800201e <HAL_TIM_IC_Start_IT+0x52>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2241      	movs	r2, #65	@ 0x41
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	e00b      	b.n	8002036 <HAL_TIM_IC_Start_IT+0x6a>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b10      	cmp	r3, #16
 8002022:	d104      	bne.n	800202e <HAL_TIM_IC_Start_IT+0x62>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2242      	movs	r2, #66	@ 0x42
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	e003      	b.n	8002036 <HAL_TIM_IC_Start_IT+0x6a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2243      	movs	r2, #67	@ 0x43
 8002032:	5c9b      	ldrb	r3, [r3, r2]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	220e      	movs	r2, #14
 8002038:	18ba      	adds	r2, r7, r2
 800203a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <HAL_TIM_IC_Start_IT+0x80>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2244      	movs	r2, #68	@ 0x44
 8002046:	5c9b      	ldrb	r3, [r3, r2]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e013      	b.n	8002074 <HAL_TIM_IC_Start_IT+0xa8>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d104      	bne.n	800205c <HAL_TIM_IC_Start_IT+0x90>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2245      	movs	r2, #69	@ 0x45
 8002056:	5c9b      	ldrb	r3, [r3, r2]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e00b      	b.n	8002074 <HAL_TIM_IC_Start_IT+0xa8>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b08      	cmp	r3, #8
 8002060:	d104      	bne.n	800206c <HAL_TIM_IC_Start_IT+0xa0>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2246      	movs	r2, #70	@ 0x46
 8002066:	5c9b      	ldrb	r3, [r3, r2]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e003      	b.n	8002074 <HAL_TIM_IC_Start_IT+0xa8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2247      	movs	r2, #71	@ 0x47
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	210d      	movs	r1, #13
 8002076:	187a      	adds	r2, r7, r1
 8002078:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800207a:	230e      	movs	r3, #14
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d103      	bne.n	800208c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002084:	187b      	adds	r3, r7, r1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d001      	beq.n	8002090 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0bd      	b.n	800220c <HAL_TIM_IC_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <HAL_TIM_IC_Start_IT+0xd4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	223e      	movs	r2, #62	@ 0x3e
 800209a:	2102      	movs	r1, #2
 800209c:	5499      	strb	r1, [r3, r2]
 800209e:	e023      	b.n	80020e8 <HAL_TIM_IC_Start_IT+0x11c>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d104      	bne.n	80020b0 <HAL_TIM_IC_Start_IT+0xe4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	223f      	movs	r2, #63	@ 0x3f
 80020aa:	2102      	movs	r1, #2
 80020ac:	5499      	strb	r1, [r3, r2]
 80020ae:	e01b      	b.n	80020e8 <HAL_TIM_IC_Start_IT+0x11c>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d104      	bne.n	80020c0 <HAL_TIM_IC_Start_IT+0xf4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	2102      	movs	r1, #2
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	e013      	b.n	80020e8 <HAL_TIM_IC_Start_IT+0x11c>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d104      	bne.n	80020d0 <HAL_TIM_IC_Start_IT+0x104>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	@ 0x41
 80020ca:	2102      	movs	r1, #2
 80020cc:	5499      	strb	r1, [r3, r2]
 80020ce:	e00b      	b.n	80020e8 <HAL_TIM_IC_Start_IT+0x11c>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d104      	bne.n	80020e0 <HAL_TIM_IC_Start_IT+0x114>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2242      	movs	r2, #66	@ 0x42
 80020da:	2102      	movs	r1, #2
 80020dc:	5499      	strb	r1, [r3, r2]
 80020de:	e003      	b.n	80020e8 <HAL_TIM_IC_Start_IT+0x11c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2243      	movs	r2, #67	@ 0x43
 80020e4:	2102      	movs	r1, #2
 80020e6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <HAL_TIM_IC_Start_IT+0x12c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2244      	movs	r2, #68	@ 0x44
 80020f2:	2102      	movs	r1, #2
 80020f4:	5499      	strb	r1, [r3, r2]
 80020f6:	e013      	b.n	8002120 <HAL_TIM_IC_Start_IT+0x154>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d104      	bne.n	8002108 <HAL_TIM_IC_Start_IT+0x13c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2245      	movs	r2, #69	@ 0x45
 8002102:	2102      	movs	r1, #2
 8002104:	5499      	strb	r1, [r3, r2]
 8002106:	e00b      	b.n	8002120 <HAL_TIM_IC_Start_IT+0x154>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b08      	cmp	r3, #8
 800210c:	d104      	bne.n	8002118 <HAL_TIM_IC_Start_IT+0x14c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2246      	movs	r2, #70	@ 0x46
 8002112:	2102      	movs	r1, #2
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	e003      	b.n	8002120 <HAL_TIM_IC_Start_IT+0x154>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2247      	movs	r2, #71	@ 0x47
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d02a      	beq.n	800217c <HAL_TIM_IC_Start_IT+0x1b0>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b0c      	cmp	r3, #12
 800212a:	d830      	bhi.n	800218e <HAL_TIM_IC_Start_IT+0x1c2>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b08      	cmp	r3, #8
 8002130:	d01b      	beq.n	800216a <HAL_TIM_IC_Start_IT+0x19e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d82a      	bhi.n	800218e <HAL_TIM_IC_Start_IT+0x1c2>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IC_Start_IT+0x17a>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d009      	beq.n	8002158 <HAL_TIM_IC_Start_IT+0x18c>
 8002144:	e023      	b.n	800218e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2102      	movs	r1, #2
 8002152:	430a      	orrs	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
      break;
 8002156:	e01f      	b.n	8002198 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2104      	movs	r1, #4
 8002164:	430a      	orrs	r2, r1
 8002166:	60da      	str	r2, [r3, #12]
      break;
 8002168:	e016      	b.n	8002198 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2108      	movs	r1, #8
 8002176:	430a      	orrs	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
      break;
 800217a:	e00d      	b.n	8002198 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2110      	movs	r1, #16
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]
      break;
 800218c:	e004      	b.n	8002198 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800218e:	230f      	movs	r3, #15
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d131      	bne.n	8002206 <HAL_TIM_IC_Start_IT+0x23a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 fbda 	bl	8002964 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_TIM_IC_Start_IT+0x248>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_TIM_IC_Start_IT+0x1f8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a16      	ldr	r2, [pc, #88]	@ (8002218 <HAL_TIM_IC_Start_IT+0x24c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d116      	bne.n	80021f2 <HAL_TIM_IC_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4a14      	ldr	r2, [pc, #80]	@ (800221c <HAL_TIM_IC_Start_IT+0x250>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d016      	beq.n	8002204 <HAL_TIM_IC_Start_IT+0x238>
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	429a      	cmp	r2, r3
 80021de:	d011      	beq.n	8002204 <HAL_TIM_IC_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	e008      	b.n	8002204 <HAL_TIM_IC_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e000      	b.n	8002206 <HAL_TIM_IC_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002204:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002206:	230f      	movs	r3, #15
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	781b      	ldrb	r3, [r3, #0]
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40012c00 	.word	0x40012c00
 8002218:	40000400 	.word	0x40000400
 800221c:	00010007 	.word	0x00010007

08002220 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2317      	movs	r3, #23
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	223c      	movs	r2, #60	@ 0x3c
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_TIM_IC_ConfigChannel+0x22>
 800223e:	2302      	movs	r3, #2
 8002240:	e08c      	b.n	800235c <HAL_TIM_IC_ConfigChannel+0x13c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	223c      	movs	r2, #60	@ 0x3c
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11b      	bne.n	8002288 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002260:	f000 f9ca 	bl	80025f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	210c      	movs	r1, #12
 8002270:	438a      	bics	r2, r1
 8002272:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6999      	ldr	r1, [r3, #24]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	e062      	b.n	800234e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d11c      	bne.n	80022c8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800229e:	f000 fa2b 	bl	80026f8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	492d      	ldr	r1, [pc, #180]	@ (8002364 <HAL_TIM_IC_ConfigChannel+0x144>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6999      	ldr	r1, [r3, #24]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	021a      	lsls	r2, r3, #8
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	619a      	str	r2, [r3, #24]
 80022c6:	e042      	b.n	800234e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11b      	bne.n	8002306 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80022de:	f000 fa7f 	bl	80027e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	210c      	movs	r1, #12
 80022ee:	438a      	bics	r2, r1
 80022f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69d9      	ldr	r1, [r3, #28]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	61da      	str	r2, [r3, #28]
 8002304:	e023      	b.n	800234e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d11c      	bne.n	8002346 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800231c:	f000 faa0 	bl	8002860 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	490e      	ldr	r1, [pc, #56]	@ (8002364 <HAL_TIM_IC_ConfigChannel+0x144>)
 800232c:	400a      	ands	r2, r1
 800232e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69d9      	ldr	r1, [r3, #28]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	021a      	lsls	r2, r3, #8
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	61da      	str	r2, [r3, #28]
 8002344:	e003      	b.n	800234e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002346:	2317      	movs	r3, #23
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	223c      	movs	r2, #60	@ 0x3c
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]

  return status;
 8002356:	2317      	movs	r3, #23
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	781b      	ldrb	r3, [r3, #0]
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b006      	add	sp, #24
 8002362:	bd80      	pop	{r7, pc}
 8002364:	fffff3ff 	.word	0xfffff3ff

08002368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	230f      	movs	r3, #15
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223c      	movs	r2, #60	@ 0x3c
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIM_ConfigClockSource+0x20>
 8002384:	2302      	movs	r3, #2
 8002386:	e0bc      	b.n	8002502 <HAL_TIM_ConfigClockSource+0x19a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	223c      	movs	r2, #60	@ 0x3c
 800238c:	2101      	movs	r1, #1
 800238e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	223d      	movs	r2, #61	@ 0x3d
 8002394:	2102      	movs	r1, #2
 8002396:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4a5a      	ldr	r2, [pc, #360]	@ (800250c <HAL_TIM_ConfigClockSource+0x1a4>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4a59      	ldr	r2, [pc, #356]	@ (8002510 <HAL_TIM_ConfigClockSource+0x1a8>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2280      	movs	r2, #128	@ 0x80
 80023be:	0192      	lsls	r2, r2, #6
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d040      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xde>
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	0192      	lsls	r2, r2, #6
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d900      	bls.n	80023ce <HAL_TIM_ConfigClockSource+0x66>
 80023cc:	e088      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023ce:	2280      	movs	r2, #128	@ 0x80
 80023d0:	0152      	lsls	r2, r2, #5
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_TIM_ConfigClockSource+0x70>
 80023d6:	e088      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x182>
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	0152      	lsls	r2, r2, #5
 80023dc:	4293      	cmp	r3, r2
 80023de:	d900      	bls.n	80023e2 <HAL_TIM_ConfigClockSource+0x7a>
 80023e0:	e07e      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023e2:	2b70      	cmp	r3, #112	@ 0x70
 80023e4:	d018      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xb0>
 80023e6:	d900      	bls.n	80023ea <HAL_TIM_ConfigClockSource+0x82>
 80023e8:	e07a      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023ea:	2b60      	cmp	r3, #96	@ 0x60
 80023ec:	d04f      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x126>
 80023ee:	d900      	bls.n	80023f2 <HAL_TIM_ConfigClockSource+0x8a>
 80023f0:	e076      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023f2:	2b50      	cmp	r3, #80	@ 0x50
 80023f4:	d03b      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x106>
 80023f6:	d900      	bls.n	80023fa <HAL_TIM_ConfigClockSource+0x92>
 80023f8:	e072      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023fa:	2b40      	cmp	r3, #64	@ 0x40
 80023fc:	d057      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x146>
 80023fe:	d900      	bls.n	8002402 <HAL_TIM_ConfigClockSource+0x9a>
 8002400:	e06e      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 8002402:	2b30      	cmp	r3, #48	@ 0x30
 8002404:	d063      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002406:	d86b      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 8002408:	2b20      	cmp	r3, #32
 800240a:	d060      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 800240c:	d868      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d05d      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002412:	2b10      	cmp	r3, #16
 8002414:	d05b      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002416:	e063      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002428:	f000 fa7c 	bl	8002924 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2277      	movs	r2, #119	@ 0x77
 8002438:	4313      	orrs	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
      break;
 8002444:	e052      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002456:	f000 fa65 	bl	8002924 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	01c9      	lsls	r1, r1, #7
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
      break;
 800246c:	e03e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800247a:	001a      	movs	r2, r3
 800247c:	f000 f90e 	bl	800269c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2150      	movs	r1, #80	@ 0x50
 8002486:	0018      	movs	r0, r3
 8002488:	f000 fa30 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 800248c:	e02e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800249a:	001a      	movs	r2, r3
 800249c:	f000 f96e 	bl	800277c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2160      	movs	r1, #96	@ 0x60
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fa20 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 80024ac:	e01e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ba:	001a      	movs	r2, r3
 80024bc:	f000 f8ee 	bl	800269c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2140      	movs	r1, #64	@ 0x40
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 fa10 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 80024cc:	e00e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f000 fa07 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 80024de:	e005      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024e0:	230f      	movs	r3, #15
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
      break;
 80024e8:	e000      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024ea:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223d      	movs	r2, #61	@ 0x3d
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	223c      	movs	r2, #60	@ 0x3c
 80024f8:	2100      	movs	r1, #0
 80024fa:	5499      	strb	r1, [r3, r2]

  return status;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	ffceff88 	.word	0xffceff88
 8002510:	ffff00ff 	.word	0xffff00ff

08002514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a2e      	ldr	r2, [pc, #184]	@ (80025e0 <TIM_Base_SetConfig+0xcc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <TIM_Base_SetConfig+0x20>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a2d      	ldr	r2, [pc, #180]	@ (80025e4 <TIM_Base_SetConfig+0xd0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2270      	movs	r2, #112	@ 0x70
 8002538:	4393      	bics	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a25      	ldr	r2, [pc, #148]	@ (80025e0 <TIM_Base_SetConfig+0xcc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00f      	beq.n	800256e <TIM_Base_SetConfig+0x5a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a24      	ldr	r2, [pc, #144]	@ (80025e4 <TIM_Base_SetConfig+0xd0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00b      	beq.n	800256e <TIM_Base_SetConfig+0x5a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a23      	ldr	r2, [pc, #140]	@ (80025e8 <TIM_Base_SetConfig+0xd4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <TIM_Base_SetConfig+0x5a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <TIM_Base_SetConfig+0xd8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <TIM_Base_SetConfig+0x5a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a21      	ldr	r2, [pc, #132]	@ (80025f0 <TIM_Base_SetConfig+0xdc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d108      	bne.n	8002580 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a20      	ldr	r2, [pc, #128]	@ (80025f4 <TIM_Base_SetConfig+0xe0>)
 8002572:	4013      	ands	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	4393      	bics	r3, r2
 8002586:	001a      	movs	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <TIM_Base_SetConfig+0xcc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d007      	beq.n	80025b8 <TIM_Base_SetConfig+0xa4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <TIM_Base_SetConfig+0xd8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0xa4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0f      	ldr	r2, [pc, #60]	@ (80025f0 <TIM_Base_SetConfig+0xdc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2204      	movs	r2, #4
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]
}
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40002000 	.word	0x40002000
 80025ec:	40014400 	.word	0x40014400
 80025f0:	40014800 	.word	0x40014800
 80025f4:	fffffcff 	.word	0xfffffcff

080025f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2201      	movs	r2, #1
 8002612:	4393      	bics	r3, r2
 8002614:	001a      	movs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <TIM_TI1_SetConfig+0x9c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_TI1_SetConfig+0x38>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <TIM_TI1_SetConfig+0xa0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <TIM_TI1_SetConfig+0x3c>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <TIM_TI1_SetConfig+0x3e>
 8002634:	2300      	movs	r3, #0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2203      	movs	r2, #3
 800263e:	4393      	bics	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e003      	b.n	8002654 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2201      	movs	r2, #1
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	22f0      	movs	r2, #240	@ 0xf0
 8002658:	4393      	bics	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	22ff      	movs	r2, #255	@ 0xff
 8002662:	4013      	ands	r3, r2
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	220a      	movs	r2, #10
 800266e:	4393      	bics	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	220a      	movs	r2, #10
 8002676:	4013      	ands	r3, r2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	621a      	str	r2, [r3, #32]
}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b006      	add	sp, #24
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40000400 	.word	0x40000400

0800269c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4393      	bics	r3, r2
 80026b6:	001a      	movs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	22f0      	movs	r2, #240	@ 0xf0
 80026c6:	4393      	bics	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	220a      	movs	r2, #10
 80026d8:	4393      	bics	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	46c0      	nop			@ (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b006      	add	sp, #24
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	2210      	movs	r2, #16
 8002712:	4393      	bics	r3, r2
 8002714:	001a      	movs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4a14      	ldr	r2, [pc, #80]	@ (8002774 <TIM_TI2_SetConfig+0x7c>)
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <TIM_TI2_SetConfig+0x80>)
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	031b      	lsls	r3, r3, #12
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	22a0      	movs	r2, #160	@ 0xa0
 800274c:	4393      	bics	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	22a0      	movs	r2, #160	@ 0xa0
 8002756:	4013      	ands	r3, r2
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b006      	add	sp, #24
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	fffffcff 	.word	0xfffffcff
 8002778:	ffff0fff 	.word	0xffff0fff

0800277c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	2210      	movs	r2, #16
 8002794:	4393      	bics	r3, r2
 8002796:	001a      	movs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	@ (80027dc <TIM_TI2_ConfigInputStage+0x60>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	031b      	lsls	r3, r3, #12
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	22a0      	movs	r2, #160	@ 0xa0
 80027b8:	4393      	bics	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	621a      	str	r2, [r3, #32]
}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b006      	add	sp, #24
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	ffff0fff 	.word	0xffff0fff

080027e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a17      	ldr	r2, [pc, #92]	@ (8002858 <TIM_TI3_SetConfig+0x78>)
 80027fa:	401a      	ands	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2203      	movs	r2, #3
 800280a:	4393      	bics	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	22f0      	movs	r2, #240	@ 0xf0
 800281a:	4393      	bics	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	22ff      	movs	r2, #255	@ 0xff
 8002824:	4013      	ands	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	4a0b      	ldr	r2, [pc, #44]	@ (800285c <TIM_TI3_SetConfig+0x7c>)
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	23a0      	movs	r3, #160	@ 0xa0
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4013      	ands	r3, r2
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	621a      	str	r2, [r3, #32]
}
 8002850:	46c0      	nop			@ (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b006      	add	sp, #24
 8002856:	bd80      	pop	{r7, pc}
 8002858:	fffffeff 	.word	0xfffffeff
 800285c:	fffff5ff 	.word	0xfffff5ff

08002860 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a18      	ldr	r2, [pc, #96]	@ (80028dc <TIM_TI4_SetConfig+0x7c>)
 800287a:	401a      	ands	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <TIM_TI4_SetConfig+0x80>)
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <TIM_TI4_SetConfig+0x84>)
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	031b      	lsls	r3, r3, #12
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <TIM_TI4_SetConfig+0x88>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	031a      	lsls	r2, r3, #12
 80028ba:	23a0      	movs	r3, #160	@ 0xa0
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	4013      	ands	r3, r2
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b006      	add	sp, #24
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	ffffefff 	.word	0xffffefff
 80028e0:	fffffcff 	.word	0xfffffcff
 80028e4:	ffff0fff 	.word	0xffff0fff
 80028e8:	ffff5fff 	.word	0xffff5fff

080028ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a08      	ldr	r2, [pc, #32]	@ (8002920 <TIM_ITRx_SetConfig+0x34>)
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	2207      	movs	r2, #7
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b004      	add	sp, #16
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	ffcfff8f 	.word	0xffcfff8f

08002924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <TIM_ETR_SetConfig+0x3c>)
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	431a      	orrs	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b006      	add	sp, #24
 800295e:	bd80      	pop	{r7, pc}
 8002960:	ffff00ff 	.word	0xffff00ff

08002964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	221f      	movs	r2, #31
 8002974:	4013      	ands	r3, r2
 8002976:	2201      	movs	r2, #1
 8002978:	409a      	lsls	r2, r3
 800297a:	0013      	movs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	43d2      	mvns	r2, r2
 8002986:	401a      	ands	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	211f      	movs	r1, #31
 8002994:	400b      	ands	r3, r1
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4099      	lsls	r1, r3
 800299a:	000b      	movs	r3, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b006      	add	sp, #24
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	223c      	movs	r2, #60	@ 0x3c
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e04a      	b.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	223c      	movs	r2, #60	@ 0x3c
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	223d      	movs	r2, #61	@ 0x3d
 80029d0:	2102      	movs	r1, #2
 80029d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2270      	movs	r2, #112	@ 0x70
 8002a04:	4393      	bics	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a10      	ldr	r2, [pc, #64]	@ (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	4393      	bics	r3, r2
 8002a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	223d      	movs	r2, #61	@ 0x3d
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	223c      	movs	r2, #60	@ 0x3c
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	ff0fffff 	.word	0xff0fffff
 8002a6c:	40000400 	.word	0x40000400

08002a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e046      	b.n	8002b10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2288      	movs	r2, #136	@ 0x88
 8002a86:	589b      	ldr	r3, [r3, r2]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2284      	movs	r2, #132	@ 0x84
 8002a90:	2100      	movs	r1, #0
 8002a92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fd ff42 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2288      	movs	r2, #136	@ 0x88
 8002aa0:	2124      	movs	r1, #36	@ 0x24
 8002aa2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fa4e 	bl	8002f60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f8cc 	bl	8002c64 <UART_SetConfig>
 8002acc:	0003      	movs	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e01c      	b.n	8002b10 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	490d      	ldr	r1, [pc, #52]	@ (8002b18 <HAL_UART_Init+0xa8>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	212a      	movs	r1, #42	@ 0x2a
 8002af2:	438a      	bics	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 fadd 	bl	80030c8 <UART_CheckIdleState>
 8002b0e:	0003      	movs	r3, r0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	ffffb7ff 	.word	0xffffb7ff

08002b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	1dbb      	adds	r3, r7, #6
 8002b2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2288      	movs	r2, #136	@ 0x88
 8002b30:	589b      	ldr	r3, [r3, r2]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d000      	beq.n	8002b38 <HAL_UART_Transmit+0x1c>
 8002b36:	e090      	b.n	8002c5a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_UART_Transmit+0x2a>
 8002b3e:	1dbb      	adds	r3, r7, #6
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e088      	b.n	8002c5c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	015b      	lsls	r3, r3, #5
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d109      	bne.n	8002b6a <HAL_UART_Transmit+0x4e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d001      	beq.n	8002b6a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e078      	b.n	8002c5c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2290      	movs	r2, #144	@ 0x90
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2288      	movs	r2, #136	@ 0x88
 8002b76:	2121      	movs	r1, #33	@ 0x21
 8002b78:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7a:	f7fe fa23 	bl	8000fc4 <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1dba      	adds	r2, r7, #6
 8002b86:	2154      	movs	r1, #84	@ 0x54
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1dba      	adds	r2, r7, #6
 8002b90:	2156      	movs	r1, #86	@ 0x56
 8002b92:	8812      	ldrh	r2, [r2, #0]
 8002b94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	015b      	lsls	r3, r3, #5
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d108      	bne.n	8002bb4 <HAL_UART_Transmit+0x98>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e003      	b.n	8002bbc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bbc:	e030      	b.n	8002c20 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2180      	movs	r1, #128	@ 0x80
 8002bcc:	f000 fb26 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2288      	movs	r2, #136	@ 0x88
 8002bd8:	2120      	movs	r1, #32
 8002bda:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e03d      	b.n	8002c5c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	001a      	movs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	05d2      	lsls	r2, r2, #23
 8002bf2:	0dd2      	lsrs	r2, r2, #23
 8002bf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	e007      	b.n	8002c0e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2256      	movs	r2, #86	@ 0x56
 8002c12:	5a9b      	ldrh	r3, [r3, r2]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b299      	uxth	r1, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2256      	movs	r2, #86	@ 0x56
 8002c1e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2256      	movs	r2, #86	@ 0x56
 8002c24:	5a9b      	ldrh	r3, [r3, r2]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1c8      	bne.n	8002bbe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	0013      	movs	r3, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	2140      	movs	r1, #64	@ 0x40
 8002c3a:	f000 faef 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2288      	movs	r2, #136	@ 0x88
 8002c46:	2120      	movs	r1, #32
 8002c48:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e006      	b.n	8002c5c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2288      	movs	r2, #136	@ 0x88
 8002c52:	2120      	movs	r1, #32
 8002c54:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b008      	add	sp, #32
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c6c:	231e      	movs	r3, #30
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4aab      	ldr	r2, [pc, #684]	@ (8002f40 <UART_SetConfig+0x2dc>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4aa6      	ldr	r2, [pc, #664]	@ (8002f44 <UART_SetConfig+0x2e0>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a9d      	ldr	r2, [pc, #628]	@ (8002f48 <UART_SetConfig+0x2e4>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	4393      	bics	r3, r2
 8002cea:	0019      	movs	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a93      	ldr	r2, [pc, #588]	@ (8002f4c <UART_SetConfig+0x2e8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d127      	bne.n	8002d52 <UART_SetConfig+0xee>
 8002d02:	4b93      	ldr	r3, [pc, #588]	@ (8002f50 <UART_SetConfig+0x2ec>)
 8002d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d06:	2203      	movs	r2, #3
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d017      	beq.n	8002d3e <UART_SetConfig+0xda>
 8002d0e:	d81b      	bhi.n	8002d48 <UART_SetConfig+0xe4>
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d00a      	beq.n	8002d2a <UART_SetConfig+0xc6>
 8002d14:	d818      	bhi.n	8002d48 <UART_SetConfig+0xe4>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <UART_SetConfig+0xbc>
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d00a      	beq.n	8002d34 <UART_SetConfig+0xd0>
 8002d1e:	e013      	b.n	8002d48 <UART_SetConfig+0xe4>
 8002d20:	231f      	movs	r3, #31
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e021      	b.n	8002d6e <UART_SetConfig+0x10a>
 8002d2a:	231f      	movs	r3, #31
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2202      	movs	r2, #2
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e01c      	b.n	8002d6e <UART_SetConfig+0x10a>
 8002d34:	231f      	movs	r3, #31
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	2204      	movs	r2, #4
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e017      	b.n	8002d6e <UART_SetConfig+0x10a>
 8002d3e:	231f      	movs	r3, #31
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2208      	movs	r2, #8
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	e012      	b.n	8002d6e <UART_SetConfig+0x10a>
 8002d48:	231f      	movs	r3, #31
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e00d      	b.n	8002d6e <UART_SetConfig+0x10a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7f      	ldr	r2, [pc, #508]	@ (8002f54 <UART_SetConfig+0x2f0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d104      	bne.n	8002d66 <UART_SetConfig+0x102>
 8002d5c:	231f      	movs	r3, #31
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e003      	b.n	8002d6e <UART_SetConfig+0x10a>
 8002d66:	231f      	movs	r3, #31
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	2380      	movs	r3, #128	@ 0x80
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d000      	beq.n	8002d7c <UART_SetConfig+0x118>
 8002d7a:	e06f      	b.n	8002e5c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002d7c:	231f      	movs	r3, #31
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d01f      	beq.n	8002dc6 <UART_SetConfig+0x162>
 8002d86:	dc22      	bgt.n	8002dce <UART_SetConfig+0x16a>
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d017      	beq.n	8002dbc <UART_SetConfig+0x158>
 8002d8c:	dc1f      	bgt.n	8002dce <UART_SetConfig+0x16a>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <UART_SetConfig+0x134>
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d005      	beq.n	8002da2 <UART_SetConfig+0x13e>
 8002d96:	e01a      	b.n	8002dce <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d98:	f7fe ff5c 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	61bb      	str	r3, [r7, #24]
        break;
 8002da0:	e01c      	b.n	8002ddc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002da2:	4b6b      	ldr	r3, [pc, #428]	@ (8002f50 <UART_SetConfig+0x2ec>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2207      	movs	r2, #7
 8002daa:	4013      	ands	r3, r2
 8002dac:	3301      	adds	r3, #1
 8002dae:	0019      	movs	r1, r3
 8002db0:	4869      	ldr	r0, [pc, #420]	@ (8002f58 <UART_SetConfig+0x2f4>)
 8002db2:	f7fd f9bb 	bl	800012c <__udivsi3>
 8002db6:	0003      	movs	r3, r0
 8002db8:	61bb      	str	r3, [r7, #24]
        break;
 8002dba:	e00f      	b.n	8002ddc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dbc:	f7fe feec 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]
        break;
 8002dc4:	e00a      	b.n	8002ddc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	61bb      	str	r3, [r7, #24]
        break;
 8002dcc:	e006      	b.n	8002ddc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dd2:	231e      	movs	r3, #30
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
        break;
 8002dda:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d100      	bne.n	8002de4 <UART_SetConfig+0x180>
 8002de2:	e097      	b.n	8002f14 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de8:	4b5c      	ldr	r3, [pc, #368]	@ (8002f5c <UART_SetConfig+0x2f8>)
 8002dea:	0052      	lsls	r2, r2, #1
 8002dec:	5ad3      	ldrh	r3, [r2, r3]
 8002dee:	0019      	movs	r1, r3
 8002df0:	69b8      	ldr	r0, [r7, #24]
 8002df2:	f7fd f99b 	bl	800012c <__udivsi3>
 8002df6:	0003      	movs	r3, r0
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	18d2      	adds	r2, r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0019      	movs	r1, r3
 8002e08:	0010      	movs	r0, r2
 8002e0a:	f7fd f98f 	bl	800012c <__udivsi3>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b0f      	cmp	r3, #15
 8002e16:	d91c      	bls.n	8002e52 <UART_SetConfig+0x1ee>
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	025b      	lsls	r3, r3, #9
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d217      	bcs.n	8002e52 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	200e      	movs	r0, #14
 8002e28:	183b      	adds	r3, r7, r0
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2207      	movs	r2, #7
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b299      	uxth	r1, r3
 8002e3c:	183b      	adds	r3, r7, r0
 8002e3e:	183a      	adds	r2, r7, r0
 8002e40:	8812      	ldrh	r2, [r2, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	183a      	adds	r2, r7, r0
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	e060      	b.n	8002f14 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e52:	231e      	movs	r3, #30
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e05b      	b.n	8002f14 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e5c:	231f      	movs	r3, #31
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d01f      	beq.n	8002ea6 <UART_SetConfig+0x242>
 8002e66:	dc22      	bgt.n	8002eae <UART_SetConfig+0x24a>
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d017      	beq.n	8002e9c <UART_SetConfig+0x238>
 8002e6c:	dc1f      	bgt.n	8002eae <UART_SetConfig+0x24a>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <UART_SetConfig+0x214>
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d005      	beq.n	8002e82 <UART_SetConfig+0x21e>
 8002e76:	e01a      	b.n	8002eae <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e78:	f7fe feec 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	61bb      	str	r3, [r7, #24]
        break;
 8002e80:	e01c      	b.n	8002ebc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002e82:	4b33      	ldr	r3, [pc, #204]	@ (8002f50 <UART_SetConfig+0x2ec>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2207      	movs	r2, #7
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	0019      	movs	r1, r3
 8002e90:	4831      	ldr	r0, [pc, #196]	@ (8002f58 <UART_SetConfig+0x2f4>)
 8002e92:	f7fd f94b 	bl	800012c <__udivsi3>
 8002e96:	0003      	movs	r3, r0
 8002e98:	61bb      	str	r3, [r7, #24]
        break;
 8002e9a:	e00f      	b.n	8002ebc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9c:	f7fe fe7c 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	61bb      	str	r3, [r7, #24]
        break;
 8002ea4:	e00a      	b.n	8002ebc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea6:	2380      	movs	r3, #128	@ 0x80
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	61bb      	str	r3, [r7, #24]
        break;
 8002eac:	e006      	b.n	8002ebc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eb2:	231e      	movs	r3, #30
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
        break;
 8002eba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d028      	beq.n	8002f14 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ec6:	4b25      	ldr	r3, [pc, #148]	@ (8002f5c <UART_SetConfig+0x2f8>)
 8002ec8:	0052      	lsls	r2, r2, #1
 8002eca:	5ad3      	ldrh	r3, [r2, r3]
 8002ecc:	0019      	movs	r1, r3
 8002ece:	69b8      	ldr	r0, [r7, #24]
 8002ed0:	f7fd f92c 	bl	800012c <__udivsi3>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	18d2      	adds	r2, r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	f7fd f920 	bl	800012c <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	d90a      	bls.n	8002f0c <UART_SetConfig+0x2a8>
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d205      	bcs.n	8002f0c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	e003      	b.n	8002f14 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f0c:	231e      	movs	r3, #30
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	226a      	movs	r2, #106	@ 0x6a
 8002f18:	2101      	movs	r1, #1
 8002f1a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2268      	movs	r2, #104	@ 0x68
 8002f20:	2101      	movs	r1, #1
 8002f22:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002f30:	231e      	movs	r3, #30
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b008      	add	sp, #32
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	cfff69f3 	.word	0xcfff69f3
 8002f44:	ffffcfff 	.word	0xffffcfff
 8002f48:	11fff4ff 	.word	0x11fff4ff
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40004400 	.word	0x40004400
 8002f58:	02dc6c00 	.word	0x02dc6c00
 8002f5c:	08003fc0 	.word	0x08003fc0

08002f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a4a      	ldr	r2, [pc, #296]	@ (80030a4 <UART_AdvFeatureConfig+0x144>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	d00b      	beq.n	8002fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a43      	ldr	r2, [pc, #268]	@ (80030a8 <UART_AdvFeatureConfig+0x148>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80030ac <UART_AdvFeatureConfig+0x14c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a34      	ldr	r2, [pc, #208]	@ (80030b0 <UART_AdvFeatureConfig+0x150>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a2c      	ldr	r2, [pc, #176]	@ (80030b4 <UART_AdvFeatureConfig+0x154>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	2220      	movs	r2, #32
 8003018:	4013      	ands	r3, r2
 800301a:	d00b      	beq.n	8003034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4a25      	ldr	r2, [pc, #148]	@ (80030b8 <UART_AdvFeatureConfig+0x158>)
 8003024:	4013      	ands	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	2240      	movs	r2, #64	@ 0x40
 800303a:	4013      	ands	r3, r2
 800303c:	d01d      	beq.n	800307a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <UART_AdvFeatureConfig+0x15c>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	035b      	lsls	r3, r3, #13
 800305e:	429a      	cmp	r2, r3
 8003060:	d10b      	bne.n	800307a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a15      	ldr	r2, [pc, #84]	@ (80030c0 <UART_AdvFeatureConfig+0x160>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	4013      	ands	r3, r2
 8003082:	d00b      	beq.n	800309c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a0e      	ldr	r2, [pc, #56]	@ (80030c4 <UART_AdvFeatureConfig+0x164>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	ffff7fff 	.word	0xffff7fff
 80030a8:	fffdffff 	.word	0xfffdffff
 80030ac:	fffeffff 	.word	0xfffeffff
 80030b0:	fffbffff 	.word	0xfffbffff
 80030b4:	ffffefff 	.word	0xffffefff
 80030b8:	ffffdfff 	.word	0xffffdfff
 80030bc:	ffefffff 	.word	0xffefffff
 80030c0:	ff9fffff 	.word	0xff9fffff
 80030c4:	fff7ffff 	.word	0xfff7ffff

080030c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b092      	sub	sp, #72	@ 0x48
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2290      	movs	r2, #144	@ 0x90
 80030d4:	2100      	movs	r1, #0
 80030d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030d8:	f7fd ff74 	bl	8000fc4 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2208      	movs	r2, #8
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d12d      	bne.n	800314a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f0:	2280      	movs	r2, #128	@ 0x80
 80030f2:	0391      	lsls	r1, r2, #14
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4a47      	ldr	r2, [pc, #284]	@ (8003214 <UART_CheckIdleState+0x14c>)
 80030f8:	9200      	str	r2, [sp, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f000 f88e 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d022      	beq.n	800314a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003104:	f3ef 8310 	mrs	r3, PRIMASK
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800310c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800310e:	2301      	movs	r3, #1
 8003110:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			@ (mov r8, r8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	f383 8810 	msr	PRIMASK, r3
}
 8003134:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2288      	movs	r2, #136	@ 0x88
 800313a:	2120      	movs	r1, #32
 800313c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2284      	movs	r2, #132	@ 0x84
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e060      	b.n	800320c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	2b04      	cmp	r3, #4
 8003156:	d146      	bne.n	80031e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800315a:	2280      	movs	r2, #128	@ 0x80
 800315c:	03d1      	lsls	r1, r2, #15
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4a2c      	ldr	r2, [pc, #176]	@ (8003214 <UART_CheckIdleState+0x14c>)
 8003162:	9200      	str	r2, [sp, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	f000 f859 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d03b      	beq.n	80031e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800316e:	f3ef 8310 	mrs	r3, PRIMASK
 8003172:	60fb      	str	r3, [r7, #12]
  return(result);
 8003174:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
 8003178:	2301      	movs	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f383 8810 	msr	PRIMASK, r3
}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4922      	ldr	r1, [pc, #136]	@ (8003218 <UART_CheckIdleState+0x150>)
 8003190:	400a      	ands	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003196:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f383 8810 	msr	PRIMASK, r3
}
 800319e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031a0:	f3ef 8310 	mrs	r3, PRIMASK
 80031a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80031a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	438a      	bics	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f383 8810 	msr	PRIMASK, r3
}
 80031d0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	228c      	movs	r2, #140	@ 0x8c
 80031d6:	2120      	movs	r1, #32
 80031d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2284      	movs	r2, #132	@ 0x84
 80031de:	2100      	movs	r1, #0
 80031e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e012      	b.n	800320c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2288      	movs	r2, #136	@ 0x88
 80031ea:	2120      	movs	r1, #32
 80031ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	228c      	movs	r2, #140	@ 0x8c
 80031f2:	2120      	movs	r1, #32
 80031f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2284      	movs	r2, #132	@ 0x84
 8003206:	2100      	movs	r1, #0
 8003208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b010      	add	sp, #64	@ 0x40
 8003212:	bd80      	pop	{r7, pc}
 8003214:	01ffffff 	.word	0x01ffffff
 8003218:	fffffedf 	.word	0xfffffedf

0800321c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	e051      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3301      	adds	r3, #1
 8003232:	d04e      	beq.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003234:	f7fd fec6 	bl	8000fc4 <HAL_GetTick>
 8003238:	0002      	movs	r2, r0
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	429a      	cmp	r2, r3
 8003242:	d302      	bcc.n	800324a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e051      	b.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2204      	movs	r2, #4
 8003256:	4013      	ands	r3, r2
 8003258:	d03b      	beq.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b80      	cmp	r3, #128	@ 0x80
 800325e:	d038      	beq.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d035      	beq.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2208      	movs	r2, #8
 800326e:	4013      	ands	r3, r2
 8003270:	2b08      	cmp	r3, #8
 8003272:	d111      	bne.n	8003298 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2208      	movs	r2, #8
 800327a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	0018      	movs	r0, r3
 8003280:	f000 f83c 	bl	80032fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2290      	movs	r2, #144	@ 0x90
 8003288:	2108      	movs	r1, #8
 800328a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2284      	movs	r2, #132	@ 0x84
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e02c      	b.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	401a      	ands	r2, r3
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d112      	bne.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 f81f 	bl	80032fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2290      	movs	r2, #144	@ 0x90
 80032c2:	2120      	movs	r1, #32
 80032c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2284      	movs	r2, #132	@ 0x84
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e00f      	b.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4013      	ands	r3, r2
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	425a      	negs	r2, r3
 80032e2:	4153      	adcs	r3, r2
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	001a      	movs	r2, r3
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d09e      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b004      	add	sp, #16
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08e      	sub	sp, #56	@ 0x38
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003304:	f3ef 8310 	mrs	r3, PRIMASK
 8003308:	617b      	str	r3, [r7, #20]
  return(result);
 800330a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800330c:	637b      	str	r3, [r7, #52]	@ 0x34
 800330e:	2301      	movs	r3, #1
 8003310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f383 8810 	msr	PRIMASK, r3
}
 8003318:	46c0      	nop			@ (mov r8, r8)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4926      	ldr	r1, [pc, #152]	@ (80033c0 <UART_EndRxTransfer+0xc4>)
 8003326:	400a      	ands	r2, r1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003336:	f3ef 8310 	mrs	r3, PRIMASK
 800333a:	623b      	str	r3, [r7, #32]
  return(result);
 800333c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800333e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003340:	2301      	movs	r3, #1
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	f383 8810 	msr	PRIMASK, r3
}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	491b      	ldr	r1, [pc, #108]	@ (80033c4 <UART_EndRxTransfer+0xc8>)
 8003358:	400a      	ands	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d118      	bne.n	80033a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003370:	f3ef 8310 	mrs	r3, PRIMASK
 8003374:	60bb      	str	r3, [r7, #8]
  return(result);
 8003376:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800337a:	2301      	movs	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			@ (mov r8, r8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2110      	movs	r1, #16
 8003392:	438a      	bics	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	228c      	movs	r2, #140	@ 0x8c
 80033a6:	2120      	movs	r1, #32
 80033a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b00e      	add	sp, #56	@ 0x38
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	fffffedf 	.word	0xfffffedf
 80033c4:	effffffe 	.word	0xeffffffe

080033c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2284      	movs	r2, #132	@ 0x84
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_UARTEx_DisableFifoMode+0x16>
 80033da:	2302      	movs	r3, #2
 80033dc:	e027      	b.n	800342e <HAL_UARTEx_DisableFifoMode+0x66>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2284      	movs	r2, #132	@ 0x84
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2288      	movs	r2, #136	@ 0x88
 80033ea:	2124      	movs	r1, #36	@ 0x24
 80033ec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a0b      	ldr	r2, [pc, #44]	@ (8003438 <HAL_UARTEx_DisableFifoMode+0x70>)
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2288      	movs	r2, #136	@ 0x88
 8003420:	2120      	movs	r1, #32
 8003422:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2284      	movs	r2, #132	@ 0x84
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b004      	add	sp, #16
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	dfffffff 	.word	0xdfffffff

0800343c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2284      	movs	r2, #132	@ 0x84
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003450:	2302      	movs	r3, #2
 8003452:	e02e      	b.n	80034b2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2284      	movs	r2, #132	@ 0x84
 8003458:	2101      	movs	r1, #1
 800345a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2288      	movs	r2, #136	@ 0x88
 8003460:	2124      	movs	r1, #36	@ 0x24
 8003462:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2101      	movs	r1, #1
 8003478:	438a      	bics	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	08d9      	lsrs	r1, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 f854 	bl	8003540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2288      	movs	r2, #136	@ 0x88
 80034a4:	2120      	movs	r1, #32
 80034a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2284      	movs	r2, #132	@ 0x84
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2284      	movs	r2, #132	@ 0x84
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e02f      	b.n	8003534 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2284      	movs	r2, #132	@ 0x84
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2288      	movs	r2, #136	@ 0x88
 80034e0:	2124      	movs	r1, #36	@ 0x24
 80034e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2101      	movs	r1, #1
 80034f8:	438a      	bics	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4a0e      	ldr	r2, [pc, #56]	@ (800353c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003504:	4013      	ands	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f813 	bl	8003540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2288      	movs	r2, #136	@ 0x88
 8003526:	2120      	movs	r1, #32
 8003528:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2284      	movs	r2, #132	@ 0x84
 800352e:	2100      	movs	r1, #0
 8003530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	f1ffffff 	.word	0xf1ffffff

08003540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	226a      	movs	r2, #106	@ 0x6a
 8003554:	2101      	movs	r1, #1
 8003556:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2268      	movs	r2, #104	@ 0x68
 800355c:	2101      	movs	r1, #1
 800355e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003560:	e043      	b.n	80035ea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003562:	260f      	movs	r6, #15
 8003564:	19bb      	adds	r3, r7, r6
 8003566:	2208      	movs	r2, #8
 8003568:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800356a:	200e      	movs	r0, #14
 800356c:	183b      	adds	r3, r7, r0
 800356e:	2208      	movs	r2, #8
 8003570:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	0e5b      	lsrs	r3, r3, #25
 800357a:	b2da      	uxtb	r2, r3
 800357c:	240d      	movs	r4, #13
 800357e:	193b      	adds	r3, r7, r4
 8003580:	2107      	movs	r1, #7
 8003582:	400a      	ands	r2, r1
 8003584:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	0f5b      	lsrs	r3, r3, #29
 800358e:	b2da      	uxtb	r2, r3
 8003590:	250c      	movs	r5, #12
 8003592:	197b      	adds	r3, r7, r5
 8003594:	2107      	movs	r1, #7
 8003596:	400a      	ands	r2, r1
 8003598:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800359a:	183b      	adds	r3, r7, r0
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	197a      	adds	r2, r7, r5
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	4914      	ldr	r1, [pc, #80]	@ (80035f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80035a4:	5c8a      	ldrb	r2, [r1, r2]
 80035a6:	435a      	muls	r2, r3
 80035a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80035aa:	197b      	adds	r3, r7, r5
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035b2:	0019      	movs	r1, r3
 80035b4:	f7fc fe44 	bl	8000240 <__divsi3>
 80035b8:	0003      	movs	r3, r0
 80035ba:	b299      	uxth	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	226a      	movs	r2, #106	@ 0x6a
 80035c0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035c2:	19bb      	adds	r3, r7, r6
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	193a      	adds	r2, r7, r4
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	490a      	ldr	r1, [pc, #40]	@ (80035f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80035cc:	5c8a      	ldrb	r2, [r1, r2]
 80035ce:	435a      	muls	r2, r3
 80035d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80035d2:	193b      	adds	r3, r7, r4
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	4a08      	ldr	r2, [pc, #32]	@ (80035f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035da:	0019      	movs	r1, r3
 80035dc:	f7fc fe30 	bl	8000240 <__divsi3>
 80035e0:	0003      	movs	r3, r0
 80035e2:	b299      	uxth	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2268      	movs	r2, #104	@ 0x68
 80035e8:	5299      	strh	r1, [r3, r2]
}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b005      	add	sp, #20
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	08003fd8 	.word	0x08003fd8
 80035f8:	08003fe0 	.word	0x08003fe0

080035fc <siprintf>:
 80035fc:	b40e      	push	{r1, r2, r3}
 80035fe:	b510      	push	{r4, lr}
 8003600:	2400      	movs	r4, #0
 8003602:	490c      	ldr	r1, [pc, #48]	@ (8003634 <siprintf+0x38>)
 8003604:	b09d      	sub	sp, #116	@ 0x74
 8003606:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003608:	9002      	str	r0, [sp, #8]
 800360a:	9006      	str	r0, [sp, #24]
 800360c:	9107      	str	r1, [sp, #28]
 800360e:	9104      	str	r1, [sp, #16]
 8003610:	4809      	ldr	r0, [pc, #36]	@ (8003638 <siprintf+0x3c>)
 8003612:	490a      	ldr	r1, [pc, #40]	@ (800363c <siprintf+0x40>)
 8003614:	cb04      	ldmia	r3!, {r2}
 8003616:	9105      	str	r1, [sp, #20]
 8003618:	6800      	ldr	r0, [r0, #0]
 800361a:	a902      	add	r1, sp, #8
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003620:	f000 f99e 	bl	8003960 <_svfiprintf_r>
 8003624:	9b02      	ldr	r3, [sp, #8]
 8003626:	701c      	strb	r4, [r3, #0]
 8003628:	b01d      	add	sp, #116	@ 0x74
 800362a:	bc10      	pop	{r4}
 800362c:	bc08      	pop	{r3}
 800362e:	b003      	add	sp, #12
 8003630:	4718      	bx	r3
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	7fffffff 	.word	0x7fffffff
 8003638:	20000024 	.word	0x20000024
 800363c:	ffff0208 	.word	0xffff0208

08003640 <memset>:
 8003640:	0003      	movs	r3, r0
 8003642:	1882      	adds	r2, r0, r2
 8003644:	4293      	cmp	r3, r2
 8003646:	d100      	bne.n	800364a <memset+0xa>
 8003648:	4770      	bx	lr
 800364a:	7019      	strb	r1, [r3, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	e7f9      	b.n	8003644 <memset+0x4>

08003650 <__errno>:
 8003650:	4b01      	ldr	r3, [pc, #4]	@ (8003658 <__errno+0x8>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	4770      	bx	lr
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	20000024 	.word	0x20000024

0800365c <__libc_init_array>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	2600      	movs	r6, #0
 8003660:	4c0c      	ldr	r4, [pc, #48]	@ (8003694 <__libc_init_array+0x38>)
 8003662:	4d0d      	ldr	r5, [pc, #52]	@ (8003698 <__libc_init_array+0x3c>)
 8003664:	1b64      	subs	r4, r4, r5
 8003666:	10a4      	asrs	r4, r4, #2
 8003668:	42a6      	cmp	r6, r4
 800366a:	d109      	bne.n	8003680 <__libc_init_array+0x24>
 800366c:	2600      	movs	r6, #0
 800366e:	f000 fc61 	bl	8003f34 <_init>
 8003672:	4c0a      	ldr	r4, [pc, #40]	@ (800369c <__libc_init_array+0x40>)
 8003674:	4d0a      	ldr	r5, [pc, #40]	@ (80036a0 <__libc_init_array+0x44>)
 8003676:	1b64      	subs	r4, r4, r5
 8003678:	10a4      	asrs	r4, r4, #2
 800367a:	42a6      	cmp	r6, r4
 800367c:	d105      	bne.n	800368a <__libc_init_array+0x2e>
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	00b3      	lsls	r3, r6, #2
 8003682:	58eb      	ldr	r3, [r5, r3]
 8003684:	4798      	blx	r3
 8003686:	3601      	adds	r6, #1
 8003688:	e7ee      	b.n	8003668 <__libc_init_array+0xc>
 800368a:	00b3      	lsls	r3, r6, #2
 800368c:	58eb      	ldr	r3, [r5, r3]
 800368e:	4798      	blx	r3
 8003690:	3601      	adds	r6, #1
 8003692:	e7f2      	b.n	800367a <__libc_init_array+0x1e>
 8003694:	0800401c 	.word	0x0800401c
 8003698:	0800401c 	.word	0x0800401c
 800369c:	08004020 	.word	0x08004020
 80036a0:	0800401c 	.word	0x0800401c

080036a4 <__retarget_lock_acquire_recursive>:
 80036a4:	4770      	bx	lr

080036a6 <__retarget_lock_release_recursive>:
 80036a6:	4770      	bx	lr

080036a8 <_free_r>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	0005      	movs	r5, r0
 80036ac:	1e0c      	subs	r4, r1, #0
 80036ae:	d010      	beq.n	80036d2 <_free_r+0x2a>
 80036b0:	3c04      	subs	r4, #4
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	da00      	bge.n	80036ba <_free_r+0x12>
 80036b8:	18e4      	adds	r4, r4, r3
 80036ba:	0028      	movs	r0, r5
 80036bc:	f000 f8e0 	bl	8003880 <__malloc_lock>
 80036c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003738 <_free_r+0x90>)
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <_free_r+0x2c>
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	6014      	str	r4, [r2, #0]
 80036cc:	0028      	movs	r0, r5
 80036ce:	f000 f8df 	bl	8003890 <__malloc_unlock>
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	42a3      	cmp	r3, r4
 80036d6:	d908      	bls.n	80036ea <_free_r+0x42>
 80036d8:	6820      	ldr	r0, [r4, #0]
 80036da:	1821      	adds	r1, r4, r0
 80036dc:	428b      	cmp	r3, r1
 80036de:	d1f3      	bne.n	80036c8 <_free_r+0x20>
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	1809      	adds	r1, r1, r0
 80036e6:	6021      	str	r1, [r4, #0]
 80036e8:	e7ee      	b.n	80036c8 <_free_r+0x20>
 80036ea:	001a      	movs	r2, r3
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <_free_r+0x4e>
 80036f2:	42a3      	cmp	r3, r4
 80036f4:	d9f9      	bls.n	80036ea <_free_r+0x42>
 80036f6:	6811      	ldr	r1, [r2, #0]
 80036f8:	1850      	adds	r0, r2, r1
 80036fa:	42a0      	cmp	r0, r4
 80036fc:	d10b      	bne.n	8003716 <_free_r+0x6e>
 80036fe:	6820      	ldr	r0, [r4, #0]
 8003700:	1809      	adds	r1, r1, r0
 8003702:	1850      	adds	r0, r2, r1
 8003704:	6011      	str	r1, [r2, #0]
 8003706:	4283      	cmp	r3, r0
 8003708:	d1e0      	bne.n	80036cc <_free_r+0x24>
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	1841      	adds	r1, r0, r1
 8003710:	6011      	str	r1, [r2, #0]
 8003712:	6053      	str	r3, [r2, #4]
 8003714:	e7da      	b.n	80036cc <_free_r+0x24>
 8003716:	42a0      	cmp	r0, r4
 8003718:	d902      	bls.n	8003720 <_free_r+0x78>
 800371a:	230c      	movs	r3, #12
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	e7d5      	b.n	80036cc <_free_r+0x24>
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	1821      	adds	r1, r4, r0
 8003724:	428b      	cmp	r3, r1
 8003726:	d103      	bne.n	8003730 <_free_r+0x88>
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	1809      	adds	r1, r1, r0
 800372e:	6021      	str	r1, [r4, #0]
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	6054      	str	r4, [r2, #4]
 8003734:	e7ca      	b.n	80036cc <_free_r+0x24>
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	20000378 	.word	0x20000378

0800373c <sbrk_aligned>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4e0f      	ldr	r6, [pc, #60]	@ (800377c <sbrk_aligned+0x40>)
 8003740:	000d      	movs	r5, r1
 8003742:	6831      	ldr	r1, [r6, #0]
 8003744:	0004      	movs	r4, r0
 8003746:	2900      	cmp	r1, #0
 8003748:	d102      	bne.n	8003750 <sbrk_aligned+0x14>
 800374a:	f000 fb95 	bl	8003e78 <_sbrk_r>
 800374e:	6030      	str	r0, [r6, #0]
 8003750:	0029      	movs	r1, r5
 8003752:	0020      	movs	r0, r4
 8003754:	f000 fb90 	bl	8003e78 <_sbrk_r>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d103      	bne.n	8003764 <sbrk_aligned+0x28>
 800375c:	2501      	movs	r5, #1
 800375e:	426d      	negs	r5, r5
 8003760:	0028      	movs	r0, r5
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	2303      	movs	r3, #3
 8003766:	1cc5      	adds	r5, r0, #3
 8003768:	439d      	bics	r5, r3
 800376a:	42a8      	cmp	r0, r5
 800376c:	d0f8      	beq.n	8003760 <sbrk_aligned+0x24>
 800376e:	1a29      	subs	r1, r5, r0
 8003770:	0020      	movs	r0, r4
 8003772:	f000 fb81 	bl	8003e78 <_sbrk_r>
 8003776:	3001      	adds	r0, #1
 8003778:	d1f2      	bne.n	8003760 <sbrk_aligned+0x24>
 800377a:	e7ef      	b.n	800375c <sbrk_aligned+0x20>
 800377c:	20000374 	.word	0x20000374

08003780 <_malloc_r>:
 8003780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003782:	2203      	movs	r2, #3
 8003784:	1ccb      	adds	r3, r1, #3
 8003786:	4393      	bics	r3, r2
 8003788:	3308      	adds	r3, #8
 800378a:	0005      	movs	r5, r0
 800378c:	001f      	movs	r7, r3
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d234      	bcs.n	80037fc <_malloc_r+0x7c>
 8003792:	270c      	movs	r7, #12
 8003794:	42b9      	cmp	r1, r7
 8003796:	d833      	bhi.n	8003800 <_malloc_r+0x80>
 8003798:	0028      	movs	r0, r5
 800379a:	f000 f871 	bl	8003880 <__malloc_lock>
 800379e:	4e37      	ldr	r6, [pc, #220]	@ (800387c <_malloc_r+0xfc>)
 80037a0:	6833      	ldr	r3, [r6, #0]
 80037a2:	001c      	movs	r4, r3
 80037a4:	2c00      	cmp	r4, #0
 80037a6:	d12f      	bne.n	8003808 <_malloc_r+0x88>
 80037a8:	0039      	movs	r1, r7
 80037aa:	0028      	movs	r0, r5
 80037ac:	f7ff ffc6 	bl	800373c <sbrk_aligned>
 80037b0:	0004      	movs	r4, r0
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d15f      	bne.n	8003876 <_malloc_r+0xf6>
 80037b6:	6834      	ldr	r4, [r6, #0]
 80037b8:	9400      	str	r4, [sp, #0]
 80037ba:	9b00      	ldr	r3, [sp, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d14a      	bne.n	8003856 <_malloc_r+0xd6>
 80037c0:	2c00      	cmp	r4, #0
 80037c2:	d052      	beq.n	800386a <_malloc_r+0xea>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	0028      	movs	r0, r5
 80037c8:	18e3      	adds	r3, r4, r3
 80037ca:	9900      	ldr	r1, [sp, #0]
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	f000 fb53 	bl	8003e78 <_sbrk_r>
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	4283      	cmp	r3, r0
 80037d6:	d148      	bne.n	800386a <_malloc_r+0xea>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	0028      	movs	r0, r5
 80037dc:	1aff      	subs	r7, r7, r3
 80037de:	0039      	movs	r1, r7
 80037e0:	f7ff ffac 	bl	800373c <sbrk_aligned>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d040      	beq.n	800386a <_malloc_r+0xea>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	19db      	adds	r3, r3, r7
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	6833      	ldr	r3, [r6, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	d133      	bne.n	800385e <_malloc_r+0xde>
 80037f6:	9b00      	ldr	r3, [sp, #0]
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	e019      	b.n	8003830 <_malloc_r+0xb0>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	dac9      	bge.n	8003794 <_malloc_r+0x14>
 8003800:	230c      	movs	r3, #12
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	2000      	movs	r0, #0
 8003806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003808:	6821      	ldr	r1, [r4, #0]
 800380a:	1bc9      	subs	r1, r1, r7
 800380c:	d420      	bmi.n	8003850 <_malloc_r+0xd0>
 800380e:	290b      	cmp	r1, #11
 8003810:	d90a      	bls.n	8003828 <_malloc_r+0xa8>
 8003812:	19e2      	adds	r2, r4, r7
 8003814:	6027      	str	r7, [r4, #0]
 8003816:	42a3      	cmp	r3, r4
 8003818:	d104      	bne.n	8003824 <_malloc_r+0xa4>
 800381a:	6032      	str	r2, [r6, #0]
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	6011      	str	r1, [r2, #0]
 8003820:	6053      	str	r3, [r2, #4]
 8003822:	e005      	b.n	8003830 <_malloc_r+0xb0>
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e7f9      	b.n	800381c <_malloc_r+0x9c>
 8003828:	6862      	ldr	r2, [r4, #4]
 800382a:	42a3      	cmp	r3, r4
 800382c:	d10e      	bne.n	800384c <_malloc_r+0xcc>
 800382e:	6032      	str	r2, [r6, #0]
 8003830:	0028      	movs	r0, r5
 8003832:	f000 f82d 	bl	8003890 <__malloc_unlock>
 8003836:	0020      	movs	r0, r4
 8003838:	2207      	movs	r2, #7
 800383a:	300b      	adds	r0, #11
 800383c:	1d23      	adds	r3, r4, #4
 800383e:	4390      	bics	r0, r2
 8003840:	1ac2      	subs	r2, r0, r3
 8003842:	4298      	cmp	r0, r3
 8003844:	d0df      	beq.n	8003806 <_malloc_r+0x86>
 8003846:	1a1b      	subs	r3, r3, r0
 8003848:	50a3      	str	r3, [r4, r2]
 800384a:	e7dc      	b.n	8003806 <_malloc_r+0x86>
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	e7ef      	b.n	8003830 <_malloc_r+0xb0>
 8003850:	0023      	movs	r3, r4
 8003852:	6864      	ldr	r4, [r4, #4]
 8003854:	e7a6      	b.n	80037a4 <_malloc_r+0x24>
 8003856:	9c00      	ldr	r4, [sp, #0]
 8003858:	6863      	ldr	r3, [r4, #4]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	e7ad      	b.n	80037ba <_malloc_r+0x3a>
 800385e:	001a      	movs	r2, r3
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	42a3      	cmp	r3, r4
 8003864:	d1fb      	bne.n	800385e <_malloc_r+0xde>
 8003866:	2300      	movs	r3, #0
 8003868:	e7da      	b.n	8003820 <_malloc_r+0xa0>
 800386a:	230c      	movs	r3, #12
 800386c:	0028      	movs	r0, r5
 800386e:	602b      	str	r3, [r5, #0]
 8003870:	f000 f80e 	bl	8003890 <__malloc_unlock>
 8003874:	e7c6      	b.n	8003804 <_malloc_r+0x84>
 8003876:	6007      	str	r7, [r0, #0]
 8003878:	e7da      	b.n	8003830 <_malloc_r+0xb0>
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	20000378 	.word	0x20000378

08003880 <__malloc_lock>:
 8003880:	b510      	push	{r4, lr}
 8003882:	4802      	ldr	r0, [pc, #8]	@ (800388c <__malloc_lock+0xc>)
 8003884:	f7ff ff0e 	bl	80036a4 <__retarget_lock_acquire_recursive>
 8003888:	bd10      	pop	{r4, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	20000370 	.word	0x20000370

08003890 <__malloc_unlock>:
 8003890:	b510      	push	{r4, lr}
 8003892:	4802      	ldr	r0, [pc, #8]	@ (800389c <__malloc_unlock+0xc>)
 8003894:	f7ff ff07 	bl	80036a6 <__retarget_lock_release_recursive>
 8003898:	bd10      	pop	{r4, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	20000370 	.word	0x20000370

080038a0 <__ssputs_r>:
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	688e      	ldr	r6, [r1, #8]
 80038a4:	b085      	sub	sp, #20
 80038a6:	001f      	movs	r7, r3
 80038a8:	000c      	movs	r4, r1
 80038aa:	680b      	ldr	r3, [r1, #0]
 80038ac:	9002      	str	r0, [sp, #8]
 80038ae:	9203      	str	r2, [sp, #12]
 80038b0:	42be      	cmp	r6, r7
 80038b2:	d830      	bhi.n	8003916 <__ssputs_r+0x76>
 80038b4:	210c      	movs	r1, #12
 80038b6:	5e62      	ldrsh	r2, [r4, r1]
 80038b8:	2190      	movs	r1, #144	@ 0x90
 80038ba:	00c9      	lsls	r1, r1, #3
 80038bc:	420a      	tst	r2, r1
 80038be:	d028      	beq.n	8003912 <__ssputs_r+0x72>
 80038c0:	2003      	movs	r0, #3
 80038c2:	6921      	ldr	r1, [r4, #16]
 80038c4:	1a5b      	subs	r3, r3, r1
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	6963      	ldr	r3, [r4, #20]
 80038ca:	4343      	muls	r3, r0
 80038cc:	9801      	ldr	r0, [sp, #4]
 80038ce:	0fdd      	lsrs	r5, r3, #31
 80038d0:	18ed      	adds	r5, r5, r3
 80038d2:	1c7b      	adds	r3, r7, #1
 80038d4:	181b      	adds	r3, r3, r0
 80038d6:	106d      	asrs	r5, r5, #1
 80038d8:	42ab      	cmp	r3, r5
 80038da:	d900      	bls.n	80038de <__ssputs_r+0x3e>
 80038dc:	001d      	movs	r5, r3
 80038de:	0552      	lsls	r2, r2, #21
 80038e0:	d528      	bpl.n	8003934 <__ssputs_r+0x94>
 80038e2:	0029      	movs	r1, r5
 80038e4:	9802      	ldr	r0, [sp, #8]
 80038e6:	f7ff ff4b 	bl	8003780 <_malloc_r>
 80038ea:	1e06      	subs	r6, r0, #0
 80038ec:	d02c      	beq.n	8003948 <__ssputs_r+0xa8>
 80038ee:	9a01      	ldr	r2, [sp, #4]
 80038f0:	6921      	ldr	r1, [r4, #16]
 80038f2:	f000 fade 	bl	8003eb2 <memcpy>
 80038f6:	89a2      	ldrh	r2, [r4, #12]
 80038f8:	4b18      	ldr	r3, [pc, #96]	@ (800395c <__ssputs_r+0xbc>)
 80038fa:	401a      	ands	r2, r3
 80038fc:	2380      	movs	r3, #128	@ 0x80
 80038fe:	4313      	orrs	r3, r2
 8003900:	81a3      	strh	r3, [r4, #12]
 8003902:	9b01      	ldr	r3, [sp, #4]
 8003904:	6126      	str	r6, [r4, #16]
 8003906:	18f6      	adds	r6, r6, r3
 8003908:	6026      	str	r6, [r4, #0]
 800390a:	003e      	movs	r6, r7
 800390c:	6165      	str	r5, [r4, #20]
 800390e:	1aed      	subs	r5, r5, r3
 8003910:	60a5      	str	r5, [r4, #8]
 8003912:	42be      	cmp	r6, r7
 8003914:	d900      	bls.n	8003918 <__ssputs_r+0x78>
 8003916:	003e      	movs	r6, r7
 8003918:	0032      	movs	r2, r6
 800391a:	9903      	ldr	r1, [sp, #12]
 800391c:	6820      	ldr	r0, [r4, #0]
 800391e:	f000 fa99 	bl	8003e54 <memmove>
 8003922:	2000      	movs	r0, #0
 8003924:	68a3      	ldr	r3, [r4, #8]
 8003926:	1b9b      	subs	r3, r3, r6
 8003928:	60a3      	str	r3, [r4, #8]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	199b      	adds	r3, r3, r6
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	b005      	add	sp, #20
 8003932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003934:	002a      	movs	r2, r5
 8003936:	9802      	ldr	r0, [sp, #8]
 8003938:	f000 fac4 	bl	8003ec4 <_realloc_r>
 800393c:	1e06      	subs	r6, r0, #0
 800393e:	d1e0      	bne.n	8003902 <__ssputs_r+0x62>
 8003940:	6921      	ldr	r1, [r4, #16]
 8003942:	9802      	ldr	r0, [sp, #8]
 8003944:	f7ff feb0 	bl	80036a8 <_free_r>
 8003948:	230c      	movs	r3, #12
 800394a:	2001      	movs	r0, #1
 800394c:	9a02      	ldr	r2, [sp, #8]
 800394e:	4240      	negs	r0, r0
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	89a2      	ldrh	r2, [r4, #12]
 8003954:	3334      	adds	r3, #52	@ 0x34
 8003956:	4313      	orrs	r3, r2
 8003958:	81a3      	strh	r3, [r4, #12]
 800395a:	e7e9      	b.n	8003930 <__ssputs_r+0x90>
 800395c:	fffffb7f 	.word	0xfffffb7f

08003960 <_svfiprintf_r>:
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003962:	b0a1      	sub	sp, #132	@ 0x84
 8003964:	9003      	str	r0, [sp, #12]
 8003966:	001d      	movs	r5, r3
 8003968:	898b      	ldrh	r3, [r1, #12]
 800396a:	000f      	movs	r7, r1
 800396c:	0016      	movs	r6, r2
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	d511      	bpl.n	8003996 <_svfiprintf_r+0x36>
 8003972:	690b      	ldr	r3, [r1, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10e      	bne.n	8003996 <_svfiprintf_r+0x36>
 8003978:	2140      	movs	r1, #64	@ 0x40
 800397a:	f7ff ff01 	bl	8003780 <_malloc_r>
 800397e:	6038      	str	r0, [r7, #0]
 8003980:	6138      	str	r0, [r7, #16]
 8003982:	2800      	cmp	r0, #0
 8003984:	d105      	bne.n	8003992 <_svfiprintf_r+0x32>
 8003986:	230c      	movs	r3, #12
 8003988:	9a03      	ldr	r2, [sp, #12]
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	2001      	movs	r0, #1
 800398e:	4240      	negs	r0, r0
 8003990:	e0cf      	b.n	8003b32 <_svfiprintf_r+0x1d2>
 8003992:	2340      	movs	r3, #64	@ 0x40
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	2300      	movs	r3, #0
 8003998:	ac08      	add	r4, sp, #32
 800399a:	6163      	str	r3, [r4, #20]
 800399c:	3320      	adds	r3, #32
 800399e:	7663      	strb	r3, [r4, #25]
 80039a0:	3310      	adds	r3, #16
 80039a2:	76a3      	strb	r3, [r4, #26]
 80039a4:	9507      	str	r5, [sp, #28]
 80039a6:	0035      	movs	r5, r6
 80039a8:	782b      	ldrb	r3, [r5, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <_svfiprintf_r+0x52>
 80039ae:	2b25      	cmp	r3, #37	@ 0x25
 80039b0:	d148      	bne.n	8003a44 <_svfiprintf_r+0xe4>
 80039b2:	1bab      	subs	r3, r5, r6
 80039b4:	9305      	str	r3, [sp, #20]
 80039b6:	42b5      	cmp	r5, r6
 80039b8:	d00b      	beq.n	80039d2 <_svfiprintf_r+0x72>
 80039ba:	0032      	movs	r2, r6
 80039bc:	0039      	movs	r1, r7
 80039be:	9803      	ldr	r0, [sp, #12]
 80039c0:	f7ff ff6e 	bl	80038a0 <__ssputs_r>
 80039c4:	3001      	adds	r0, #1
 80039c6:	d100      	bne.n	80039ca <_svfiprintf_r+0x6a>
 80039c8:	e0ae      	b.n	8003b28 <_svfiprintf_r+0x1c8>
 80039ca:	6963      	ldr	r3, [r4, #20]
 80039cc:	9a05      	ldr	r2, [sp, #20]
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	6163      	str	r3, [r4, #20]
 80039d2:	782b      	ldrb	r3, [r5, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d100      	bne.n	80039da <_svfiprintf_r+0x7a>
 80039d8:	e0a6      	b.n	8003b28 <_svfiprintf_r+0x1c8>
 80039da:	2201      	movs	r2, #1
 80039dc:	2300      	movs	r3, #0
 80039de:	4252      	negs	r2, r2
 80039e0:	6062      	str	r2, [r4, #4]
 80039e2:	a904      	add	r1, sp, #16
 80039e4:	3254      	adds	r2, #84	@ 0x54
 80039e6:	1852      	adds	r2, r2, r1
 80039e8:	1c6e      	adds	r6, r5, #1
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	60e3      	str	r3, [r4, #12]
 80039ee:	60a3      	str	r3, [r4, #8]
 80039f0:	7013      	strb	r3, [r2, #0]
 80039f2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80039f4:	4b54      	ldr	r3, [pc, #336]	@ (8003b48 <_svfiprintf_r+0x1e8>)
 80039f6:	2205      	movs	r2, #5
 80039f8:	0018      	movs	r0, r3
 80039fa:	7831      	ldrb	r1, [r6, #0]
 80039fc:	9305      	str	r3, [sp, #20]
 80039fe:	f000 fa4d 	bl	8003e9c <memchr>
 8003a02:	1c75      	adds	r5, r6, #1
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d11f      	bne.n	8003a48 <_svfiprintf_r+0xe8>
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	06d3      	lsls	r3, r2, #27
 8003a0c:	d504      	bpl.n	8003a18 <_svfiprintf_r+0xb8>
 8003a0e:	2353      	movs	r3, #83	@ 0x53
 8003a10:	a904      	add	r1, sp, #16
 8003a12:	185b      	adds	r3, r3, r1
 8003a14:	2120      	movs	r1, #32
 8003a16:	7019      	strb	r1, [r3, #0]
 8003a18:	0713      	lsls	r3, r2, #28
 8003a1a:	d504      	bpl.n	8003a26 <_svfiprintf_r+0xc6>
 8003a1c:	2353      	movs	r3, #83	@ 0x53
 8003a1e:	a904      	add	r1, sp, #16
 8003a20:	185b      	adds	r3, r3, r1
 8003a22:	212b      	movs	r1, #43	@ 0x2b
 8003a24:	7019      	strb	r1, [r3, #0]
 8003a26:	7833      	ldrb	r3, [r6, #0]
 8003a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2a:	d016      	beq.n	8003a5a <_svfiprintf_r+0xfa>
 8003a2c:	0035      	movs	r5, r6
 8003a2e:	2100      	movs	r1, #0
 8003a30:	200a      	movs	r0, #10
 8003a32:	68e3      	ldr	r3, [r4, #12]
 8003a34:	782a      	ldrb	r2, [r5, #0]
 8003a36:	1c6e      	adds	r6, r5, #1
 8003a38:	3a30      	subs	r2, #48	@ 0x30
 8003a3a:	2a09      	cmp	r2, #9
 8003a3c:	d950      	bls.n	8003ae0 <_svfiprintf_r+0x180>
 8003a3e:	2900      	cmp	r1, #0
 8003a40:	d111      	bne.n	8003a66 <_svfiprintf_r+0x106>
 8003a42:	e017      	b.n	8003a74 <_svfiprintf_r+0x114>
 8003a44:	3501      	adds	r5, #1
 8003a46:	e7af      	b.n	80039a8 <_svfiprintf_r+0x48>
 8003a48:	9b05      	ldr	r3, [sp, #20]
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	1ac0      	subs	r0, r0, r3
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4083      	lsls	r3, r0
 8003a52:	4313      	orrs	r3, r2
 8003a54:	002e      	movs	r6, r5
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	e7cc      	b.n	80039f4 <_svfiprintf_r+0x94>
 8003a5a:	9b07      	ldr	r3, [sp, #28]
 8003a5c:	1d19      	adds	r1, r3, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	9107      	str	r1, [sp, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db01      	blt.n	8003a6a <_svfiprintf_r+0x10a>
 8003a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a68:	e004      	b.n	8003a74 <_svfiprintf_r+0x114>
 8003a6a:	425b      	negs	r3, r3
 8003a6c:	60e3      	str	r3, [r4, #12]
 8003a6e:	2302      	movs	r3, #2
 8003a70:	4313      	orrs	r3, r2
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	782b      	ldrb	r3, [r5, #0]
 8003a76:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a78:	d10c      	bne.n	8003a94 <_svfiprintf_r+0x134>
 8003a7a:	786b      	ldrb	r3, [r5, #1]
 8003a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a7e:	d134      	bne.n	8003aea <_svfiprintf_r+0x18a>
 8003a80:	9b07      	ldr	r3, [sp, #28]
 8003a82:	3502      	adds	r5, #2
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	9207      	str	r2, [sp, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da01      	bge.n	8003a92 <_svfiprintf_r+0x132>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	425b      	negs	r3, r3
 8003a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a94:	4e2d      	ldr	r6, [pc, #180]	@ (8003b4c <_svfiprintf_r+0x1ec>)
 8003a96:	2203      	movs	r2, #3
 8003a98:	0030      	movs	r0, r6
 8003a9a:	7829      	ldrb	r1, [r5, #0]
 8003a9c:	f000 f9fe 	bl	8003e9c <memchr>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d006      	beq.n	8003ab2 <_svfiprintf_r+0x152>
 8003aa4:	2340      	movs	r3, #64	@ 0x40
 8003aa6:	1b80      	subs	r0, r0, r6
 8003aa8:	4083      	lsls	r3, r0
 8003aaa:	6822      	ldr	r2, [r4, #0]
 8003aac:	3501      	adds	r5, #1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	7829      	ldrb	r1, [r5, #0]
 8003ab4:	2206      	movs	r2, #6
 8003ab6:	4826      	ldr	r0, [pc, #152]	@ (8003b50 <_svfiprintf_r+0x1f0>)
 8003ab8:	1c6e      	adds	r6, r5, #1
 8003aba:	7621      	strb	r1, [r4, #24]
 8003abc:	f000 f9ee 	bl	8003e9c <memchr>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d038      	beq.n	8003b36 <_svfiprintf_r+0x1d6>
 8003ac4:	4b23      	ldr	r3, [pc, #140]	@ (8003b54 <_svfiprintf_r+0x1f4>)
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d122      	bne.n	8003b10 <_svfiprintf_r+0x1b0>
 8003aca:	2207      	movs	r2, #7
 8003acc:	9b07      	ldr	r3, [sp, #28]
 8003ace:	3307      	adds	r3, #7
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	9307      	str	r3, [sp, #28]
 8003ad6:	6963      	ldr	r3, [r4, #20]
 8003ad8:	9a04      	ldr	r2, [sp, #16]
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	6163      	str	r3, [r4, #20]
 8003ade:	e762      	b.n	80039a6 <_svfiprintf_r+0x46>
 8003ae0:	4343      	muls	r3, r0
 8003ae2:	0035      	movs	r5, r6
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	e7a4      	b.n	8003a34 <_svfiprintf_r+0xd4>
 8003aea:	2300      	movs	r3, #0
 8003aec:	200a      	movs	r0, #10
 8003aee:	0019      	movs	r1, r3
 8003af0:	3501      	adds	r5, #1
 8003af2:	6063      	str	r3, [r4, #4]
 8003af4:	782a      	ldrb	r2, [r5, #0]
 8003af6:	1c6e      	adds	r6, r5, #1
 8003af8:	3a30      	subs	r2, #48	@ 0x30
 8003afa:	2a09      	cmp	r2, #9
 8003afc:	d903      	bls.n	8003b06 <_svfiprintf_r+0x1a6>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0c8      	beq.n	8003a94 <_svfiprintf_r+0x134>
 8003b02:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b04:	e7c6      	b.n	8003a94 <_svfiprintf_r+0x134>
 8003b06:	4341      	muls	r1, r0
 8003b08:	0035      	movs	r5, r6
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	1889      	adds	r1, r1, r2
 8003b0e:	e7f1      	b.n	8003af4 <_svfiprintf_r+0x194>
 8003b10:	aa07      	add	r2, sp, #28
 8003b12:	9200      	str	r2, [sp, #0]
 8003b14:	0021      	movs	r1, r4
 8003b16:	003a      	movs	r2, r7
 8003b18:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <_svfiprintf_r+0x1f8>)
 8003b1a:	9803      	ldr	r0, [sp, #12]
 8003b1c:	e000      	b.n	8003b20 <_svfiprintf_r+0x1c0>
 8003b1e:	bf00      	nop
 8003b20:	9004      	str	r0, [sp, #16]
 8003b22:	9b04      	ldr	r3, [sp, #16]
 8003b24:	3301      	adds	r3, #1
 8003b26:	d1d6      	bne.n	8003ad6 <_svfiprintf_r+0x176>
 8003b28:	89bb      	ldrh	r3, [r7, #12]
 8003b2a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003b2c:	065b      	lsls	r3, r3, #25
 8003b2e:	d500      	bpl.n	8003b32 <_svfiprintf_r+0x1d2>
 8003b30:	e72c      	b.n	800398c <_svfiprintf_r+0x2c>
 8003b32:	b021      	add	sp, #132	@ 0x84
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	aa07      	add	r2, sp, #28
 8003b38:	9200      	str	r2, [sp, #0]
 8003b3a:	0021      	movs	r1, r4
 8003b3c:	003a      	movs	r2, r7
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <_svfiprintf_r+0x1f8>)
 8003b40:	9803      	ldr	r0, [sp, #12]
 8003b42:	f000 f87b 	bl	8003c3c <_printf_i>
 8003b46:	e7eb      	b.n	8003b20 <_svfiprintf_r+0x1c0>
 8003b48:	08003fe8 	.word	0x08003fe8
 8003b4c:	08003fee 	.word	0x08003fee
 8003b50:	08003ff2 	.word	0x08003ff2
 8003b54:	00000000 	.word	0x00000000
 8003b58:	080038a1 	.word	0x080038a1

08003b5c <_printf_common>:
 8003b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b5e:	0016      	movs	r6, r2
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	688a      	ldr	r2, [r1, #8]
 8003b64:	690b      	ldr	r3, [r1, #16]
 8003b66:	000c      	movs	r4, r1
 8003b68:	9000      	str	r0, [sp, #0]
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	da00      	bge.n	8003b70 <_printf_common+0x14>
 8003b6e:	0013      	movs	r3, r2
 8003b70:	0022      	movs	r2, r4
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	3243      	adds	r2, #67	@ 0x43
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d001      	beq.n	8003b80 <_printf_common+0x24>
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	6033      	str	r3, [r6, #0]
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	069b      	lsls	r3, r3, #26
 8003b84:	d502      	bpl.n	8003b8c <_printf_common+0x30>
 8003b86:	6833      	ldr	r3, [r6, #0]
 8003b88:	3302      	adds	r3, #2
 8003b8a:	6033      	str	r3, [r6, #0]
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	2306      	movs	r3, #6
 8003b90:	0015      	movs	r5, r2
 8003b92:	401d      	ands	r5, r3
 8003b94:	421a      	tst	r2, r3
 8003b96:	d027      	beq.n	8003be8 <_printf_common+0x8c>
 8003b98:	0023      	movs	r3, r4
 8003b9a:	3343      	adds	r3, #67	@ 0x43
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	4193      	sbcs	r3, r2
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	0692      	lsls	r2, r2, #26
 8003ba6:	d430      	bmi.n	8003c0a <_printf_common+0xae>
 8003ba8:	0022      	movs	r2, r4
 8003baa:	9901      	ldr	r1, [sp, #4]
 8003bac:	9800      	ldr	r0, [sp, #0]
 8003bae:	9d08      	ldr	r5, [sp, #32]
 8003bb0:	3243      	adds	r2, #67	@ 0x43
 8003bb2:	47a8      	blx	r5
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d025      	beq.n	8003c04 <_printf_common+0xa8>
 8003bb8:	2206      	movs	r2, #6
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	2500      	movs	r5, #0
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d105      	bne.n	8003bd0 <_printf_common+0x74>
 8003bc4:	6833      	ldr	r3, [r6, #0]
 8003bc6:	68e5      	ldr	r5, [r4, #12]
 8003bc8:	1aed      	subs	r5, r5, r3
 8003bca:	43eb      	mvns	r3, r5
 8003bcc:	17db      	asrs	r3, r3, #31
 8003bce:	401d      	ands	r5, r3
 8003bd0:	68a3      	ldr	r3, [r4, #8]
 8003bd2:	6922      	ldr	r2, [r4, #16]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	dd01      	ble.n	8003bdc <_printf_common+0x80>
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	18ed      	adds	r5, r5, r3
 8003bdc:	2600      	movs	r6, #0
 8003bde:	42b5      	cmp	r5, r6
 8003be0:	d120      	bne.n	8003c24 <_printf_common+0xc8>
 8003be2:	2000      	movs	r0, #0
 8003be4:	e010      	b.n	8003c08 <_printf_common+0xac>
 8003be6:	3501      	adds	r5, #1
 8003be8:	68e3      	ldr	r3, [r4, #12]
 8003bea:	6832      	ldr	r2, [r6, #0]
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	42ab      	cmp	r3, r5
 8003bf0:	ddd2      	ble.n	8003b98 <_printf_common+0x3c>
 8003bf2:	0022      	movs	r2, r4
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9901      	ldr	r1, [sp, #4]
 8003bf8:	9800      	ldr	r0, [sp, #0]
 8003bfa:	9f08      	ldr	r7, [sp, #32]
 8003bfc:	3219      	adds	r2, #25
 8003bfe:	47b8      	blx	r7
 8003c00:	3001      	adds	r0, #1
 8003c02:	d1f0      	bne.n	8003be6 <_printf_common+0x8a>
 8003c04:	2001      	movs	r0, #1
 8003c06:	4240      	negs	r0, r0
 8003c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c0a:	2030      	movs	r0, #48	@ 0x30
 8003c0c:	18e1      	adds	r1, r4, r3
 8003c0e:	3143      	adds	r1, #67	@ 0x43
 8003c10:	7008      	strb	r0, [r1, #0]
 8003c12:	0021      	movs	r1, r4
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	3145      	adds	r1, #69	@ 0x45
 8003c18:	7809      	ldrb	r1, [r1, #0]
 8003c1a:	18a2      	adds	r2, r4, r2
 8003c1c:	3243      	adds	r2, #67	@ 0x43
 8003c1e:	3302      	adds	r3, #2
 8003c20:	7011      	strb	r1, [r2, #0]
 8003c22:	e7c1      	b.n	8003ba8 <_printf_common+0x4c>
 8003c24:	0022      	movs	r2, r4
 8003c26:	2301      	movs	r3, #1
 8003c28:	9901      	ldr	r1, [sp, #4]
 8003c2a:	9800      	ldr	r0, [sp, #0]
 8003c2c:	9f08      	ldr	r7, [sp, #32]
 8003c2e:	321a      	adds	r2, #26
 8003c30:	47b8      	blx	r7
 8003c32:	3001      	adds	r0, #1
 8003c34:	d0e6      	beq.n	8003c04 <_printf_common+0xa8>
 8003c36:	3601      	adds	r6, #1
 8003c38:	e7d1      	b.n	8003bde <_printf_common+0x82>
	...

08003c3c <_printf_i>:
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3e:	b08b      	sub	sp, #44	@ 0x2c
 8003c40:	9206      	str	r2, [sp, #24]
 8003c42:	000a      	movs	r2, r1
 8003c44:	3243      	adds	r2, #67	@ 0x43
 8003c46:	9307      	str	r3, [sp, #28]
 8003c48:	9005      	str	r0, [sp, #20]
 8003c4a:	9203      	str	r2, [sp, #12]
 8003c4c:	7e0a      	ldrb	r2, [r1, #24]
 8003c4e:	000c      	movs	r4, r1
 8003c50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003c52:	2a78      	cmp	r2, #120	@ 0x78
 8003c54:	d809      	bhi.n	8003c6a <_printf_i+0x2e>
 8003c56:	2a62      	cmp	r2, #98	@ 0x62
 8003c58:	d80b      	bhi.n	8003c72 <_printf_i+0x36>
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	d100      	bne.n	8003c60 <_printf_i+0x24>
 8003c5e:	e0ba      	b.n	8003dd6 <_printf_i+0x19a>
 8003c60:	497a      	ldr	r1, [pc, #488]	@ (8003e4c <_printf_i+0x210>)
 8003c62:	9104      	str	r1, [sp, #16]
 8003c64:	2a58      	cmp	r2, #88	@ 0x58
 8003c66:	d100      	bne.n	8003c6a <_printf_i+0x2e>
 8003c68:	e08e      	b.n	8003d88 <_printf_i+0x14c>
 8003c6a:	0025      	movs	r5, r4
 8003c6c:	3542      	adds	r5, #66	@ 0x42
 8003c6e:	702a      	strb	r2, [r5, #0]
 8003c70:	e022      	b.n	8003cb8 <_printf_i+0x7c>
 8003c72:	0010      	movs	r0, r2
 8003c74:	3863      	subs	r0, #99	@ 0x63
 8003c76:	2815      	cmp	r0, #21
 8003c78:	d8f7      	bhi.n	8003c6a <_printf_i+0x2e>
 8003c7a:	f7fc fa4d 	bl	8000118 <__gnu_thumb1_case_shi>
 8003c7e:	0016      	.short	0x0016
 8003c80:	fff6001f 	.word	0xfff6001f
 8003c84:	fff6fff6 	.word	0xfff6fff6
 8003c88:	001ffff6 	.word	0x001ffff6
 8003c8c:	fff6fff6 	.word	0xfff6fff6
 8003c90:	fff6fff6 	.word	0xfff6fff6
 8003c94:	0036009f 	.word	0x0036009f
 8003c98:	fff6007e 	.word	0xfff6007e
 8003c9c:	00b0fff6 	.word	0x00b0fff6
 8003ca0:	0036fff6 	.word	0x0036fff6
 8003ca4:	fff6fff6 	.word	0xfff6fff6
 8003ca8:	0082      	.short	0x0082
 8003caa:	0025      	movs	r5, r4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	3542      	adds	r5, #66	@ 0x42
 8003cb0:	1d11      	adds	r1, r2, #4
 8003cb2:	6019      	str	r1, [r3, #0]
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	702b      	strb	r3, [r5, #0]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e09e      	b.n	8003dfa <_printf_i+0x1be>
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	6809      	ldr	r1, [r1, #0]
 8003cc0:	1d02      	adds	r2, r0, #4
 8003cc2:	060d      	lsls	r5, r1, #24
 8003cc4:	d50b      	bpl.n	8003cde <_printf_i+0xa2>
 8003cc6:	6806      	ldr	r6, [r0, #0]
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	2e00      	cmp	r6, #0
 8003ccc:	da03      	bge.n	8003cd6 <_printf_i+0x9a>
 8003cce:	232d      	movs	r3, #45	@ 0x2d
 8003cd0:	9a03      	ldr	r2, [sp, #12]
 8003cd2:	4276      	negs	r6, r6
 8003cd4:	7013      	strb	r3, [r2, #0]
 8003cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e4c <_printf_i+0x210>)
 8003cd8:	270a      	movs	r7, #10
 8003cda:	9304      	str	r3, [sp, #16]
 8003cdc:	e018      	b.n	8003d10 <_printf_i+0xd4>
 8003cde:	6806      	ldr	r6, [r0, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	0649      	lsls	r1, r1, #25
 8003ce4:	d5f1      	bpl.n	8003cca <_printf_i+0x8e>
 8003ce6:	b236      	sxth	r6, r6
 8003ce8:	e7ef      	b.n	8003cca <_printf_i+0x8e>
 8003cea:	6808      	ldr	r0, [r1, #0]
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	c940      	ldmia	r1!, {r6}
 8003cf0:	0605      	lsls	r5, r0, #24
 8003cf2:	d402      	bmi.n	8003cfa <_printf_i+0xbe>
 8003cf4:	0640      	lsls	r0, r0, #25
 8003cf6:	d500      	bpl.n	8003cfa <_printf_i+0xbe>
 8003cf8:	b2b6      	uxth	r6, r6
 8003cfa:	6019      	str	r1, [r3, #0]
 8003cfc:	4b53      	ldr	r3, [pc, #332]	@ (8003e4c <_printf_i+0x210>)
 8003cfe:	270a      	movs	r7, #10
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	2a6f      	cmp	r2, #111	@ 0x6f
 8003d04:	d100      	bne.n	8003d08 <_printf_i+0xcc>
 8003d06:	3f02      	subs	r7, #2
 8003d08:	0023      	movs	r3, r4
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	3343      	adds	r3, #67	@ 0x43
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	60a3      	str	r3, [r4, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db06      	blt.n	8003d26 <_printf_i+0xea>
 8003d18:	2104      	movs	r1, #4
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	9d03      	ldr	r5, [sp, #12]
 8003d1e:	438a      	bics	r2, r1
 8003d20:	6022      	str	r2, [r4, #0]
 8003d22:	4333      	orrs	r3, r6
 8003d24:	d00c      	beq.n	8003d40 <_printf_i+0x104>
 8003d26:	9d03      	ldr	r5, [sp, #12]
 8003d28:	0030      	movs	r0, r6
 8003d2a:	0039      	movs	r1, r7
 8003d2c:	f7fc fa84 	bl	8000238 <__aeabi_uidivmod>
 8003d30:	9b04      	ldr	r3, [sp, #16]
 8003d32:	3d01      	subs	r5, #1
 8003d34:	5c5b      	ldrb	r3, [r3, r1]
 8003d36:	702b      	strb	r3, [r5, #0]
 8003d38:	0033      	movs	r3, r6
 8003d3a:	0006      	movs	r6, r0
 8003d3c:	429f      	cmp	r7, r3
 8003d3e:	d9f3      	bls.n	8003d28 <_printf_i+0xec>
 8003d40:	2f08      	cmp	r7, #8
 8003d42:	d109      	bne.n	8003d58 <_printf_i+0x11c>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	07db      	lsls	r3, r3, #31
 8003d48:	d506      	bpl.n	8003d58 <_printf_i+0x11c>
 8003d4a:	6862      	ldr	r2, [r4, #4]
 8003d4c:	6923      	ldr	r3, [r4, #16]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	dc02      	bgt.n	8003d58 <_printf_i+0x11c>
 8003d52:	2330      	movs	r3, #48	@ 0x30
 8003d54:	3d01      	subs	r5, #1
 8003d56:	702b      	strb	r3, [r5, #0]
 8003d58:	9b03      	ldr	r3, [sp, #12]
 8003d5a:	1b5b      	subs	r3, r3, r5
 8003d5c:	6123      	str	r3, [r4, #16]
 8003d5e:	9b07      	ldr	r3, [sp, #28]
 8003d60:	0021      	movs	r1, r4
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	9805      	ldr	r0, [sp, #20]
 8003d66:	9b06      	ldr	r3, [sp, #24]
 8003d68:	aa09      	add	r2, sp, #36	@ 0x24
 8003d6a:	f7ff fef7 	bl	8003b5c <_printf_common>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d148      	bne.n	8003e04 <_printf_i+0x1c8>
 8003d72:	2001      	movs	r0, #1
 8003d74:	4240      	negs	r0, r0
 8003d76:	b00b      	add	sp, #44	@ 0x2c
 8003d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	6809      	ldr	r1, [r1, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	6022      	str	r2, [r4, #0]
 8003d82:	2278      	movs	r2, #120	@ 0x78
 8003d84:	4932      	ldr	r1, [pc, #200]	@ (8003e50 <_printf_i+0x214>)
 8003d86:	9104      	str	r1, [sp, #16]
 8003d88:	0021      	movs	r1, r4
 8003d8a:	3145      	adds	r1, #69	@ 0x45
 8003d8c:	700a      	strb	r2, [r1, #0]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	c940      	ldmia	r1!, {r6}
 8003d94:	0610      	lsls	r0, r2, #24
 8003d96:	d402      	bmi.n	8003d9e <_printf_i+0x162>
 8003d98:	0650      	lsls	r0, r2, #25
 8003d9a:	d500      	bpl.n	8003d9e <_printf_i+0x162>
 8003d9c:	b2b6      	uxth	r6, r6
 8003d9e:	6019      	str	r1, [r3, #0]
 8003da0:	07d3      	lsls	r3, r2, #31
 8003da2:	d502      	bpl.n	8003daa <_printf_i+0x16e>
 8003da4:	2320      	movs	r3, #32
 8003da6:	4313      	orrs	r3, r2
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d001      	beq.n	8003db2 <_printf_i+0x176>
 8003dae:	2710      	movs	r7, #16
 8003db0:	e7aa      	b.n	8003d08 <_printf_i+0xcc>
 8003db2:	2220      	movs	r2, #32
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	4393      	bics	r3, r2
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	e7f8      	b.n	8003dae <_printf_i+0x172>
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	680d      	ldr	r5, [r1, #0]
 8003dc0:	1d10      	adds	r0, r2, #4
 8003dc2:	6949      	ldr	r1, [r1, #20]
 8003dc4:	6018      	str	r0, [r3, #0]
 8003dc6:	6813      	ldr	r3, [r2, #0]
 8003dc8:	062e      	lsls	r6, r5, #24
 8003dca:	d501      	bpl.n	8003dd0 <_printf_i+0x194>
 8003dcc:	6019      	str	r1, [r3, #0]
 8003dce:	e002      	b.n	8003dd6 <_printf_i+0x19a>
 8003dd0:	066d      	lsls	r5, r5, #25
 8003dd2:	d5fb      	bpl.n	8003dcc <_printf_i+0x190>
 8003dd4:	8019      	strh	r1, [r3, #0]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9d03      	ldr	r5, [sp, #12]
 8003dda:	6123      	str	r3, [r4, #16]
 8003ddc:	e7bf      	b.n	8003d5e <_printf_i+0x122>
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	1d11      	adds	r1, r2, #4
 8003de2:	6019      	str	r1, [r3, #0]
 8003de4:	6815      	ldr	r5, [r2, #0]
 8003de6:	2100      	movs	r1, #0
 8003de8:	0028      	movs	r0, r5
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	f000 f856 	bl	8003e9c <memchr>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d001      	beq.n	8003df8 <_printf_i+0x1bc>
 8003df4:	1b40      	subs	r0, r0, r5
 8003df6:	6060      	str	r0, [r4, #4]
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9a03      	ldr	r2, [sp, #12]
 8003e00:	7013      	strb	r3, [r2, #0]
 8003e02:	e7ac      	b.n	8003d5e <_printf_i+0x122>
 8003e04:	002a      	movs	r2, r5
 8003e06:	6923      	ldr	r3, [r4, #16]
 8003e08:	9906      	ldr	r1, [sp, #24]
 8003e0a:	9805      	ldr	r0, [sp, #20]
 8003e0c:	9d07      	ldr	r5, [sp, #28]
 8003e0e:	47a8      	blx	r5
 8003e10:	3001      	adds	r0, #1
 8003e12:	d0ae      	beq.n	8003d72 <_printf_i+0x136>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	079b      	lsls	r3, r3, #30
 8003e18:	d415      	bmi.n	8003e46 <_printf_i+0x20a>
 8003e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	4298      	cmp	r0, r3
 8003e20:	daa9      	bge.n	8003d76 <_printf_i+0x13a>
 8003e22:	0018      	movs	r0, r3
 8003e24:	e7a7      	b.n	8003d76 <_printf_i+0x13a>
 8003e26:	0022      	movs	r2, r4
 8003e28:	2301      	movs	r3, #1
 8003e2a:	9906      	ldr	r1, [sp, #24]
 8003e2c:	9805      	ldr	r0, [sp, #20]
 8003e2e:	9e07      	ldr	r6, [sp, #28]
 8003e30:	3219      	adds	r2, #25
 8003e32:	47b0      	blx	r6
 8003e34:	3001      	adds	r0, #1
 8003e36:	d09c      	beq.n	8003d72 <_printf_i+0x136>
 8003e38:	3501      	adds	r5, #1
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	dcf0      	bgt.n	8003e26 <_printf_i+0x1ea>
 8003e44:	e7e9      	b.n	8003e1a <_printf_i+0x1de>
 8003e46:	2500      	movs	r5, #0
 8003e48:	e7f7      	b.n	8003e3a <_printf_i+0x1fe>
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	08003ff9 	.word	0x08003ff9
 8003e50:	0800400a 	.word	0x0800400a

08003e54 <memmove>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	4288      	cmp	r0, r1
 8003e58:	d902      	bls.n	8003e60 <memmove+0xc>
 8003e5a:	188b      	adds	r3, r1, r2
 8003e5c:	4298      	cmp	r0, r3
 8003e5e:	d308      	bcc.n	8003e72 <memmove+0x1e>
 8003e60:	2300      	movs	r3, #0
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d007      	beq.n	8003e76 <memmove+0x22>
 8003e66:	5ccc      	ldrb	r4, [r1, r3]
 8003e68:	54c4      	strb	r4, [r0, r3]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	e7f9      	b.n	8003e62 <memmove+0xe>
 8003e6e:	5c8b      	ldrb	r3, [r1, r2]
 8003e70:	5483      	strb	r3, [r0, r2]
 8003e72:	3a01      	subs	r2, #1
 8003e74:	d2fb      	bcs.n	8003e6e <memmove+0x1a>
 8003e76:	bd10      	pop	{r4, pc}

08003e78 <_sbrk_r>:
 8003e78:	2300      	movs	r3, #0
 8003e7a:	b570      	push	{r4, r5, r6, lr}
 8003e7c:	4d06      	ldr	r5, [pc, #24]	@ (8003e98 <_sbrk_r+0x20>)
 8003e7e:	0004      	movs	r4, r0
 8003e80:	0008      	movs	r0, r1
 8003e82:	602b      	str	r3, [r5, #0]
 8003e84:	f7fc fde6 	bl	8000a54 <_sbrk>
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d103      	bne.n	8003e94 <_sbrk_r+0x1c>
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d000      	beq.n	8003e94 <_sbrk_r+0x1c>
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	bd70      	pop	{r4, r5, r6, pc}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	2000036c 	.word	0x2000036c

08003e9c <memchr>:
 8003e9c:	b2c9      	uxtb	r1, r1
 8003e9e:	1882      	adds	r2, r0, r2
 8003ea0:	4290      	cmp	r0, r2
 8003ea2:	d101      	bne.n	8003ea8 <memchr+0xc>
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	4770      	bx	lr
 8003ea8:	7803      	ldrb	r3, [r0, #0]
 8003eaa:	428b      	cmp	r3, r1
 8003eac:	d0fb      	beq.n	8003ea6 <memchr+0xa>
 8003eae:	3001      	adds	r0, #1
 8003eb0:	e7f6      	b.n	8003ea0 <memchr+0x4>

08003eb2 <memcpy>:
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d100      	bne.n	8003ebc <memcpy+0xa>
 8003eba:	bd10      	pop	{r4, pc}
 8003ebc:	5ccc      	ldrb	r4, [r1, r3]
 8003ebe:	54c4      	strb	r4, [r0, r3]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	e7f8      	b.n	8003eb6 <memcpy+0x4>

08003ec4 <_realloc_r>:
 8003ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ec6:	0006      	movs	r6, r0
 8003ec8:	000c      	movs	r4, r1
 8003eca:	0015      	movs	r5, r2
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	d105      	bne.n	8003edc <_realloc_r+0x18>
 8003ed0:	0011      	movs	r1, r2
 8003ed2:	f7ff fc55 	bl	8003780 <_malloc_r>
 8003ed6:	0004      	movs	r4, r0
 8003ed8:	0020      	movs	r0, r4
 8003eda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	d103      	bne.n	8003ee8 <_realloc_r+0x24>
 8003ee0:	f7ff fbe2 	bl	80036a8 <_free_r>
 8003ee4:	002c      	movs	r4, r5
 8003ee6:	e7f7      	b.n	8003ed8 <_realloc_r+0x14>
 8003ee8:	f000 f81c 	bl	8003f24 <_malloc_usable_size_r>
 8003eec:	0007      	movs	r7, r0
 8003eee:	4285      	cmp	r5, r0
 8003ef0:	d802      	bhi.n	8003ef8 <_realloc_r+0x34>
 8003ef2:	0843      	lsrs	r3, r0, #1
 8003ef4:	42ab      	cmp	r3, r5
 8003ef6:	d3ef      	bcc.n	8003ed8 <_realloc_r+0x14>
 8003ef8:	0029      	movs	r1, r5
 8003efa:	0030      	movs	r0, r6
 8003efc:	f7ff fc40 	bl	8003780 <_malloc_r>
 8003f00:	9001      	str	r0, [sp, #4]
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d101      	bne.n	8003f0a <_realloc_r+0x46>
 8003f06:	9c01      	ldr	r4, [sp, #4]
 8003f08:	e7e6      	b.n	8003ed8 <_realloc_r+0x14>
 8003f0a:	002a      	movs	r2, r5
 8003f0c:	42bd      	cmp	r5, r7
 8003f0e:	d900      	bls.n	8003f12 <_realloc_r+0x4e>
 8003f10:	003a      	movs	r2, r7
 8003f12:	0021      	movs	r1, r4
 8003f14:	9801      	ldr	r0, [sp, #4]
 8003f16:	f7ff ffcc 	bl	8003eb2 <memcpy>
 8003f1a:	0021      	movs	r1, r4
 8003f1c:	0030      	movs	r0, r6
 8003f1e:	f7ff fbc3 	bl	80036a8 <_free_r>
 8003f22:	e7f0      	b.n	8003f06 <_realloc_r+0x42>

08003f24 <_malloc_usable_size_r>:
 8003f24:	1f0b      	subs	r3, r1, #4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	1f18      	subs	r0, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da01      	bge.n	8003f32 <_malloc_usable_size_r+0xe>
 8003f2e:	580b      	ldr	r3, [r1, r0]
 8003f30:	18c0      	adds	r0, r0, r3
 8003f32:	4770      	bx	lr

08003f34 <_init>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr

08003f40 <_fini>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr
